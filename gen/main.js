
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

var _elm_lang$lazy$Native_Lazy = function() {

function memoize(thunk)
{
    var value;
    var isForced = false;
    return function(tuple0) {
        if (!isForced) {
            value = thunk(tuple0);
            isForced = true;
        }
        return value;
    };
}

return {
    memoize: memoize
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(x, y)
{
	var stack = [];
	var isEqual = eqHelp(x, y, 0, stack);
	var pair;
	while (isEqual && (pair = stack.pop()))
	{
		isEqual = eqHelp(pair.x, pair.y, 0, stack);
	}
	return isEqual;
}


function eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push({ x: x, y: y });
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object')
	{
		if (typeof x === 'function')
		{
			throw new Error(
				'Trying to use `(==)` on functions. There is no way to know if functions are "the same" in the Elm sense.'
				+ ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#=='
				+ ' which describes why it is this way and what the better version will look like.'
			);
		}
		return false;
	}

	if (x === null || y === null)
	{
		return false
	}

	if (x instanceof Date)
	{
		return x.getTime() === y.getTime();
	}

	if (!('ctor' in x))
	{
		for (var key in x)
		{
			if (!eqHelp(x[key], y[key], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	// convert Dicts and Sets to lists
	if (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin')
	{
		x = _elm_lang$core$Dict$toList(x);
		y = _elm_lang$core$Dict$toList(y);
	}
	if (x.ctor === 'Set_elm_builtin')
	{
		x = _elm_lang$core$Set$toList(x);
		y = _elm_lang$core$Set$toList(y);
	}

	// check if lists are equal without recursion
	if (x.ctor === '::')
	{
		var a = x;
		var b = y;
		while (a.ctor === '::' && b.ctor === '::')
		{
			if (!eqHelp(a._0, b._0, depth + 1, stack))
			{
				return false;
			}
			a = a._1;
			b = b._1;
		}
		return a.ctor === b.ctor;
	}

	// check if Arrays are equal
	if (x.ctor === '_Array')
	{
		var xs = _elm_lang$core$Native_Array.toJSArray(x);
		var ys = _elm_lang$core$Native_Array.toJSArray(y);
		if (xs.length !== ys.length)
		{
			return false;
		}
		for (var i = 0; i < xs.length; i++)
		{
			if (!eqHelp(xs[i], ys[i], depth + 1, stack))
			{
				return false;
			}
		}
		return true;
	}

	if (!eqHelp(x.ctor, y.ctor, depth + 1, stack))
	{
		return false;
	}

	for (var key in x)
	{
		if (!eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}

	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? EQ : a < b ? LT : GT;
	}

	if (x.ctor === '::' || x.ctor === '[]')
	{
		while (x.ctor === '::' && y.ctor === '::')
		{
			var ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
		return x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;
	}

	if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var ord;
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}

	throw new Error(
		'Comparison error: comparison is only defined on ints, '
		+ 'floats, times, chars, strings, lists of comparable values, '
		+ 'and tuples of comparable values.'
	);
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		return '<function>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'Set_elm_builtin')
		{
			return 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin')
		{
			return 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		if (v instanceof Date)
		{
			return '<' + v.toString() + '>';
		}

		if (v.elm_web_socket)
		{
			return '<websocket>';
		}

		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$never = function (_p0) {
	never:
	while (true) {
		var _p1 = _p0;
		var _v1 = _p1._0;
		_p0 = _v1;
		continue never;
	}
};
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p2) {
		var _p3 = _p2;
		return A2(f, _p3._0, _p3._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$always = F2(
	function (a, _p4) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$JustOneMore = function (a) {
	return {ctor: 'JustOneMore', _0: a};
};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		var _p1 = maybeValue;
		if (_p1.ctor === 'Just') {
			return callback(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p2 = maybe;
		if (_p2.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p3 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p3.ctor === '_Tuple2') && (_p3._0.ctor === 'Just')) && (_p3._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p3._0._0, _p3._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p4 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p4.ctor === '_Tuple3') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === 'Just')) && (_p4._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p4._0._0, _p4._1._0, _p4._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p5 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p5.ctor === '_Tuple4') && (_p5._0.ctor === 'Just')) && (_p5._1.ctor === 'Just')) && (_p5._2.ctor === 'Just')) && (_p5._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p6 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p6.ctor === '_Tuple5') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) && (_p6._2.ctor === 'Just')) && (_p6._3.ctor === 'Just')) && (_p6._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$singleton = function (value) {
	return {
		ctor: '::',
		_0: value,
		_1: {ctor: '[]'}
	};
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			_elm_lang$core$List$any,
			function (_p2) {
				return !isOkay(_p2);
			},
			list);
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return {
						ctor: '::',
						_0: f(x),
						_1: acc
					};
				}),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (front, back) {
				return pred(front) ? {ctor: '::', _0: front, _1: back} : back;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return {ctor: '::', _0: _p10._0, _1: xs};
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			{ctor: '[]'},
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return {ctor: '::', _0: x, _1: y};
			}),
		{ctor: '[]'},
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return {
						ctor: '::',
						_0: A2(f, x, _p11._0),
						_1: accAcc
					};
				} else {
					return {ctor: '[]'};
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				{
					ctor: '::',
					_0: b,
					_1: {ctor: '[]'}
				},
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		{ctor: '[]'},
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: x, _1: _p16},
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: {ctor: '::', _0: x, _1: _p15}
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: _p19._0, _1: _p20._0},
				_1: {ctor: '::', _0: _p19._1, _1: _p20._1}
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			var step = F2(
				function (x, rest) {
					return {
						ctor: '::',
						_0: sep,
						_1: {ctor: '::', _0: x, _1: rest}
					};
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				{ctor: '[]'},
				_p21._1);
			return {ctor: '::', _0: _p21._0, _1: spersed};
		}
	});
var _elm_lang$core$List$takeReverse = F3(
	function (n, list, taken) {
		takeReverse:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return taken;
			} else {
				var _p22 = list;
				if (_p22.ctor === '[]') {
					return taken;
				} else {
					var _v23 = n - 1,
						_v24 = _p22._1,
						_v25 = {ctor: '::', _0: _p22._0, _1: taken};
					n = _v23;
					list = _v24;
					taken = _v25;
					continue takeReverse;
				}
			}
		}
	});
var _elm_lang$core$List$takeTailRec = F2(
	function (n, list) {
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$takeReverse,
				n,
				list,
				{ctor: '[]'}));
	});
var _elm_lang$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return {ctor: '[]'};
		} else {
			var _p23 = {ctor: '_Tuple2', _0: n, _1: list};
			_v26_5:
			do {
				_v26_1:
				do {
					if (_p23.ctor === '_Tuple2') {
						if (_p23._1.ctor === '[]') {
							return list;
						} else {
							if (_p23._1._1.ctor === '::') {
								switch (_p23._0) {
									case 1:
										break _v26_1;
									case 2:
										return {
											ctor: '::',
											_0: _p23._1._0,
											_1: {
												ctor: '::',
												_0: _p23._1._1._0,
												_1: {ctor: '[]'}
											}
										};
									case 3:
										if (_p23._1._1._1.ctor === '::') {
											return {
												ctor: '::',
												_0: _p23._1._0,
												_1: {
													ctor: '::',
													_0: _p23._1._1._0,
													_1: {
														ctor: '::',
														_0: _p23._1._1._1._0,
														_1: {ctor: '[]'}
													}
												}
											};
										} else {
											break _v26_5;
										}
									default:
										if ((_p23._1._1._1.ctor === '::') && (_p23._1._1._1._1.ctor === '::')) {
											var _p28 = _p23._1._1._1._0;
											var _p27 = _p23._1._1._0;
											var _p26 = _p23._1._0;
											var _p25 = _p23._1._1._1._1._0;
											var _p24 = _p23._1._1._1._1._1;
											return (_elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0) ? {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)
														}
													}
												}
											} : {
												ctor: '::',
												_0: _p26,
												_1: {
													ctor: '::',
													_0: _p27,
													_1: {
														ctor: '::',
														_0: _p28,
														_1: {
															ctor: '::',
															_0: _p25,
															_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)
														}
													}
												}
											};
										} else {
											break _v26_5;
										}
								}
							} else {
								if (_p23._0 === 1) {
									break _v26_1;
								} else {
									break _v26_5;
								}
							}
						}
					} else {
						break _v26_5;
					}
				} while(false);
				return {
					ctor: '::',
					_0: _p23._1._0,
					_1: {ctor: '[]'}
				};
			} while(false);
			return list;
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		return A3(_elm_lang$core$List$takeFast, 0, n, list);
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v27 = {ctor: '::', _0: value, _1: result},
					_v28 = n - 1,
					_v29 = value;
				result = _v27;
				n = _v28;
				value = _v29;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			{ctor: '[]'},
			n,
			value);
	});
var _elm_lang$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {
				var _v30 = lo,
					_v31 = hi - 1,
					_v32 = {ctor: '::', _0: hi, _1: list};
				lo = _v30;
				hi = _v31;
				list = _v32;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var _elm_lang$core$List$range = F2(
	function (lo, hi) {
		return A3(
			_elm_lang$core$List$rangeHelp,
			lo,
			hi,
			{ctor: '[]'});
	});
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			A2(
				_elm_lang$core$List$range,
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (callback, result) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$mapError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _elm_lang$core$Native_List.Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _elm_lang$core$Native_List.fromArray(is);
}


function toInt(s)
{
	var len = s.length;

	// if empty
	if (len === 0)
	{
		return intErr(s);
	}

	// if hex
	var c = s[0];
	if (c === '0' && s[1] === 'x')
	{
		for (var i = 2; i < len; ++i)
		{
			var c = s[i];
			if (('0' <= c && c <= '9') || ('A' <= c && c <= 'F') || ('a' <= c && c <= 'f'))
			{
				continue;
			}
			return intErr(s);
		}
		return _elm_lang$core$Result$Ok(parseInt(s, 16));
	}

	// is decimal
	if (c > '9' || (c < '0' && c !== '-' && c !== '+'))
	{
		return intErr(s);
	}
	for (var i = 1; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return intErr(s);
		}
	}

	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function intErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int");
}


function toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return floatErr(s);
	}
	var n = +s;
	// faster isNaN check
	return n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);
}

function floatErr(s)
{
	return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float");
}


function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

var _elm_lang$core$Tuple$mapSecond = F2(
	function (func, _p0) {
		var _p1 = _p0;
		return {
			ctor: '_Tuple2',
			_0: _p1._0,
			_1: func(_p1._1)
		};
	});
var _elm_lang$core$Tuple$mapFirst = F2(
	function (func, _p2) {
		var _p3 = _p2;
		return {
			ctor: '_Tuple2',
			_0: func(_p3._0),
			_1: _p3._1
		};
	});
var _elm_lang$core$Tuple$second = function (_p4) {
	var _p5 = _p4;
	return _p5._1;
};
var _elm_lang$core$Tuple$first = function (_p6) {
	var _p7 = _p6;
	return _p7._0;
};

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function program(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flags !== 'undefined')
				{
					throw new Error(
						'The `' + moduleName + '` module does not need flags.\n'
						+ 'Call ' + moduleName + '.worker() with no arguments and you should be all set!'
					);
				}

				return initialize(
					impl.init,
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function programWithFlags(impl)
{
	return function(flagDecoder)
	{
		return function(object, moduleName)
		{
			object['worker'] = function worker(flags)
			{
				if (typeof flagDecoder === 'undefined')
				{
					throw new Error(
						'Are you trying to sneak a Never value into Elm? Trickster!\n'
						+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
						+ 'Use `program` instead if you do not want flags.'
					);
				}

				var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
				if (result.ctor === 'Err')
				{
					throw new Error(
						moduleName + '.worker(...) was called with an unexpected argument.\n'
						+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
						+ result._0
					);
				}

				return initialize(
					impl.init(result._0),
					impl.update,
					impl.subscriptions,
					renderer
				);
			};
		};
	};
}

function renderer(enqueue, _)
{
	return function(_) {};
}


// HTML TO PROGRAM

function htmlToProgram(vnode)
{
	var emptyBag = batch(_elm_lang$core$Native_List.Nil);
	var noChange = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		emptyBag
	);

	return _elm_lang$virtual_dom$VirtualDom$program({
		init: noChange,
		view: function(model) { return main; },
		update: F2(function(msg, model) { return noChange; }),
		subscriptions: function (model) { return emptyBag; }
	});
}


// INITIALIZE A PROGRAM

function initialize(init, update, subscriptions, renderer)
{
	// ambient state
	var managers = {};
	var updateView;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var model = init._0;
		updateView = renderer(enqueue, model);
		var cmds = init._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			updateView(model);
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, loop, handleMsg);
	}

	var task = A2(andThen, loop, init);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = converter(cmdList._0);
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var sentBeforeInit = [];
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;
	var currentOnEffects = preInitOnEffects;
	var currentSend = preInitSend;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function preInitOnEffects(router, subList, state)
	{
		var postInitResult = postInitOnEffects(router, subList, state);

		for(var i = 0; i < sentBeforeInit.length; i++)
		{
			postInitSend(sentBeforeInit[i]);
		}

		sentBeforeInit = null; // to release objects held in queue
		currentSend = postInitSend;
		currentOnEffects = postInitOnEffects;
		return postInitResult;
	}

	function postInitOnEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	function onEffects(router, subList, state)
	{
		return currentOnEffects(router, subList, state);
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function preInitSend(value)
	{
		sentBeforeInit.push(value);
	}

	function postInitSend(value)
	{
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	function send(incomingValue)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		currentSend(result._0);
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,

	htmlToProgram: htmlToProgram,
	program: program,
	programWithFlags: programWithFlags,
	initialize: initialize,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();

//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(callback, task)
{
	return {
		ctor: '_Task_andThen',
		callback: callback,
		task: task
	};
}

function onError(callback, task)
{
	return {
		ctor: '_Task_onError',
		callback: callback,
		task: task
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		if (process.root)
		{
			numSteps = step(numSteps, process);
		}
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	{ctor: '[]'});
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;
var _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _elm_lang$lazy$Lazy$force = function (_p0) {
	var _p1 = _p0;
	return _p1._0(
		{ctor: '_Tuple0'});
};
var _elm_lang$lazy$Lazy$Lazy = function (a) {
	return {ctor: 'Lazy', _0: a};
};
var _elm_lang$lazy$Lazy$lazy = function (thunk) {
	return _elm_lang$lazy$Lazy$Lazy(
		_elm_lang$lazy$Native_Lazy.memoize(thunk));
};
var _elm_lang$lazy$Lazy$map = F2(
	function (f, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p2) {
				var _p3 = _p2;
				return f(
					_elm_lang$lazy$Lazy$force(a));
			});
	});
var _elm_lang$lazy$Lazy$map2 = F3(
	function (f, a, b) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p4) {
				var _p5 = _p4;
				return A2(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b));
			});
	});
var _elm_lang$lazy$Lazy$map3 = F4(
	function (f, a, b, c) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p6) {
				var _p7 = _p6;
				return A3(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c));
			});
	});
var _elm_lang$lazy$Lazy$map4 = F5(
	function (f, a, b, c, d) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p8) {
				var _p9 = _p8;
				return A4(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d));
			});
	});
var _elm_lang$lazy$Lazy$map5 = F6(
	function (f, a, b, c, d, e) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p10) {
				var _p11 = _p10;
				return A5(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d),
					_elm_lang$lazy$Lazy$force(e));
			});
	});
var _elm_lang$lazy$Lazy$apply = F2(
	function (f, x) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_lang$lazy$Lazy$force,
					f,
					_elm_lang$lazy$Lazy$force(x));
			});
	});
var _elm_lang$lazy$Lazy$andThen = F2(
	function (callback, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p14) {
				var _p15 = _p14;
				return _elm_lang$lazy$Lazy$force(
					callback(
						_elm_lang$lazy$Lazy$force(a)));
			});
	});

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[arguments.length - 2],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _Bogdanp$elm_combine$Combine$app = function (p) {
	var _p0 = p;
	if (_p0.ctor === 'Parser') {
		return _p0._0;
	} else {
		return _elm_lang$lazy$Lazy$force(_p0._0);
	}
};
var _Bogdanp$elm_combine$Combine$InputStream = F3(
	function (a, b, c) {
		return {data: a, input: b, position: c};
	});
var _Bogdanp$elm_combine$Combine$initStream = function (s) {
	return A3(_Bogdanp$elm_combine$Combine$InputStream, s, s, 0);
};
var _Bogdanp$elm_combine$Combine$runParser = F3(
	function (p, st, s) {
		var _p1 = A3(
			_Bogdanp$elm_combine$Combine$app,
			p,
			st,
			_Bogdanp$elm_combine$Combine$initStream(s));
		if (_p1._2.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		} else {
			return _elm_lang$core$Result$Err(
				{ctor: '_Tuple3', _0: _p1._0, _1: _p1._1, _2: _p1._2._0});
		}
	});
var _Bogdanp$elm_combine$Combine$parse = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine$runParser,
		p,
		{ctor: '_Tuple0'});
};
var _Bogdanp$elm_combine$Combine$ParseLocation = F3(
	function (a, b, c) {
		return {source: a, line: b, column: c};
	});
var _Bogdanp$elm_combine$Combine$currentLocation = function (stream) {
	var find = F3(
		function (position, currentLine, lines) {
			find:
			while (true) {
				var _p2 = lines;
				if (_p2.ctor === '[]') {
					return A3(_Bogdanp$elm_combine$Combine$ParseLocation, '', 1, position);
				} else {
					if (_p2._1.ctor === '[]') {
						return A3(_Bogdanp$elm_combine$Combine$ParseLocation, _p2._0, currentLine + 1, position);
					} else {
						var _p3 = _p2._0;
						var length = _elm_lang$core$String$length(_p3);
						if (_elm_lang$core$Native_Utils.cmp(position, length) > -1) {
							var _v3 = (position - length) - 1,
								_v4 = currentLine + 1,
								_v5 = _p2._1;
							position = _v3;
							currentLine = _v4;
							lines = _v5;
							continue find;
						} else {
							if (_elm_lang$core$Native_Utils.eq(currentLine, 0)) {
								return A3(_Bogdanp$elm_combine$Combine$ParseLocation, _p3, 1, position);
							} else {
								return A3(_Bogdanp$elm_combine$Combine$ParseLocation, _p3, currentLine, position - 1);
							}
						}
					}
				}
			}
		});
	var lines = A2(_elm_lang$core$String$split, '\n', stream.data);
	return A3(find, stream.position, 0, lines);
};
var _Bogdanp$elm_combine$Combine$currentSourceLine = function (_p4) {
	return function (_) {
		return _.source;
	}(
		_Bogdanp$elm_combine$Combine$currentLocation(_p4));
};
var _Bogdanp$elm_combine$Combine$currentLine = function (_p5) {
	return function (_) {
		return _.line;
	}(
		_Bogdanp$elm_combine$Combine$currentLocation(_p5));
};
var _Bogdanp$elm_combine$Combine$currentColumn = function (_p6) {
	return function (_) {
		return _.column;
	}(
		_Bogdanp$elm_combine$Combine$currentLocation(_p6));
};
var _Bogdanp$elm_combine$Combine$RecursiveParser = function (a) {
	return {ctor: 'RecursiveParser', _0: a};
};
var _Bogdanp$elm_combine$Combine$lazy = function (t) {
	return _Bogdanp$elm_combine$Combine$RecursiveParser(
		_elm_lang$lazy$Lazy$lazy(
			function (_p7) {
				var _p8 = _p7;
				return _Bogdanp$elm_combine$Combine$app(
					t(
						{ctor: '_Tuple0'}));
			}));
};
var _Bogdanp$elm_combine$Combine$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _Bogdanp$elm_combine$Combine$primitive = _Bogdanp$elm_combine$Combine$Parser;
var _Bogdanp$elm_combine$Combine$bimap = F3(
	function (fok, ferr, p) {
		return _Bogdanp$elm_combine$Combine$Parser(
			F2(
				function (state, stream) {
					var _p9 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
					if (_p9._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Ok(
								fok(_p9._2._0))
						};
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p9._0,
							_1: _p9._1,
							_2: _elm_lang$core$Result$Err(
								ferr(_p9._2._0))
						};
					}
				}));
	});
var _Bogdanp$elm_combine$Combine$map = F2(
	function (f, p) {
		return A3(_Bogdanp$elm_combine$Combine$bimap, f, _elm_lang$core$Basics$identity, p);
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<$>'] = _Bogdanp$elm_combine$Combine$map;
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<$'] = function (res) {
	return _Bogdanp$elm_combine$Combine$map(
		_elm_lang$core$Basics$always(res));
};
var _Bogdanp$elm_combine$Combine$skip = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		p);
};
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['$>'] = _elm_lang$core$Basics$flip(
	F2(
		function (x, y) {
			return A2(_Bogdanp$elm_combine$Combine_ops['<$'], x, y);
		}));
var _Bogdanp$elm_combine$Combine$mapError = _Bogdanp$elm_combine$Combine$bimap(_elm_lang$core$Basics$identity);
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<?>'] = F2(
	function (p, m) {
		return A2(
			_Bogdanp$elm_combine$Combine$mapError,
			_elm_lang$core$Basics$always(
				{
					ctor: '::',
					_0: m,
					_1: {ctor: '[]'}
				}),
			p);
	});
var _Bogdanp$elm_combine$Combine$withState = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(state),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$withLocation = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(
						_Bogdanp$elm_combine$Combine$currentLocation(stream)),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$withLine = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(
						_Bogdanp$elm_combine$Combine$currentLine(stream)),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$withColumn = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					f(
						_Bogdanp$elm_combine$Combine$currentColumn(stream)),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$andThen = F2(
	function (f, p) {
		return _Bogdanp$elm_combine$Combine$Parser(
			F2(
				function (state, stream) {
					var _p10 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
					if (_p10._2.ctor === 'Ok') {
						return A3(
							_Bogdanp$elm_combine$Combine$app,
							f(_p10._2._0),
							_p10._0,
							_p10._1);
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p10._0,
							_1: _p10._1,
							_2: _elm_lang$core$Result$Err(_p10._2._0)
						};
					}
				}));
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['>>='] = _elm_lang$core$Basics$flip(_Bogdanp$elm_combine$Combine$andThen);
var _Bogdanp$elm_combine$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['>>='],
			lp,
			A2(_elm_lang$core$Basics$flip, _Bogdanp$elm_combine$Combine$map, rp));
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<*>'] = _elm_lang$core$Basics$flip(_Bogdanp$elm_combine$Combine$andMap);
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<*'] = F2(
	function (lp, rp) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			rp,
			A2(_Bogdanp$elm_combine$Combine$map, _elm_lang$core$Basics$always, lp));
	});
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['*>'] = F2(
	function (lp, rp) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			rp,
			A2(
				_Bogdanp$elm_combine$Combine$map,
				_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always),
				lp));
	});
var _Bogdanp$elm_combine$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*'],
			A2(_Bogdanp$elm_combine$Combine_ops['*>'], lp, p),
			rp);
	});
var _Bogdanp$elm_combine$Combine$sequence = function (ps) {
	var accumulate = F4(
		function (acc, ps, state, stream) {
			accumulate:
			while (true) {
				var _p11 = ps;
				if (_p11.ctor === '[]') {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$List$reverse(acc))
					};
				} else {
					var _p12 = A3(_Bogdanp$elm_combine$Combine$app, _p11._0, state, stream);
					if (_p12._2.ctor === 'Ok') {
						var _v11 = {ctor: '::', _0: _p12._2._0, _1: acc},
							_v12 = _p11._1,
							_v13 = _p12._0,
							_v14 = _p12._1;
						acc = _v11;
						ps = _v12;
						state = _v13;
						stream = _v14;
						continue accumulate;
					} else {
						return {
							ctor: '_Tuple3',
							_0: _p12._0,
							_1: _p12._1,
							_2: _elm_lang$core$Result$Err(_p12._2._0)
						};
					}
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A4(
					accumulate,
					{ctor: '[]'},
					ps,
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$fail = function (m) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Err(
						{
							ctor: '::',
							_0: m,
							_1: {ctor: '[]'}
						})
				};
			}));
};
var _Bogdanp$elm_combine$Combine$emptyErr = _Bogdanp$elm_combine$Combine$Parser(
	F2(
		function (state, stream) {
			return {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{ctor: '[]'})
			};
		}));
var _Bogdanp$elm_combine$Combine$succeed = function (res) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return {
					ctor: '_Tuple3',
					_0: state,
					_1: stream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _Bogdanp$elm_combine$Combine$putState = function (state) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (_p13, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					_Bogdanp$elm_combine$Combine$succeed(
						{ctor: '_Tuple0'}),
					state,
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$modifyState = function (f) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				return A3(
					_Bogdanp$elm_combine$Combine$app,
					_Bogdanp$elm_combine$Combine$succeed(
						{ctor: '_Tuple0'}),
					f(state),
					stream);
			}));
};
var _Bogdanp$elm_combine$Combine$count = F2(
	function (n, p) {
		var accumulate = F2(
			function (x, acc) {
				return (_elm_lang$core$Native_Utils.cmp(x, 0) < 1) ? _Bogdanp$elm_combine$Combine$succeed(
					_elm_lang$core$List$reverse(acc)) : A2(
					_Bogdanp$elm_combine$Combine$andThen,
					function (res) {
						return A2(
							accumulate,
							x - 1,
							{ctor: '::', _0: res, _1: acc});
					},
					p);
			});
		return A2(
			accumulate,
			n,
			{ctor: '[]'});
	});
var _Bogdanp$elm_combine$Combine$string = function (s) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				if (A2(_elm_lang$core$String$startsWith, s, stream.input)) {
					var len = _elm_lang$core$String$length(s);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(s)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected ',
									_elm_lang$core$Basics$toString(s)),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine$parens = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('('),
	_Bogdanp$elm_combine$Combine$string(')'));
var _Bogdanp$elm_combine$Combine$braces = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('{'),
	_Bogdanp$elm_combine$Combine$string('}'));
var _Bogdanp$elm_combine$Combine$brackets = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('['),
	_Bogdanp$elm_combine$Combine$string(']'));
var _Bogdanp$elm_combine$Combine$regex = function (pat) {
	var pattern = A2(_elm_lang$core$String$startsWith, '^', pat) ? pat : A2(_elm_lang$core$Basics_ops['++'], '^', pat);
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p14 = A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex(pattern),
					stream.input);
				if ((_p14.ctor === '::') && (_p14._1.ctor === '[]')) {
					var _p15 = _p14._0;
					var len = _elm_lang$core$String$length(_p15.match);
					var rem = A2(_elm_lang$core$String$dropLeft, len, stream.input);
					var pos = stream.position + len;
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: rem, position: pos}),
						_2: _elm_lang$core$Result$Ok(_p15.match)
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'expected input matching Regexp /',
									A2(_elm_lang$core$Basics_ops['++'], pattern, '/')),
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine$whitespace = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine$regex('[ \t\r\n]*'),
	'whitespace');
var _Bogdanp$elm_combine$Combine$while = function (pred) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p16 = _elm_lang$core$String$uncons(stream.input);
				if (_p16.ctor === 'Just') {
					var _p17 = _p16._0._0;
					if (pred(_p17)) {
						var pos = stream.position + 1;
						var c = A2(_elm_lang$core$String$cons, _p17, '');
						var _v17 = A2(_elm_lang$core$Basics_ops['++'], acc, c),
							_v18 = state,
							_v19 = _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p16._0._1, position: pos});
						acc = _v17;
						state = _v18;
						stream = _v19;
						continue accumulate;
					} else {
						return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
					}
				} else {
					return {ctor: '_Tuple3', _0: state, _1: stream, _2: acc};
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p18 = A3(accumulate, '', state, stream);
				var rstate = _p18._0;
				var rstream = _p18._1;
				var res = _p18._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _Bogdanp$elm_combine$Combine$end = _Bogdanp$elm_combine$Combine$Parser(
	F2(
		function (state, stream) {
			return _elm_lang$core$Native_Utils.eq(stream.input, '') ? {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Ok(
					{ctor: '_Tuple0'})
			} : {
				ctor: '_Tuple3',
				_0: state,
				_1: stream,
				_2: _elm_lang$core$Result$Err(
					{
						ctor: '::',
						_0: 'expected end of input',
						_1: {ctor: '[]'}
					})
			};
		}));
var _Bogdanp$elm_combine$Combine$lookAhead = function (p) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p19 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
				if ((_p19.ctor === '_Tuple3') && (_p19._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p19._0,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_p19._2._0)
					};
				} else {
					return _p19;
				}
			}));
};
var _Bogdanp$elm_combine$Combine$or = F2(
	function (lp, rp) {
		return _Bogdanp$elm_combine$Combine$Parser(
			F2(
				function (state, stream) {
					var _p20 = A3(_Bogdanp$elm_combine$Combine$app, lp, state, stream);
					if (_p20._2.ctor === 'Ok') {
						return _p20;
					} else {
						var _p21 = A3(_Bogdanp$elm_combine$Combine$app, rp, state, stream);
						if (_p21._2.ctor === 'Ok') {
							return _p21;
						} else {
							return {
								ctor: '_Tuple3',
								_0: state,
								_1: stream,
								_2: _elm_lang$core$Result$Err(
									A2(_elm_lang$core$Basics_ops['++'], _p20._2._0, _p21._2._0))
							};
						}
					}
				}));
	});
var _Bogdanp$elm_combine$Combine$choice = function (xs) {
	return A3(_elm_lang$core$List$foldr, _Bogdanp$elm_combine$Combine$or, _Bogdanp$elm_combine$Combine$emptyErr, xs);
};
var _Bogdanp$elm_combine$Combine_ops = _Bogdanp$elm_combine$Combine_ops || {};
_Bogdanp$elm_combine$Combine_ops['<|>'] = _Bogdanp$elm_combine$Combine$or;
var _Bogdanp$elm_combine$Combine$optional = F2(
	function (res, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			p,
			_Bogdanp$elm_combine$Combine$succeed(res));
	});
var _Bogdanp$elm_combine$Combine$chainl = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					function (f) {
						return A2(
							_Bogdanp$elm_combine$Combine$andThen,
							function (y) {
								return accumulate(
									A2(f, x, y));
							},
							p);
					},
					op),
				_Bogdanp$elm_combine$Combine$succeed(x));
		};
		return A2(_Bogdanp$elm_combine$Combine$andThen, accumulate, p);
	});
var _Bogdanp$elm_combine$Combine$chainr = F2(
	function (op, p) {
		var accumulate = function (x) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					function (f) {
						return A2(
							_Bogdanp$elm_combine$Combine$andThen,
							function (y) {
								return _Bogdanp$elm_combine$Combine$succeed(
									A2(f, x, y));
							},
							A2(_Bogdanp$elm_combine$Combine$andThen, accumulate, p));
					},
					op),
				_Bogdanp$elm_combine$Combine$succeed(x));
		};
		return A2(_Bogdanp$elm_combine$Combine$andThen, accumulate, p);
	});
var _Bogdanp$elm_combine$Combine$maybe = function (p) {
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p22 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
				if ((_p22.ctor === '_Tuple3') && (_p22._2.ctor === 'Ok')) {
					return {
						ctor: '_Tuple3',
						_0: _p22._0,
						_1: _p22._1,
						_2: _elm_lang$core$Result$Ok(
							_elm_lang$core$Maybe$Just(_p22._2._0))
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing)
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _p23 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
				if ((_p23.ctor === '_Tuple3') && (_p23._2.ctor === 'Ok')) {
					var _p25 = _p23._1;
					var _p24 = _p23._0;
					if (_elm_lang$core$Native_Utils.eq(stream, _p25)) {
						return {
							ctor: '_Tuple3',
							_0: _p24,
							_1: _p25,
							_2: _elm_lang$core$List$reverse(acc)
						};
					} else {
						var _v25 = {ctor: '::', _0: _p23._2._0, _1: acc},
							_v26 = _p24,
							_v27 = _p25;
						acc = _v25;
						state = _v26;
						stream = _v27;
						continue accumulate;
					}
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$List$reverse(acc)
					};
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		F2(
			function (state, stream) {
				var _p26 = A3(
					accumulate,
					{ctor: '[]'},
					state,
					stream);
				var rstate = _p26._0;
				var rstream = _p26._1;
				var res = _p26._2;
				return {
					ctor: '_Tuple3',
					_0: rstate,
					_1: rstream,
					_2: _elm_lang$core$Result$Ok(res)
				};
			}));
};
var _Bogdanp$elm_combine$Combine$many1 = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			p),
		_Bogdanp$elm_combine$Combine$many(p));
};
var _Bogdanp$elm_combine$Combine$skipMany1 = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_Bogdanp$elm_combine$Combine$many1(
			_Bogdanp$elm_combine$Combine$skip(p)));
};
var _Bogdanp$elm_combine$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*>'],
			A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				p),
			_Bogdanp$elm_combine$Combine$many(
				A2(_Bogdanp$elm_combine$Combine_ops['*>'], sep, p)));
	});
var _Bogdanp$elm_combine$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			A2(_Bogdanp$elm_combine$Combine$sepBy1, sep, p),
			_Bogdanp$elm_combine$Combine$succeed(
				{ctor: '[]'}));
	});
var _Bogdanp$elm_combine$Combine$sepEndBy1 = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*'],
			A2(_Bogdanp$elm_combine$Combine$sepBy1, sep, p),
			_Bogdanp$elm_combine$Combine$maybe(sep));
	});
var _Bogdanp$elm_combine$Combine$sepEndBy = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			A2(_Bogdanp$elm_combine$Combine$sepEndBy1, sep, p),
			_Bogdanp$elm_combine$Combine$succeed(
				{ctor: '[]'}));
	});
var _Bogdanp$elm_combine$Combine$skipMany = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$'],
		{ctor: '_Tuple0'},
		_Bogdanp$elm_combine$Combine$many(
			_Bogdanp$elm_combine$Combine$skip(p)));
};
var _Bogdanp$elm_combine$Combine$manyTill = F2(
	function (p, end) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _p27 = A3(_Bogdanp$elm_combine$Combine$app, end, state, stream);
					if (_p27._2.ctor === 'Ok') {
						return {
							ctor: '_Tuple3',
							_0: _p27._0,
							_1: _p27._1,
							_2: _elm_lang$core$Result$Ok(
								_elm_lang$core$List$reverse(acc))
						};
					} else {
						var _p28 = A3(_Bogdanp$elm_combine$Combine$app, p, state, stream);
						if ((_p28.ctor === '_Tuple3') && (_p28._2.ctor === 'Ok')) {
							var _v30 = {ctor: '::', _0: _p28._2._0, _1: acc},
								_v31 = _p28._0,
								_v32 = _p28._1;
							acc = _v30;
							state = _v31;
							stream = _v32;
							continue accumulate;
						} else {
							return {
								ctor: '_Tuple3',
								_0: _p27._0,
								_1: _p27._1,
								_2: _elm_lang$core$Result$Err(_p27._2._0)
							};
						}
					}
				}
			});
		return _Bogdanp$elm_combine$Combine$Parser(
			accumulate(
				{ctor: '[]'}));
	});

var _Bogdanp$elm_combine$Combine_Char$crlf = A2(
	_Bogdanp$elm_combine$Combine_ops['<$'],
	_elm_lang$core$Native_Utils.chr('\n'),
	A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine$regex('\r\n'),
		'expected crlf'));
var _Bogdanp$elm_combine$Combine_Char$satisfy = function (pred) {
	return _Bogdanp$elm_combine$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _p0 = _elm_lang$core$String$uncons(stream.input);
				if (_p0.ctor === 'Just') {
					var _p1 = _p0._0._0;
					return pred(_p1) ? {
						ctor: '_Tuple3',
						_0: state,
						_1: _elm_lang$core$Native_Utils.update(
							stream,
							{input: _p0._0._1, position: stream.position + 1}),
						_2: _elm_lang$core$Result$Ok(_p1)
					} : {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: message,
								_1: {ctor: '[]'}
							})
					};
				} else {
					return {
						ctor: '_Tuple3',
						_0: state,
						_1: stream,
						_2: _elm_lang$core$Result$Err(
							{
								ctor: '::',
								_0: message,
								_1: {ctor: '[]'}
							})
					};
				}
			}));
};
var _Bogdanp$elm_combine$Combine_Char$char = function (c) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(c)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected ',
			_elm_lang$core$Basics$toString(c)));
};
var _Bogdanp$elm_combine$Combine_Char$anyChar = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		_elm_lang$core$Basics$always(true)),
	'expected any character');
var _Bogdanp$elm_combine$Combine_Char$oneOf = function (cs) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			A2(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected one of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _Bogdanp$elm_combine$Combine_Char$noneOf = function (cs) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			function (_p2) {
				return !A3(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs, _p2);
			}),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected none of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _Bogdanp$elm_combine$Combine_Char$space = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr(' '))),
	'expected space');
var _Bogdanp$elm_combine$Combine_Char$tab = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\t'))),
	'expected tab');
var _Bogdanp$elm_combine$Combine_Char$newline = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\n'))),
	'expected newline');
var _Bogdanp$elm_combine$Combine_Char$eol = A2(_Bogdanp$elm_combine$Combine_ops['<|>'], _Bogdanp$elm_combine$Combine_Char$newline, _Bogdanp$elm_combine$Combine_Char$crlf);
var _Bogdanp$elm_combine$Combine_Char$lower = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isLower),
	'expected a lowercase character');
var _Bogdanp$elm_combine$Combine_Char$upper = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isUpper),
	'expected an uppercase character');
var _Bogdanp$elm_combine$Combine_Char$digit = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isDigit),
	'expected a digit');
var _Bogdanp$elm_combine$Combine_Char$octDigit = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isOctDigit),
	'expected an octal digit');
var _Bogdanp$elm_combine$Combine_Char$hexDigit = A2(
	_Bogdanp$elm_combine$Combine_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isHexDigit),
	'expected a hexadecimal digit');

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		A2(
			_elm_lang$core$List$range,
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return {ctor: '::', _0: key, _1: keyList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return {ctor: '::', _0: value, _1: valueList};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: key, _1: value},
					_1: list
				};
			}),
		{ctor: '[]'},
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				stepState:
				while (true) {
					var _p3 = _p2;
					var _p9 = _p3._1;
					var _p8 = _p3._0;
					var _p4 = _p8;
					if (_p4.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _p8,
							_1: A3(rightStep, rKey, rValue, _p9)
						};
					} else {
						var _p7 = _p4._1;
						var _p6 = _p4._0._1;
						var _p5 = _p4._0._0;
						if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {
							var _v10 = rKey,
								_v11 = rValue,
								_v12 = {
								ctor: '_Tuple2',
								_0: _p7,
								_1: A3(leftStep, _p5, _p6, _p9)
							};
							rKey = _v10;
							rValue = _v11;
							_p2 = _v12;
							continue stepState;
						} else {
							if (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {
								return {
									ctor: '_Tuple2',
									_0: _p8,
									_1: A3(rightStep, rKey, rValue, _p9)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: _p7,
									_1: A4(bothStep, _p5, _p6, rValue, _p9)
								};
							}
						}
					}
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				{
					ctor: '::',
					_0: 'Internal red-black tree invariant violated, expected ',
					_1: {
						ctor: '::',
						_0: msg,
						_1: {
							ctor: '::',
							_0: ' and got ',
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Basics$toString(c),
								_1: {
									ctor: '::',
									_0: '/',
									_1: {
										ctor: '::',
										_0: lgot,
										_1: {
											ctor: '::',
											_0: '/',
											_1: {
												ctor: '::',
												_0: rgot,
												_1: {
													ctor: '::',
													_0: '\nPlease report this bug to <https://github.com/elm-lang/core/issues>',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v14_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v14_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v14_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v17 = _p14._3;
				n = _v16;
				dict = _v17;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v20 = targetKey,
							_v21 = _p15._3;
						targetKey = _v20;
						dict = _v21;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v22 = targetKey,
							_v23 = _p15._4;
						targetKey = _v22;
						dict = _v23;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v26 = _p18._1,
					_v27 = _p18._2,
					_v28 = _p18._4;
				k = _v26;
				v = _v27;
				r = _v28;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v36_6:
	do {
		_v36_5:
		do {
			_v36_4:
			do {
				_v36_3:
				do {
					_v36_2:
					do {
						_v36_1:
						do {
							_v36_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v36_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v36_3;
																		} else {
																			break _v36_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v36_4;
																	} else {
																		break _v36_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v36_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v36_1;
																} else {
																	break _v36_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v36_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v36_5;
																	} else {
																		break _v36_6;
																	}
																}
															} else {
																break _v36_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v36_5;
															} else {
																break _v36_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v36_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v36_3;
																} else {
																	break _v36_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v36_4;
															} else {
																break _v36_6;
															}
														default:
															break _v36_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v36_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v36_1;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v36_5;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v36_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v36_3;
														} else {
															break _v36_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v36_4;
													} else {
														break _v36_6;
													}
												default:
													break _v36_6;
											}
										} else {
											break _v36_6;
										}
									}
								} else {
									break _v36_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (color, left, right) {
		var _p29 = {ctor: '_Tuple2', _0: left, _1: right};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = color;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						color,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						color,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeIndex(index, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'index',
		index: index,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function mapMany(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function andThen(callback, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function map1(f, d1)
{
	return mapMany(f, [d1]);
}

function map2(f, d1, d2)
{
	return mapMany(f, [d1, d2]);
}

function map3(f, d1, d2, d3)
{
	return mapMany(f, [d1, d2, d3]);
}

function map4(f, d1, d2, d3, d4)
{
	return mapMany(f, [d1, d2, d3, d4]);
}

function map5(f, d1, d2, d3, d4, d5)
{
	return mapMany(f, [d1, d2, d3, d4, d5]);
}

function map6(f, d1, d2, d3, d4, d5, d6)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6]);
}

function map7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function map8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok') ? result : badField(field, result);

		case 'index':
			var index = decoder.index;
			if (!(value instanceof Array))
			{
				return badPrimitive('an array', value);
			}
			if (index >= value.length)
			{
				return badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);
			}

			var result = runHelp(decoder.decoder, value[index]);
			return (result.tag === 'ok') ? result : badIndex(index, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'index':
			return a.index === b.index && equality(a.decoder, b.decoder);

		case 'map-many':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),
	decodeIndex: F2(decodeIndex),

	map1: F2(map1),
	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	map6: F7(map6),
	map7: F8(map7),
	map8: F9(map8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	andThen: F2(andThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$lazy = function (thunk) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		thunk,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;
var _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;
var _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;
var _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;
var _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;
var _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;
var _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;
var _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);
	});
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$nullable = function (decoder) {
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

var _elm_lang$virtual_dom$VirtualDom_Debug$wrap;
var _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';

var localDoc = typeof document !== 'undefined' ? document : {};


////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function keyedNode(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid._1.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'keyed-node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: undefined
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else if (key === 'className')
		{
			var classes = facts[key];
			facts[key] = typeof classes === 'undefined'
				? entry.value
				: classes + ' ' + entry.value;
		}
 		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (a.options !== b.options)
	{
		if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}


function mapProperty(func, property)
{
	if (property.key !== EVENT_KEY)
	{
		return property;
	}
	return on(
		property.realKey,
		property.value.options,
		A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder)
	);
}


////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;

			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}

			var subEventRoot = { tagger: tagger, parent: eventNode };
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return localDoc.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'keyed-node':
			var domNode = vNode.namespace
				? localDoc.createElementNS(vNode.namespace, vNode.tag)
				: localDoc.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i]._1, eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: undefined,
		eventNode: undefined
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'keyed-node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffKeyedChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  KEYED DIFF  ////////////


function diffKeyedChildren(aParent, bParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var aChildren = aParent.children;
	var bChildren = bParent.children;
	var aLen = aChildren.length;
	var bLen = bChildren.length;
	var aIndex = 0;
	var bIndex = 0;

	var index = rootIndex;

	while (aIndex < aLen && bIndex < bLen)
	{
		var a = aChildren[aIndex];
		var b = bChildren[bIndex];

		var aKey = a._0;
		var bKey = b._0;
		var aNode = a._1;
		var bNode = b._1;

		// check if keys match

		if (aKey === bKey)
		{
			index++;
			diffHelp(aNode, bNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex++;
			bIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var aLookAhead = aIndex + 1 < aLen;
		var bLookAhead = bIndex + 1 < bLen;

		if (aLookAhead)
		{
			var aNext = aChildren[aIndex + 1];
			var aNextKey = aNext._0;
			var aNextNode = aNext._1;
			var oldMatch = bKey === aNextKey;
		}

		if (bLookAhead)
		{
			var bNext = bChildren[bIndex + 1];
			var bNextKey = bNext._0;
			var bNextNode = bNext._1;
			var newMatch = aKey === bNextKey;
		}


		// swap a and b
		if (aLookAhead && bLookAhead && newMatch && oldMatch)
		{
			index++;
			diffHelp(aNode, bNextNode, localPatches, index);
			insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			removeNode(changes, localPatches, aKey, aNextNode, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		// insert b
		if (bLookAhead && newMatch)
		{
			index++;
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			diffHelp(aNode, bNextNode, localPatches, index);
			index += aNode.descendantsCount || 0;

			aIndex += 1;
			bIndex += 2;
			continue;
		}

		// remove a
		if (aLookAhead && oldMatch)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 1;
			continue;
		}

		// remove a, insert b
		if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		{
			index++;
			removeNode(changes, localPatches, aKey, aNode, index);
			insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			index += aNode.descendantsCount || 0;

			index++;
			diffHelp(aNextNode, bNextNode, localPatches, index);
			index += aNextNode.descendantsCount || 0;

			aIndex += 2;
			bIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (aIndex < aLen)
	{
		index++;
		var a = aChildren[aIndex];
		var aNode = a._1;
		removeNode(changes, localPatches, a._0, aNode, index);
		index += aNode.descendantsCount || 0;
		aIndex++;
	}

	var endInserts;
	while (bIndex < bLen)
	{
		endInserts = endInserts || [];
		var b = bChildren[bIndex];
		insertNode(changes, localPatches, b._0, b._1, undefined, endInserts);
		bIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	{
		patches.push(makePatch('p-reorder', rootIndex, {
			patches: localPatches,
			inserts: inserts,
			endInserts: endInserts
		}));
	}
}



////////////  CHANGES FROM KEYED DIFF  ////////////


var POSTFIX = '_elmW6BL';


function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		entry = {
			tag: 'insert',
			vnode: vnode,
			index: bIndex,
			data: undefined
		};

		inserts.push({ index: bIndex, entry: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.tag === 'remove')
	{
		inserts.push({ index: bIndex, entry: entry });

		entry.tag = 'move';
		var subPatches = [];
		diffHelp(entry.vnode, vnode, subPatches, entry.index);
		entry.index = bIndex;
		entry.data.data = {
			patches: subPatches,
			entry: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
}


function removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (typeof entry === 'undefined')
	{
		var patch = makePatch('p-remove', index, undefined);
		localPatches.push(patch);

		changes[key] = {
			tag: 'remove',
			vnode: vnode,
			index: index,
			data: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.tag === 'insert')
	{
		entry.tag = 'move';
		var subPatches = [];
		diffHelp(vnode, entry.vnode, subPatches, index);

		var patch = makePatch('p-remove', index, {
			patches: subPatches,
			entry: entry
		});
		localPatches.push(patch);

		return;
	}

	// this key has already been removed or moved, a duplicate!
	removeNode(changes, localPatches, key + POSTFIX, vnode, index);
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else if (patchType === 'p-reorder')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var subPatches = patch.data.patches;
			if (subPatches.length > 0)
			{
				addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 'p-remove')
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;

			var data = patch.data;
			if (typeof data !== 'undefined')
			{
				data.entry.data = domNode;
				var subPatches = data.patches;
				if (subPatches.length > 0)
				{
					addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;

			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}

			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'keyed-node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j]._1;
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			if (typeof domNode.elm_event_node_ref !== 'undefined')
			{
				domNode.elm_event_node_ref.tagger = patch.data;
			}
			else
			{
				domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			}
			return domNode;

		case 'p-remove-last':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-append':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-remove':
			var data = patch.data;
			if (typeof data === 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.entry;
			if (typeof entry.index !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.data = applyPatchesHelp(domNode, data.patches);
			return domNode;

		case 'p-reorder':
			return applyPatchReorder(domNode, patch);

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function applyPatchReorder(domNode, patch)
{
	var data = patch.data;

	// remove end inserts
	var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	// removals
	domNode = applyPatchesHelp(domNode, data.patches);

	// inserts
	var inserts = data.inserts;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.entry;
		var node = entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode);
		domNode.insertBefore(node, domNode.childNodes[insert.index]);
	}

	// add end inserts
	if (typeof frag !== 'undefined')
	{
		domNode.appendChild(frag);
	}

	return domNode;
}


function applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (typeof endInserts === 'undefined')
	{
		return;
	}

	var frag = localDoc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.entry;
		frag.appendChild(entry.tag === 'move'
			? entry.data
			: render(entry.vnode, patch.eventNode)
		);
	}
	return frag;
}


// PROGRAMS

var program = makeProgram(checkNoFlags);
var programWithFlags = makeProgram(checkYesFlags);

function makeProgram(flagChecker)
{
	return F2(function(debugWrap, impl)
	{
		return function(flagDecoder)
		{
			return function(object, moduleName, debugMetadata)
			{
				var checker = flagChecker(flagDecoder, moduleName);
				if (typeof debugMetadata === 'undefined')
				{
					normalSetup(impl, object, moduleName, checker);
				}
				else
				{
					debugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);
				}
			};
		};
	});
}

function staticProgram(vNode)
{
	var nothing = _elm_lang$core$Native_Utils.Tuple2(
		_elm_lang$core$Native_Utils.Tuple0,
		_elm_lang$core$Platform_Cmd$none
	);
	return A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {
		init: nothing,
		view: function() { return vNode; },
		update: F2(function() { return nothing; }),
		subscriptions: function() { return _elm_lang$core$Platform_Sub$none; }
	})();
}


// FLAG CHECKERS

function checkNoFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flags === 'undefined')
		{
			return init;
		}

		var errorMessage =
			'The `' + moduleName + '` module does not need flags.\n'
			+ 'Initialize it with no arguments and you should be all set!';

		crash(errorMessage, domNode);
	};
}

function checkYesFlags(flagDecoder, moduleName)
{
	return function(init, flags, domNode)
	{
		if (typeof flagDecoder === 'undefined')
		{
			var errorMessage =
				'Are you trying to sneak a Never value into Elm? Trickster!\n'
				+ 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\n'
				+ 'Use `program` instead if you do not want flags.'

			crash(errorMessage, domNode);
		}

		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Ok')
		{
			return init(result._0);
		}

		var errorMessage =
			'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\n'
			+ 'I tried to convert it to an Elm value, but ran into this problem:\n\n'
			+ result._0;

		crash(errorMessage, domNode);
	};
}

function crash(errorMessage, domNode)
{
	if (domNode)
	{
		domNode.innerHTML =
			'<div style="padding-left:1em;">'
			+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
			+ '<pre style="padding-left:1em;">' + errorMessage + '</pre>'
			+ '</div>';
	}

	throw new Error(errorMessage);
}


//  NORMAL SETUP

function normalSetup(impl, object, moduleName, flagChecker)
{
	object['embed'] = function embed(node, flags)
	{
		while (node.lastChild)
		{
			node.removeChild(node.lastChild);
		}

		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update,
			impl.subscriptions,
			normalRenderer(node, impl.view)
		);
	};

	object['fullscreen'] = function fullscreen(flags)
	{
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update,
			impl.subscriptions,
			normalRenderer(document.body, impl.view)
		);
	};
}

function normalRenderer(parentNode, view)
{
	return function(tagger, initialModel)
	{
		var eventNode = { tagger: tagger, parent: undefined };
		var initialVirtualNode = view(initialModel);
		var domNode = render(initialVirtualNode, eventNode);
		parentNode.appendChild(domNode);
		return makeStepper(domNode, view, initialVirtualNode, eventNode);
	};
}


// STEPPER

var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { setTimeout(callback, 1000 / 60); };

function makeStepper(domNode, view, initialVirtualNode, eventNode)
{
	var state = 'NO_REQUEST';
	var currNode = initialVirtualNode;
	var nextModel;

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var nextNode = view(nextModel);
				var patches = diff(currNode, nextNode);
				domNode = applyPatches(domNode, currNode, patches, eventNode);
				currNode = nextNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return function stepper(model)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextModel = model;
	};
}


// DEBUG SETUP

function debugSetup(impl, object, moduleName, flagChecker)
{
	object['fullscreen'] = function fullscreen(flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, document.body),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};

	object['embed'] = function fullscreen(node, flags)
	{
		var popoutRef = { doc: undefined };
		return _elm_lang$core$Native_Platform.initialize(
			flagChecker(impl.init, flags, node),
			impl.update(scrollTask(popoutRef)),
			impl.subscriptions,
			debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut)
		);
	};
}

function scrollTask(popoutRef)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var doc = popoutRef.doc;
		if (doc)
		{
			var msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];
			if (msgs)
			{
				msgs.scrollTop = msgs.scrollHeight;
			}
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


function debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut)
{
	return function(tagger, initialModel)
	{
		var appEventNode = { tagger: tagger, parent: undefined };
		var eventNode = { tagger: tagger, parent: undefined };

		// make normal stepper
		var appVirtualNode = view(initialModel);
		var appNode = render(appVirtualNode, appEventNode);
		parentNode.appendChild(appNode);
		var appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);

		// make overlay stepper
		var overVirtualNode = viewIn(initialModel)._1;
		var overNode = render(overVirtualNode, eventNode);
		parentNode.appendChild(overNode);
		var wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);
		var overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);

		// make debugger stepper
		var debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);

		return function stepper(model)
		{
			appStepper(model);
			overStepper(model);
			debugStepper(model);
		}
	};
}

function makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef)
{
	var curr;
	var domNode;

	return function stepper(model)
	{
		if (!model.isDebuggerOpen)
		{
			return;
		}

		if (!popoutRef.doc)
		{
			curr = view(model);
			domNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);
			return;
		}

		// switch to document of popout
		localDoc = popoutRef.doc;

		var next = view(model);
		var patches = diff(curr, next);
		domNode = applyPatches(domNode, curr, patches, eventNode);
		curr = next;

		// switch back to normal document
		localDoc = document;
	};
}

function openDebugWindow(moduleName, popoutRef, virtualNode, eventNode)
{
	var w = 900;
	var h = 360;
	var x = screen.width - w;
	var y = screen.height - h;
	var debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);

	// switch to window document
	localDoc = debugWindow.document;

	popoutRef.doc = localDoc;
	localDoc.title = 'Debugger - ' + moduleName;
	localDoc.body.style.margin = '0';
	localDoc.body.style.padding = '0';
	var domNode = render(virtualNode, eventNode);
	localDoc.body.appendChild(domNode);

	localDoc.addEventListener('keydown', function(event) {
		if (event.metaKey && event.which === 82)
		{
			window.location.reload();
		}
		if (event.which === 38)
		{
			eventNode.tagger({ ctor: 'Up' });
			event.preventDefault();
		}
		if (event.which === 40)
		{
			eventNode.tagger({ ctor: 'Down' });
			event.preventDefault();
		}
	});

	function close()
	{
		popoutRef.doc = undefined;
		debugWindow.close();
	}
	window.addEventListener('unload', close);
	debugWindow.addEventListener('unload', function() {
		popoutRef.doc = undefined;
		window.removeEventListener('unload', close);
		eventNode.tagger({ ctor: 'Close' });
	});

	// switch back to the normal document
	localDoc = document;

	return domNode;
}


// BLOCK EVENTS

function wrapViewIn(appEventNode, overlayNode, viewIn)
{
	var ignorer = makeIgnorer(overlayNode);
	var blocking = 'Normal';
	var overflow;

	var normalTagger = appEventNode.tagger;
	var blockTagger = function() {};

	return function(model)
	{
		var tuple = viewIn(model);
		var newBlocking = tuple._0.ctor;
		appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		if (blocking !== newBlocking)
		{
			traverse('removeEventListener', ignorer, blocking);
			traverse('addEventListener', ignorer, newBlocking);

			if (blocking === 'Normal')
			{
				overflow = document.body.style.overflow;
				document.body.style.overflow = 'hidden';
			}

			if (newBlocking === 'Normal')
			{
				document.body.style.overflow = overflow;
			}

			blocking = newBlocking;
		}
		return tuple._1;
	}
}

function traverse(verbEventListener, ignorer, blocking)
{
	switch(blocking)
	{
		case 'Normal':
			return;

		case 'Pause':
			return traverseHelp(verbEventListener, ignorer, mostEvents);

		case 'Message':
			return traverseHelp(verbEventListener, ignorer, allEvents);
	}
}

function traverseHelp(verbEventListener, handler, eventNames)
{
	for (var i = 0; i < eventNames.length; i++)
	{
		document.body[verbEventListener](eventNames[i], handler, true);
	}
}

function makeIgnorer(overlayNode)
{
	return function(event)
	{
		if (event.type === 'keydown' && event.metaKey && event.which === 82)
		{
			return;
		}

		var isScroll = event.type === 'scroll' || event.type === 'wheel';

		var node = event.target;
		while (node !== null)
		{
			if (node.className === 'elm-overlay-message-details' && isScroll)
			{
				return;
			}

			if (node === overlayNode && !isScroll)
			{
				return;
			}
			node = node.parentNode;
		}

		event.stopPropagation();
		event.preventDefault();
	}
}

var mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var allEvents = mostEvents.concat('wheel', 'scroll');


return {
	node: node,
	text: text,
	custom: custom,
	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),
	mapProperty: F2(mapProperty),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),
	keyedNode: F3(keyedNode),

	program: program,
	programWithFlags: programWithFlags,
	staticProgram: staticProgram
};

}();

var _elm_lang$virtual_dom$VirtualDom$programWithFlags = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);
};
var _elm_lang$virtual_dom$VirtualDom$program = function (impl) {
	return A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);
};
var _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;
var _elm_lang$html$Html$beginnerProgram = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$html$Html$program(
		{
			init: A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_p1.model,
				{ctor: '[]'}),
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p1.update, msg, model),
						{ctor: '[]'});
				}),
			view: _p1.view,
			subscriptions: function (_p2) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'checked',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'target',
		_1: {
			ctor: '::',
			_0: 'value',
			_1: {ctor: '[]'}
		}
	},
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_lang$html$Html_Attributes$map = _elm_lang$virtual_dom$VirtualDom$mapProperty;
var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'charset', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'maxlength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'form', value);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'media', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'colspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$attribute,
		'rowspan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type_ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Tuple$first,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Tuple$second, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _elm_lang$http$Native_Http = function() {


// ENCODING AND DECODING

function encodeUri(string)
{
	return encodeURIComponent(string);
}

function decodeUri(string)
{
	try
	{
		return _elm_lang$core$Maybe$Just(decodeURIComponent(string));
	}
	catch(e)
	{
		return _elm_lang$core$Maybe$Nothing;
	}
}


// SEND REQUEST

function toTask(request, maybeProgress)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var xhr = new XMLHttpRequest();

		configureProgress(xhr, maybeProgress);

		xhr.addEventListener('error', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NetworkError' }));
		});
		xhr.addEventListener('timeout', function() {
			callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'Timeout' }));
		});
		xhr.addEventListener('load', function() {
			callback(handleResponse(xhr, request.expect.responseToResult));
		});

		try
		{
			xhr.open(request.method, request.url, true);
		}
		catch (e)
		{
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'BadUrl', _0: request.url }));
		}

		configureRequest(xhr, request);
		send(xhr, request.body);

		return function() { xhr.abort(); };
	});
}

function configureProgress(xhr, maybeProgress)
{
	if (maybeProgress.ctor === 'Nothing')
	{
		return;
	}

	xhr.addEventListener('progress', function(event) {
		if (!event.lengthComputable)
		{
			return;
		}
		_elm_lang$core$Native_Scheduler.rawSpawn(maybeProgress._0({
			bytes: event.loaded,
			bytesExpected: event.total
		}));
	});
}

function configureRequest(xhr, request)
{
	function setHeader(pair)
	{
		xhr.setRequestHeader(pair._0, pair._1);
	}

	A2(_elm_lang$core$List$map, setHeader, request.headers);
	xhr.responseType = request.expect.responseType;
	xhr.withCredentials = request.withCredentials;

	if (request.timeout.ctor === 'Just')
	{
		xhr.timeout = request.timeout._0;
	}
}

function send(xhr, body)
{
	switch (body.ctor)
	{
		case 'EmptyBody':
			xhr.send();
			return;

		case 'StringBody':
			xhr.setRequestHeader('Content-Type', body._0);
			xhr.send(body._1);
			return;

		case 'FormDataBody':
			xhr.send(body._0);
			return;
	}
}


// RESPONSES

function handleResponse(xhr, responseToResult)
{
	var response = toResponse(xhr);

	if (xhr.status < 200 || 300 <= xhr.status)
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadStatus',
			_0: response
		});
	}

	var result = responseToResult(response);

	if (result.ctor === 'Ok')
	{
		return _elm_lang$core$Native_Scheduler.succeed(result._0);
	}
	else
	{
		response.body = xhr.responseText;
		return _elm_lang$core$Native_Scheduler.fail({
			ctor: 'BadPayload',
			_0: result._0,
			_1: response
		});
	}
}

function toResponse(xhr)
{
	return {
		status: { code: xhr.status, message: xhr.statusText },
		headers: parseHeaders(xhr.getAllResponseHeaders()),
		url: xhr.responseURL,
		body: xhr.response
	};
}

function parseHeaders(rawHeaders)
{
	var headers = _elm_lang$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(_elm_lang$core$Dict$update, key, function(oldValue) {
				if (oldValue.ctor === 'Just')
				{
					return _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);
				}
				return _elm_lang$core$Maybe$Just(value);
			}, headers);
		}
	}

	return headers;
}


// EXPECTORS

function expectStringResponse(responseToResult)
{
	return {
		responseType: 'text',
		responseToResult: responseToResult
	};
}

function mapExpect(func, expect)
{
	return {
		responseType: expect.responseType,
		responseToResult: function(response) {
			var convertedResponse = expect.responseToResult(response);
			return A2(_elm_lang$core$Result$map, func, convertedResponse);
		}
	};
}


// BODY

function multipart(parts)
{
	var formData = new FormData();

	while (parts.ctor !== '[]')
	{
		var part = parts._0;
		formData.append(part._0, part._1);
		parts = parts._1;
	}

	return { ctor: 'FormDataBody', _0: formData };
}

return {
	toTask: F2(toTask),
	expectStringResponse: expectStringResponse,
	mapExpect: F2(mapExpect),
	multipart: multipart,
	encodeUri: encodeUri,
	decodeUri: decodeUri
};

}();

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Platform$sendToApp(router),
				_p1._0));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (convert, task) {
		return A2(
			_elm_lang$core$Task$onError,
			function (_p2) {
				return _elm_lang$core$Task$fail(
					convert(_p2));
			},
			task);
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											},
											taskE);
									},
									taskD);
							},
							taskC);
					},
					taskB);
			},
			taskA);
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p3 = tasks;
	if (_p3.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			{ctor: '[]'});
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			_p3._0,
			_elm_lang$core$Task$sequence(_p3._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p4) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p7, _p6, _p5) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$Perform = function (a) {
	return {ctor: 'Perform', _0: a};
};
var _elm_lang$core$Task$perform = F2(
	function (toMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(_elm_lang$core$Task$map, toMessage, task)));
	});
var _elm_lang$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$Perform(
				A2(
					_elm_lang$core$Task$onError,
					function (_p8) {
						return _elm_lang$core$Task$succeed(
							resultToMessage(
								_elm_lang$core$Result$Err(_p8)));
					},
					A2(
						_elm_lang$core$Task$andThen,
						function (_p9) {
							return _elm_lang$core$Task$succeed(
								resultToMessage(
									_elm_lang$core$Result$Ok(_p9)));
						},
						task))));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$Perform(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			var spawnRest = function (id) {
				return A3(
					_elm_lang$core$Time$spawnHelp,
					router,
					_p0._1,
					A3(_elm_lang$core$Dict$insert, _p1, id, processes));
			};
			var spawnTimer = _elm_lang$core$Native_Scheduler.spawn(
				A2(
					_elm_lang$core$Time$setInterval,
					_p1,
					A2(_elm_lang$core$Platform$sendToSelf, router, _p1)));
			return A2(_elm_lang$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{
					ctor: '::',
					_0: _p6,
					_1: {ctor: '[]'}
				},
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				{ctor: '::', _0: _p6, _1: _p4._0},
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var tellTaggers = function (time) {
				return _elm_lang$core$Task$sequence(
					A2(
						_elm_lang$core$List$map,
						function (tagger) {
							return A2(
								_elm_lang$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						_p7._0));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p8) {
					return _elm_lang$core$Task$succeed(state);
				},
				A2(_elm_lang$core$Task$andThen, tellTaggers, _elm_lang$core$Time$now));
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						function (_p14) {
							return _p13._2;
						},
						_elm_lang$core$Native_Scheduler.kill(id))
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: {ctor: '::', _0: interval, _1: _p18._0},
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			function (newProcesses) {
				return _elm_lang$core$Task$succeed(
					A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
			},
			A2(
				_elm_lang$core$Task$andThen,
				function (_p20) {
					return A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$http$Http_Internal$map = F2(
	function (func, request) {
		return _elm_lang$core$Native_Utils.update(
			request,
			{
				expect: A2(_elm_lang$http$Native_Http.mapExpect, func, request.expect)
			});
	});
var _elm_lang$http$Http_Internal$RawRequest = F7(
	function (a, b, c, d, e, f, g) {
		return {method: a, headers: b, url: c, body: d, expect: e, timeout: f, withCredentials: g};
	});
var _elm_lang$http$Http_Internal$Request = function (a) {
	return {ctor: 'Request', _0: a};
};
var _elm_lang$http$Http_Internal$Expect = {ctor: 'Expect'};
var _elm_lang$http$Http_Internal$FormDataBody = {ctor: 'FormDataBody'};
var _elm_lang$http$Http_Internal$StringBody = F2(
	function (a, b) {
		return {ctor: 'StringBody', _0: a, _1: b};
	});
var _elm_lang$http$Http_Internal$EmptyBody = {ctor: 'EmptyBody'};
var _elm_lang$http$Http_Internal$Header = F2(
	function (a, b) {
		return {ctor: 'Header', _0: a, _1: b};
	});

var _elm_lang$http$Http$decodeUri = _elm_lang$http$Native_Http.decodeUri;
var _elm_lang$http$Http$encodeUri = _elm_lang$http$Native_Http.encodeUri;
var _elm_lang$http$Http$expectStringResponse = _elm_lang$http$Native_Http.expectStringResponse;
var _elm_lang$http$Http$expectJson = function (decoder) {
	return _elm_lang$http$Http$expectStringResponse(
		function (response) {
			return A2(_elm_lang$core$Json_Decode$decodeString, decoder, response.body);
		});
};
var _elm_lang$http$Http$expectString = _elm_lang$http$Http$expectStringResponse(
	function (response) {
		return _elm_lang$core$Result$Ok(response.body);
	});
var _elm_lang$http$Http$multipartBody = _elm_lang$http$Native_Http.multipart;
var _elm_lang$http$Http$stringBody = _elm_lang$http$Http_Internal$StringBody;
var _elm_lang$http$Http$jsonBody = function (value) {
	return A2(
		_elm_lang$http$Http_Internal$StringBody,
		'application/json',
		A2(_elm_lang$core$Json_Encode$encode, 0, value));
};
var _elm_lang$http$Http$emptyBody = _elm_lang$http$Http_Internal$EmptyBody;
var _elm_lang$http$Http$header = _elm_lang$http$Http_Internal$Header;
var _elm_lang$http$Http$request = _elm_lang$http$Http_Internal$Request;
var _elm_lang$http$Http$post = F3(
	function (url, body, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {ctor: '[]'},
				url: url,
				body: body,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$get = F2(
	function (url, decoder) {
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {ctor: '[]'},
				url: url,
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(decoder),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _elm_lang$http$Http$getString = function (url) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: url,
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectString,
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _elm_lang$http$Http$toTask = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$http$Native_Http.toTask, _p1._0, _elm_lang$core$Maybe$Nothing);
};
var _elm_lang$http$Http$send = F2(
	function (resultToMessage, request) {
		return A2(
			_elm_lang$core$Task$attempt,
			resultToMessage,
			_elm_lang$http$Http$toTask(request));
	});
var _elm_lang$http$Http$Response = F4(
	function (a, b, c, d) {
		return {url: a, status: b, headers: c, body: d};
	});
var _elm_lang$http$Http$BadPayload = F2(
	function (a, b) {
		return {ctor: 'BadPayload', _0: a, _1: b};
	});
var _elm_lang$http$Http$BadStatus = function (a) {
	return {ctor: 'BadStatus', _0: a};
};
var _elm_lang$http$Http$NetworkError = {ctor: 'NetworkError'};
var _elm_lang$http$Http$Timeout = {ctor: 'Timeout'};
var _elm_lang$http$Http$BadUrl = function (a) {
	return {ctor: 'BadUrl', _0: a};
};
var _elm_lang$http$Http$StringPart = F2(
	function (a, b) {
		return {ctor: 'StringPart', _0: a, _1: b};
	});
var _elm_lang$http$Http$stringPart = _elm_lang$http$Http$StringPart;

var _evancz$elm_markdown$Native_Markdown = function() {


// VIRTUAL-DOM WIDGETS

function toHtml(options, factList, rawMarkdown)
{
	var model = {
		options: options,
		markdown: rawMarkdown
	};
	return _elm_lang$virtual_dom$Native_VirtualDom.custom(factList, model, implementation);
}


// WIDGET IMPLEMENTATION

var implementation = {
	render: render,
	diff: diff
};

function render(model)
{
	var html = marked(model.markdown, formatOptions(model.options));
	var div = document.createElement('div');
	div.innerHTML = html;
	return div;
}

function diff(a, b)
{
	
	if (a.model.markdown === b.model.markdown && a.model.options === b.model.options)
	{
		return null;
	}

	return {
		applyPatch: applyPatch,
		data: marked(b.model.markdown, formatOptions(b.model.options))
	};
}

function applyPatch(domNode, data)
{
	domNode.innerHTML = data;
	return domNode;
}


// ACTUAL MARKDOWN PARSER

var marked = function() {
	// catch the `marked` object regardless of the outer environment.
	// (ex. a CommonJS module compatible environment.)
	// note that this depends on marked's implementation of environment detection.
	var module = {};
	var exports = module.exports = {};

	/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/chjj/marked
	 * commit cd2f6f5b7091154c5526e79b5f3bfb4d15995a51
	 */
	(function(){var block={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:noop,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:noop,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,blockquote:/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:noop,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};block.bullet=/(?:[*+-]|\d+\.)/;block.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;block.item=replace(block.item,"gm")(/bull/g,block.bullet)();block.list=replace(block.list)(/bull/g,block.bullet)("hr","\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))")("def","\\n+(?="+block.def.source+")")();block.blockquote=replace(block.blockquote)("def",block.def)();block._tag="(?!(?:"+"a|em|strong|small|s|cite|q|dfn|abbr|data|time|code"+"|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo"+"|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b";block.html=replace(block.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,block._tag)();block.paragraph=replace(block.paragraph)("hr",block.hr)("heading",block.heading)("lheading",block.lheading)("blockquote",block.blockquote)("tag","<"+block._tag)("def",block.def)();block.normal=merge({},block);block.gfm=merge({},block.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/});block.gfm.paragraph=replace(block.paragraph)("(?!","(?!"+block.gfm.fences.source.replace("\\1","\\2")+"|"+block.list.source.replace("\\1","\\3")+"|")();block.tables=merge({},block.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/});function Lexer(options){this.tokens=[];this.tokens.links={};this.options=options||marked.defaults;this.rules=block.normal;if(this.options.gfm){if(this.options.tables){this.rules=block.tables}else{this.rules=block.gfm}}}Lexer.rules=block;Lexer.lex=function(src,options){var lexer=new Lexer(options);return lexer.lex(src)};Lexer.prototype.lex=function(src){src=src.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n");return this.token(src,true)};Lexer.prototype.token=function(src,top,bq){var src=src.replace(/^ +$/gm,""),next,loose,cap,bull,b,item,space,i,l;while(src){if(cap=this.rules.newline.exec(src)){src=src.substring(cap[0].length);if(cap[0].length>1){this.tokens.push({type:"space"})}}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);cap=cap[0].replace(/^ {4}/gm,"");this.tokens.push({type:"code",text:!this.options.pedantic?cap.replace(/\n+$/,""):cap});continue}if(cap=this.rules.fences.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"code",lang:cap[2],text:cap[3]||""});continue}if(cap=this.rules.heading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[1].length,text:cap[2]});continue}if(top&&(cap=this.rules.nptable.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].split(/ *\| */)}this.tokens.push(item);continue}if(cap=this.rules.lheading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[2]==="="?1:2,text:cap[1]});continue}if(cap=this.rules.hr.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"hr"});continue}if(cap=this.rules.blockquote.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"blockquote_start"});cap=cap[0].replace(/^ *> ?/gm,"");this.token(cap,top,true);this.tokens.push({type:"blockquote_end"});continue}if(cap=this.rules.list.exec(src)){src=src.substring(cap[0].length);bull=cap[2];this.tokens.push({type:"list_start",ordered:bull.length>1});cap=cap[0].match(this.rules.item);next=false;l=cap.length;i=0;for(;i<l;i++){item=cap[i];space=item.length;item=item.replace(/^ *([*+-]|\d+\.) +/,"");if(~item.indexOf("\n ")){space-=item.length;item=!this.options.pedantic?item.replace(new RegExp("^ {1,"+space+"}","gm"),""):item.replace(/^ {1,4}/gm,"")}if(this.options.smartLists&&i!==l-1){b=block.bullet.exec(cap[i+1])[0];if(bull!==b&&!(bull.length>1&&b.length>1)){src=cap.slice(i+1).join("\n")+src;i=l-1}}loose=next||/\n\n(?!\s*$)/.test(item);if(i!==l-1){next=item.charAt(item.length-1)==="\n";if(!loose)loose=next}this.tokens.push({type:loose?"loose_item_start":"list_item_start"});this.token(item,false,bq);this.tokens.push({type:"list_item_end"})}this.tokens.push({type:"list_end"});continue}if(cap=this.rules.html.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&(cap[1]==="pre"||cap[1]==="script"||cap[1]==="style"),text:cap[0]});continue}if(!bq&&top&&(cap=this.rules.def.exec(src))){src=src.substring(cap[0].length);this.tokens.links[cap[1].toLowerCase()]={href:cap[2],title:cap[3]};continue}if(top&&(cap=this.rules.table.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/(?: *\| *)?\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */)}this.tokens.push(item);continue}if(top&&(cap=this.rules.paragraph.exec(src))){src=src.substring(cap[0].length);this.tokens.push({type:"paragraph",text:cap[1].charAt(cap[1].length-1)==="\n"?cap[1].slice(0,-1):cap[1]});continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"text",text:cap[0]});continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return this.tokens};var inline={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:noop,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:noop,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};inline._inside=/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;inline._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;inline.link=replace(inline.link)("inside",inline._inside)("href",inline._href)();inline.reflink=replace(inline.reflink)("inside",inline._inside)();inline.normal=merge({},inline);inline.pedantic=merge({},inline.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/});inline.gfm=merge({},inline.normal,{escape:replace(inline.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:replace(inline.text)("]|","~]|")("|","|https?://|")()});inline.breaks=merge({},inline.gfm,{br:replace(inline.br)("{2,}","*")(),text:replace(inline.gfm.text)("{2,}","*")()});function InlineLexer(links,options){this.options=options||marked.defaults;this.links=links;this.rules=inline.normal;this.renderer=this.options.renderer||new Renderer;this.renderer.options=this.options;if(!this.links){throw new Error("Tokens array requires a `links` property.")}if(this.options.gfm){if(this.options.breaks){this.rules=inline.breaks}else{this.rules=inline.gfm}}else if(this.options.pedantic){this.rules=inline.pedantic}}InlineLexer.rules=inline;InlineLexer.output=function(src,links,options){var inline=new InlineLexer(links,options);return inline.output(src)};InlineLexer.prototype.output=function(src){var out="",link,text,href,cap;while(src){if(cap=this.rules.escape.exec(src)){src=src.substring(cap[0].length);out+=cap[1];continue}if(cap=this.rules.autolink.exec(src)){src=src.substring(cap[0].length);if(cap[2]==="@"){text=cap[1].charAt(6)===":"?this.mangle(cap[1].substring(7)):this.mangle(cap[1]);href=this.mangle("mailto:")+text}else{text=escape(cap[1]);href=text}out+=this.renderer.link(href,null,text);continue}if(!this.inLink&&(cap=this.rules.url.exec(src))){src=src.substring(cap[0].length);text=escape(cap[1]);href=text;out+=this.renderer.link(href,null,text);continue}if(cap=this.rules.tag.exec(src)){if(!this.inLink&&/^<a /i.test(cap[0])){this.inLink=true}else if(this.inLink&&/^<\/a>/i.test(cap[0])){this.inLink=false}src=src.substring(cap[0].length);out+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(cap[0]):escape(cap[0]):cap[0];continue}if(cap=this.rules.link.exec(src)){src=src.substring(cap[0].length);this.inLink=true;out+=this.outputLink(cap,{href:cap[2],title:cap[3]});this.inLink=false;continue}if((cap=this.rules.reflink.exec(src))||(cap=this.rules.nolink.exec(src))){src=src.substring(cap[0].length);link=(cap[2]||cap[1]).replace(/\s+/g," ");link=this.links[link.toLowerCase()];if(!link||!link.href){out+=cap[0].charAt(0);src=cap[0].substring(1)+src;continue}this.inLink=true;out+=this.outputLink(cap,link);this.inLink=false;continue}if(cap=this.rules.strong.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.strong(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.em.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.em(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.codespan(escape(cap[2],true));continue}if(cap=this.rules.br.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.br();continue}if(cap=this.rules.del.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.del(this.output(cap[1]));continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.text(escape(this.smartypants(cap[0])));continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return out};InlineLexer.prototype.outputLink=function(cap,link){var href=escape(link.href),title=link.title?escape(link.title):null;return cap[0].charAt(0)!=="!"?this.renderer.link(href,title,this.output(cap[1])):this.renderer.image(href,title,escape(cap[1]))};InlineLexer.prototype.smartypants=function(text){if(!this.options.smartypants)return text;return text.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")};InlineLexer.prototype.mangle=function(text){if(!this.options.mangle)return text;var out="",l=text.length,i=0,ch;for(;i<l;i++){ch=text.charCodeAt(i);if(Math.random()>.5){ch="x"+ch.toString(16)}out+="&#"+ch+";"}return out};function Renderer(options){this.options=options||{}}Renderer.prototype.code=function(code,lang,escaped){if(this.options.highlight){var out=this.options.highlight(code,lang);if(out!=null&&out!==code){escaped=true;code=out}}if(!lang){return"<pre><code>"+(escaped?code:escape(code,true))+"\n</code></pre>"}return'<pre><code class="'+this.options.langPrefix+escape(lang,true)+'">'+(escaped?code:escape(code,true))+"\n</code></pre>\n"};Renderer.prototype.blockquote=function(quote){return"<blockquote>\n"+quote+"</blockquote>\n"};Renderer.prototype.html=function(html){return html};Renderer.prototype.heading=function(text,level,raw){return"<h"+level+' id="'+this.options.headerPrefix+raw.toLowerCase().replace(/[^\w]+/g,"-")+'">'+text+"</h"+level+">\n"};Renderer.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"};Renderer.prototype.list=function(body,ordered){var type=ordered?"ol":"ul";return"<"+type+">\n"+body+"</"+type+">\n"};Renderer.prototype.listitem=function(text){return"<li>"+text+"</li>\n"};Renderer.prototype.paragraph=function(text){return"<p>"+text+"</p>\n"};Renderer.prototype.table=function(header,body){return"<table>\n"+"<thead>\n"+header+"</thead>\n"+"<tbody>\n"+body+"</tbody>\n"+"</table>\n"};Renderer.prototype.tablerow=function(content){return"<tr>\n"+content+"</tr>\n"};Renderer.prototype.tablecell=function(content,flags){var type=flags.header?"th":"td";var tag=flags.align?"<"+type+' style="text-align:'+flags.align+'">':"<"+type+">";return tag+content+"</"+type+">\n"};Renderer.prototype.strong=function(text){return"<strong>"+text+"</strong>"};Renderer.prototype.em=function(text){return"<em>"+text+"</em>"};Renderer.prototype.codespan=function(text){return"<code>"+text+"</code>"};Renderer.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"};Renderer.prototype.del=function(text){return"<del>"+text+"</del>"};Renderer.prototype.link=function(href,title,text){if(this.options.sanitize){try{var prot=decodeURIComponent(unescape(href)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return""}if(prot.indexOf("javascript:")===0||prot.indexOf("vbscript:")===0||prot.indexOf("data:")===0){return""}}var out='<a href="'+href+'"';if(title){out+=' title="'+title+'"'}out+=">"+text+"</a>";return out};Renderer.prototype.image=function(href,title,text){var out='<img src="'+href+'" alt="'+text+'"';if(title){out+=' title="'+title+'"'}out+=this.options.xhtml?"/>":">";return out};Renderer.prototype.text=function(text){return text};function Parser(options){this.tokens=[];this.token=null;this.options=options||marked.defaults;this.options.renderer=this.options.renderer||new Renderer;this.renderer=this.options.renderer;this.renderer.options=this.options}Parser.parse=function(src,options,renderer){var parser=new Parser(options,renderer);return parser.parse(src)};Parser.prototype.parse=function(src){this.inline=new InlineLexer(src.links,this.options,this.renderer);this.tokens=src.reverse();var out="";while(this.next()){out+=this.tok()}return out};Parser.prototype.next=function(){return this.token=this.tokens.pop()};Parser.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0};Parser.prototype.parseText=function(){var body=this.token.text;while(this.peek().type==="text"){body+="\n"+this.next().text}return this.inline.output(body)};Parser.prototype.tok=function(){switch(this.token.type){case"space":{return""}case"hr":{return this.renderer.hr()}case"heading":{return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,this.token.text)}case"code":{return this.renderer.code(this.token.text,this.token.lang,this.token.escaped)}case"table":{var header="",body="",i,row,cell,flags,j;cell="";for(i=0;i<this.token.header.length;i++){flags={header:true,align:this.token.align[i]};cell+=this.renderer.tablecell(this.inline.output(this.token.header[i]),{header:true,align:this.token.align[i]})}header+=this.renderer.tablerow(cell);for(i=0;i<this.token.cells.length;i++){row=this.token.cells[i];cell="";for(j=0;j<row.length;j++){cell+=this.renderer.tablecell(this.inline.output(row[j]),{header:false,align:this.token.align[j]})}body+=this.renderer.tablerow(cell)}return this.renderer.table(header,body)}case"blockquote_start":{var body="";while(this.next().type!=="blockquote_end"){body+=this.tok()}return this.renderer.blockquote(body)}case"list_start":{var body="",ordered=this.token.ordered;while(this.next().type!=="list_end"){body+=this.tok()}return this.renderer.list(body,ordered)}case"list_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.token.type==="text"?this.parseText():this.tok()}return this.renderer.listitem(body)}case"loose_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.tok()}return this.renderer.listitem(body)}case"html":{var html=!this.token.pre&&!this.options.pedantic?this.inline.output(this.token.text):this.token.text;return this.renderer.html(html)}case"paragraph":{return this.renderer.paragraph(this.inline.output(this.token.text))}case"text":{return this.renderer.paragraph(this.parseText())}}};function escape(html,encode){return html.replace(!encode?/&(?!#?\w+;)/g:/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function unescape(html){return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g,function(_,n){n=n.toLowerCase();if(n==="colon")return":";if(n.charAt(0)==="#"){return n.charAt(1)==="x"?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1))}return""})}function replace(regex,opt){regex=regex.source;opt=opt||"";return function self(name,val){if(!name)return new RegExp(regex,opt);val=val.source||val;val=val.replace(/(^|[^\[])\^/g,"$1");regex=regex.replace(name,val);return self}}function noop(){}noop.exec=noop;function merge(obj){var i=1,target,key;for(;i<arguments.length;i++){target=arguments[i];for(key in target){if(Object.prototype.hasOwnProperty.call(target,key)){obj[key]=target[key]}}}return obj}function marked(src,opt,callback){if(callback||typeof opt==="function"){if(!callback){callback=opt;opt=null}opt=merge({},marked.defaults,opt||{});var highlight=opt.highlight,tokens,pending,i=0;try{tokens=Lexer.lex(src,opt)}catch(e){return callback(e)}pending=tokens.length;var done=function(err){if(err){opt.highlight=highlight;return callback(err)}var out;try{out=Parser.parse(tokens,opt)}catch(e){err=e}opt.highlight=highlight;return err?callback(err):callback(null,out)};if(!highlight||highlight.length<3){return done()}delete opt.highlight;if(!pending)return done();for(;i<tokens.length;i++){(function(token){if(token.type!=="code"){return--pending||done()}return highlight(token.text,token.lang,function(err,code){if(err)return done(err);if(code==null||code===token.text){return--pending||done()}token.text=code;token.escaped=true;--pending||done()})})(tokens[i])}return}try{if(opt)opt=merge({},marked.defaults,opt);return Parser.parse(Lexer.lex(src,opt),opt)}catch(e){e.message+="\nPlease report this to https://github.com/chjj/marked.";if((opt||marked.defaults).silent){return"<p>An error occured:</p><pre>"+escape(e.message+"",true)+"</pre>"}throw e}}marked.options=marked.setOptions=function(opt){merge(marked.defaults,opt);return marked};marked.defaults={gfm:true,tables:true,breaks:false,pedantic:false,sanitize:false,sanitizer:null,mangle:true,smartLists:false,silent:false,highlight:null,langPrefix:"lang-",smartypants:false,headerPrefix:"",renderer:new Renderer,xhtml:false};marked.Parser=Parser;marked.parser=Parser.parse;marked.Renderer=Renderer;marked.Lexer=Lexer;marked.lexer=Lexer.lex;marked.InlineLexer=InlineLexer;marked.inlineLexer=InlineLexer.output;marked.parse=marked;if(typeof module!=="undefined"&&typeof exports==="object"){module.exports=marked}else if(typeof define==="function"&&define.amd){define(function(){return marked})}else{this.marked=marked}}).call(function(){return this||(typeof window!=="undefined"?window:global)}());

	return module.exports;
}();


// FORMAT OPTIONS FOR MARKED IMPLEMENTATION

function formatOptions(options)
{
	function toHighlight(code, lang)
	{
		if (!lang && options.defaultHighlighting.ctor === 'Just')
		{
			lang = options.defaultHighlighting._0;
		}

		if (typeof hljs !== 'undefined' && lang && hljs.listLanguages().indexOf(lang) >= 0)
		{
			return hljs.highlight(lang, code, true).value;
		}

		return code;
	}

	var gfm = options.githubFlavored;
	if (gfm.ctor === 'Just')
	{
		return {
			highlight: toHighlight,
			gfm: true,
			tables: gfm._0.tables,
			breaks: gfm._0.breaks,
			sanitize: options.sanitize,
			smartypants: options.smartypants
		};
	}

	return {
		highlight: toHighlight,
		gfm: false,
		tables: false,
		breaks: false,
		sanitize: options.sanitize,
		smartypants: options.smartypants
	};
}


// EXPORTS

return {
	toHtml: F3(toHtml)
};

}();

var _evancz$elm_markdown$Markdown$toHtmlWith = _evancz$elm_markdown$Native_Markdown.toHtml;
var _evancz$elm_markdown$Markdown$defaultOptions = {
	githubFlavored: _elm_lang$core$Maybe$Just(
		{tables: false, breaks: false}),
	defaultHighlighting: _elm_lang$core$Maybe$Nothing,
	sanitize: false,
	smartypants: false
};
var _evancz$elm_markdown$Markdown$toHtml = F2(
	function (attrs, string) {
		return A3(_evancz$elm_markdown$Native_Markdown.toHtml, _evancz$elm_markdown$Markdown$defaultOptions, attrs, string);
	});
var _evancz$elm_markdown$Markdown$Options = F4(
	function (a, b, c, d) {
		return {githubFlavored: a, defaultHighlighting: b, sanitize: c, smartypants: d};
	});

var _elam03$elam03_github_io$Utils$composeTiledHtml = F2(
	function (cols, list) {
		var rest = A2(_elm_lang$core$List$drop, cols, list);
		var head = A2(_elm_lang$core$List$take, cols, list);
		var head_ = head;
		return _elm_lang$core$List$isEmpty(head) ? {ctor: '[]'} : A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$tr,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				head_,
				A2(_elam03$elam03_github_io$Utils$composeTiledHtml, cols, rest)));
	});

var _elam03$elam03_github_io$BlogList$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _elam03$elam03_github_io$BlogList$classCurrBlogStyle = _elm_lang$html$Html_Attributes$class('bloglist-currblog');
var _elam03$elam03_github_io$BlogList$classBlogHeader = _elm_lang$html$Html_Attributes$class('bloglist-header');
var _elam03$elam03_github_io$BlogList$classHoverStyle = _elm_lang$html$Html_Attributes$class('bloglist-item-hover');
var _elam03$elam03_github_io$BlogList$classItemStyle = _elm_lang$html$Html_Attributes$class('bloglist-item');
var _elam03$elam03_github_io$BlogList$classContainerStyle = _elm_lang$html$Html_Attributes$class('bloglist-container');
var _elam03$elam03_github_io$BlogList$classStyle = _elm_lang$html$Html_Attributes$class('bloglist');
var _elam03$elam03_github_io$BlogList$errorBlog = {
	title: 'error',
	id: -1,
	hover: false,
	date: _elm_lang$core$Maybe$Just(''),
	keywords: _elm_lang$core$Maybe$Just(
		{
			ctor: '::',
			_0: 'error',
			_1: {ctor: '[]'}
		}),
	url: _elm_lang$core$Maybe$Just('')
};
var _elam03$elam03_github_io$BlogList_ops = _elam03$elam03_github_io$BlogList_ops || {};
_elam03$elam03_github_io$BlogList_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _elam03$elam03_github_io$BlogList$BlogList = function (a) {
	return {blogs: a};
};
var _elam03$elam03_github_io$BlogList$Blog = F6(
	function (a, b, c, d, e, f) {
		return {title: a, id: b, hover: c, date: d, keywords: e, url: f};
	});
var _elam03$elam03_github_io$BlogList$decodeBlog = A7(
	_elm_lang$core$Json_Decode$map6,
	_elam03$elam03_github_io$BlogList$Blog,
	A2(_elm_lang$core$Json_Decode$field, 'title', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$succeed(-1),
	_elm_lang$core$Json_Decode$succeed(false),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'date', _elm_lang$core$Json_Decode$string)),
	_elm_lang$core$Json_Decode$maybe(
		A2(
			_elm_lang$core$Json_Decode$field,
			'keywords',
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode$field, 'url', _elm_lang$core$Json_Decode$string)));
var _elam03$elam03_github_io$BlogList$decodeBlogList = A2(
	_elm_lang$core$Json_Decode$map,
	_elam03$elam03_github_io$BlogList$BlogList,
	A2(
		_elm_lang$core$Json_Decode$field,
		'blogs',
		_elm_lang$core$Json_Decode$list(_elam03$elam03_github_io$BlogList$decodeBlog)));
var _elam03$elam03_github_io$BlogList$Model = F5(
	function (a, b, c, d, e) {
		return {blogListFile: a, blogs: b, currBlog: c, debug: d, currId: e};
	});
var _elam03$elam03_github_io$BlogList$UnHoverBlog = function (a) {
	return {ctor: 'UnHoverBlog', _0: a};
};
var _elam03$elam03_github_io$BlogList$HoverBlog = function (a) {
	return {ctor: 'HoverBlog', _0: a};
};
var _elam03$elam03_github_io$BlogList$FocusBlog = function (a) {
	return {ctor: 'FocusBlog', _0: a};
};
var _elam03$elam03_github_io$BlogList$viewBlogTile = function (blog) {
	var titleContent = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h4,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(blog.title),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	};
	var allContent = titleContent;
	var attribute = {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'bloglist', _1: true},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'bloglist-item', _1: true},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'bloglist-item-hover', _1: blog.hover},
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	};
	var attributes = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onClick(
				_elam03$elam03_github_io$BlogList$FocusBlog(blog.id)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onMouseOver(
					_elam03$elam03_github_io$BlogList$HoverBlog(blog.id)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onMouseOut(
						_elam03$elam03_github_io$BlogList$UnHoverBlog(blog.id)),
					_1: {ctor: '[]'}
				}
			}
		},
		attribute);
	return A2(_elm_lang$html$Html$div, attributes, allContent);
};
var _elam03$elam03_github_io$BlogList$view = function (model) {
	var blogTiles = A2(
		_elm_lang$core$List$map,
		function (b) {
			return _elam03$elam03_github_io$BlogList$viewBlogTile(b);
		},
		model.blogs);
	var blogTileAttributes = _elm_lang$html$Html_Attributes$classList(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'bloglist', _1: true},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'bloglist-container', _1: true},
				_1: {ctor: '[]'}
			}
		});
	var blogTilesContainer = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: blogTileAttributes,
				_1: {ctor: '[]'}
			},
			blogTiles),
		_1: {ctor: '[]'}
	};
	var currBlogContent = function () {
		var currBlog = A2(
			_elm_lang$core$Maybe$withDefault,
			_elam03$elam03_github_io$BlogList$errorBlog,
			A2(
				_elm_lang$core$Array$get,
				model.currId,
				_elm_lang$core$Array$fromList(model.blogs)));
		var currBlogSelected = (_elm_lang$core$Native_Utils.cmp(model.currId, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(
			model.currId,
			_elm_lang$core$List$length(model.blogs)) < 0);
		return currBlogSelected ? {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(currBlog.title),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('currblog'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: model.currBlog,
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		} : {ctor: '[]'};
	}();
	var allTheThings = A2(_elm_lang$core$Basics_ops['++'], blogTilesContainer, currBlogContent);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		allTheThings);
};
var _elam03$elam03_github_io$BlogList$LoadBlogMarkdown = function (a) {
	return {ctor: 'LoadBlogMarkdown', _0: a};
};
var _elam03$elam03_github_io$BlogList$getContent = function (location) {
	return A2(
		_elm_lang$http$Http$send,
		_elam03$elam03_github_io$BlogList$LoadBlogMarkdown,
		_elm_lang$http$Http$getString(location));
};
var _elam03$elam03_github_io$BlogList$update = F2(
	function (action, model) {
		var _p0 = action;
		switch (_p0.ctor) {
			case 'LoadBlogList':
				if (_p0._0.ctor === 'Ok') {
					var populateBlogId = function (b) {
						return _elm_lang$core$Tuple$second(
							_elm_lang$core$List$unzip(
								A2(
									_elm_lang$core$List$map,
									function (_p1) {
										var _p2 = _p1;
										var _p3 = _p2._0;
										return {
											ctor: '_Tuple2',
											_0: _p3,
											_1: _elm_lang$core$Native_Utils.update(
												_p2._1,
												{id: _p3})
										};
									},
									A2(
										_elm_lang$core$List$indexedMap,
										F2(
											function (v0, v1) {
												return {ctor: '_Tuple2', _0: v0, _1: v1};
											}),
										b))));
					};
					var blogs = populateBlogId(
						function (_) {
							return _.blogs;
						}(_p0._0._0));
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{blogs: blogs}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'LoadBlogMarkdown':
				if (_p0._0.ctor === 'Ok') {
					var debug = model.debug;
					var options = _evancz$elm_markdown$Markdown$defaultOptions;
					var currBlog = A3(
						_evancz$elm_markdown$Markdown$toHtmlWith,
						options,
						{ctor: '[]'},
						_p0._0._0);
					return {
						ctor: '_Tuple2',
						_0: A5(_elam03$elam03_github_io$BlogList$Model, model.blogListFile, model.blogs, currBlog, debug, model.currId),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'FocusBlog':
				var _p4 = _p0._0;
				var debug = _elm_lang$core$Basics$toString(
					_elm_lang$core$List$length(model.blogs));
				var blog = A2(
					_elm_lang$core$Maybe$withDefault,
					_elam03$elam03_github_io$BlogList$errorBlog,
					A2(
						_elm_lang$core$Array$get,
						_p4,
						_elm_lang$core$Array$fromList(model.blogs)));
				var blogMarkdownFile = A2(_elm_lang$core$Maybe$withDefault, '', blog.url);
				return {
					ctor: '_Tuple2',
					_0: A5(_elam03$elam03_github_io$BlogList$Model, model.blogListFile, model.blogs, model.currBlog, debug, _p4),
					_1: _elam03$elam03_github_io$BlogList$getContent(blogMarkdownFile)
				};
			case 'HoverBlog':
				var blogs = A2(
					_elm_lang$core$List$map,
					function (b) {
						return _elm_lang$core$Native_Utils.eq(b.id, _p0._0) ? _elm_lang$core$Native_Utils.update(
							b,
							{hover: true}) : b;
					},
					model.blogs);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{blogs: blogs}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var blogs = A2(
					_elm_lang$core$List$map,
					function (b) {
						return _elm_lang$core$Native_Utils.eq(b.id, _p0._0) ? _elm_lang$core$Native_Utils.update(
							b,
							{hover: false}) : b;
					},
					model.blogs);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{blogs: blogs}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _elam03$elam03_github_io$BlogList$LoadBlogList = function (a) {
	return {ctor: 'LoadBlogList', _0: a};
};
var _elam03$elam03_github_io$BlogList$getBlogList = function (location) {
	return A2(
		_elm_lang$http$Http$send,
		_elam03$elam03_github_io$BlogList$LoadBlogList,
		A2(_elm_lang$http$Http$get, location, _elam03$elam03_github_io$BlogList$decodeBlogList));
};
var _elam03$elam03_github_io$BlogList$init = function (blogList) {
	return {
		ctor: '_Tuple2',
		_0: A5(
			_elam03$elam03_github_io$BlogList$Model,
			blogList,
			{ctor: '[]'},
			_elm_lang$html$Html$text(''),
			'debug!',
			-1),
		_1: _elam03$elam03_github_io$BlogList$getBlogList(blogList)
	};
};

var _elm_lang$core$Color$fmod = F2(
	function (f, n) {
		var integer = _elm_lang$core$Basics$floor(f);
		return (_elm_lang$core$Basics$toFloat(
			A2(_elm_lang$core$Basics_ops['%'], integer, n)) + f) - _elm_lang$core$Basics$toFloat(integer);
	});
var _elm_lang$core$Color$rgbToHsl = F3(
	function (red, green, blue) {
		var b = _elm_lang$core$Basics$toFloat(blue) / 255;
		var g = _elm_lang$core$Basics$toFloat(green) / 255;
		var r = _elm_lang$core$Basics$toFloat(red) / 255;
		var cMax = A2(
			_elm_lang$core$Basics$max,
			A2(_elm_lang$core$Basics$max, r, g),
			b);
		var cMin = A2(
			_elm_lang$core$Basics$min,
			A2(_elm_lang$core$Basics$min, r, g),
			b);
		var c = cMax - cMin;
		var lightness = (cMax + cMin) / 2;
		var saturation = _elm_lang$core$Native_Utils.eq(lightness, 0) ? 0 : (c / (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)));
		var hue = _elm_lang$core$Basics$degrees(60) * (_elm_lang$core$Native_Utils.eq(cMax, r) ? A2(_elm_lang$core$Color$fmod, (g - b) / c, 6) : (_elm_lang$core$Native_Utils.eq(cMax, g) ? (((b - r) / c) + 2) : (((r - g) / c) + 4)));
		return {ctor: '_Tuple3', _0: hue, _1: saturation, _2: lightness};
	});
var _elm_lang$core$Color$hslToRgb = F3(
	function (hue, saturation, lightness) {
		var normHue = hue / _elm_lang$core$Basics$degrees(60);
		var chroma = (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)) * saturation;
		var x = chroma * (1 - _elm_lang$core$Basics$abs(
			A2(_elm_lang$core$Color$fmod, normHue, 2) - 1));
		var _p0 = (_elm_lang$core$Native_Utils.cmp(normHue, 0) < 0) ? {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 1) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: x, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 2) < 0) ? {ctor: '_Tuple3', _0: x, _1: chroma, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(normHue, 3) < 0) ? {ctor: '_Tuple3', _0: 0, _1: chroma, _2: x} : ((_elm_lang$core$Native_Utils.cmp(normHue, 4) < 0) ? {ctor: '_Tuple3', _0: 0, _1: x, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 5) < 0) ? {ctor: '_Tuple3', _0: x, _1: 0, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(normHue, 6) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: 0, _2: x} : {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}))))));
		var r = _p0._0;
		var g = _p0._1;
		var b = _p0._2;
		var m = lightness - (chroma / 2);
		return {ctor: '_Tuple3', _0: r + m, _1: g + m, _2: b + m};
	});
var _elm_lang$core$Color$toRgb = function (color) {
	var _p1 = color;
	if (_p1.ctor === 'RGBA') {
		return {red: _p1._0, green: _p1._1, blue: _p1._2, alpha: _p1._3};
	} else {
		var _p2 = A3(_elm_lang$core$Color$hslToRgb, _p1._0, _p1._1, _p1._2);
		var r = _p2._0;
		var g = _p2._1;
		var b = _p2._2;
		return {
			red: _elm_lang$core$Basics$round(255 * r),
			green: _elm_lang$core$Basics$round(255 * g),
			blue: _elm_lang$core$Basics$round(255 * b),
			alpha: _p1._3
		};
	}
};
var _elm_lang$core$Color$toHsl = function (color) {
	var _p3 = color;
	if (_p3.ctor === 'HSLA') {
		return {hue: _p3._0, saturation: _p3._1, lightness: _p3._2, alpha: _p3._3};
	} else {
		var _p4 = A3(_elm_lang$core$Color$rgbToHsl, _p3._0, _p3._1, _p3._2);
		var h = _p4._0;
		var s = _p4._1;
		var l = _p4._2;
		return {hue: h, saturation: s, lightness: l, alpha: _p3._3};
	}
};
var _elm_lang$core$Color$HSLA = F4(
	function (a, b, c, d) {
		return {ctor: 'HSLA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		return A4(
			_elm_lang$core$Color$HSLA,
			hue - _elm_lang$core$Basics$turns(
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$Basics$floor(hue / (2 * _elm_lang$core$Basics$pi)))),
			saturation,
			lightness,
			alpha);
	});
var _elm_lang$core$Color$hsl = F3(
	function (hue, saturation, lightness) {
		return A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, 1);
	});
var _elm_lang$core$Color$complement = function (color) {
	var _p5 = color;
	if (_p5.ctor === 'HSLA') {
		return A4(
			_elm_lang$core$Color$hsla,
			_p5._0 + _elm_lang$core$Basics$degrees(180),
			_p5._1,
			_p5._2,
			_p5._3);
	} else {
		var _p6 = A3(_elm_lang$core$Color$rgbToHsl, _p5._0, _p5._1, _p5._2);
		var h = _p6._0;
		var s = _p6._1;
		var l = _p6._2;
		return A4(
			_elm_lang$core$Color$hsla,
			h + _elm_lang$core$Basics$degrees(180),
			s,
			l,
			_p5._3);
	}
};
var _elm_lang$core$Color$grayscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$greyscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$RGBA = F4(
	function (a, b, c, d) {
		return {ctor: 'RGBA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$rgba = _elm_lang$core$Color$RGBA;
var _elm_lang$core$Color$rgb = F3(
	function (r, g, b) {
		return A4(_elm_lang$core$Color$RGBA, r, g, b, 1);
	});
var _elm_lang$core$Color$lightRed = A4(_elm_lang$core$Color$RGBA, 239, 41, 41, 1);
var _elm_lang$core$Color$red = A4(_elm_lang$core$Color$RGBA, 204, 0, 0, 1);
var _elm_lang$core$Color$darkRed = A4(_elm_lang$core$Color$RGBA, 164, 0, 0, 1);
var _elm_lang$core$Color$lightOrange = A4(_elm_lang$core$Color$RGBA, 252, 175, 62, 1);
var _elm_lang$core$Color$orange = A4(_elm_lang$core$Color$RGBA, 245, 121, 0, 1);
var _elm_lang$core$Color$darkOrange = A4(_elm_lang$core$Color$RGBA, 206, 92, 0, 1);
var _elm_lang$core$Color$lightYellow = A4(_elm_lang$core$Color$RGBA, 255, 233, 79, 1);
var _elm_lang$core$Color$yellow = A4(_elm_lang$core$Color$RGBA, 237, 212, 0, 1);
var _elm_lang$core$Color$darkYellow = A4(_elm_lang$core$Color$RGBA, 196, 160, 0, 1);
var _elm_lang$core$Color$lightGreen = A4(_elm_lang$core$Color$RGBA, 138, 226, 52, 1);
var _elm_lang$core$Color$green = A4(_elm_lang$core$Color$RGBA, 115, 210, 22, 1);
var _elm_lang$core$Color$darkGreen = A4(_elm_lang$core$Color$RGBA, 78, 154, 6, 1);
var _elm_lang$core$Color$lightBlue = A4(_elm_lang$core$Color$RGBA, 114, 159, 207, 1);
var _elm_lang$core$Color$blue = A4(_elm_lang$core$Color$RGBA, 52, 101, 164, 1);
var _elm_lang$core$Color$darkBlue = A4(_elm_lang$core$Color$RGBA, 32, 74, 135, 1);
var _elm_lang$core$Color$lightPurple = A4(_elm_lang$core$Color$RGBA, 173, 127, 168, 1);
var _elm_lang$core$Color$purple = A4(_elm_lang$core$Color$RGBA, 117, 80, 123, 1);
var _elm_lang$core$Color$darkPurple = A4(_elm_lang$core$Color$RGBA, 92, 53, 102, 1);
var _elm_lang$core$Color$lightBrown = A4(_elm_lang$core$Color$RGBA, 233, 185, 110, 1);
var _elm_lang$core$Color$brown = A4(_elm_lang$core$Color$RGBA, 193, 125, 17, 1);
var _elm_lang$core$Color$darkBrown = A4(_elm_lang$core$Color$RGBA, 143, 89, 2, 1);
var _elm_lang$core$Color$black = A4(_elm_lang$core$Color$RGBA, 0, 0, 0, 1);
var _elm_lang$core$Color$white = A4(_elm_lang$core$Color$RGBA, 255, 255, 255, 1);
var _elm_lang$core$Color$lightGrey = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$grey = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGrey = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightGray = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$gray = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGray = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightCharcoal = A4(_elm_lang$core$Color$RGBA, 136, 138, 133, 1);
var _elm_lang$core$Color$charcoal = A4(_elm_lang$core$Color$RGBA, 85, 87, 83, 1);
var _elm_lang$core$Color$darkCharcoal = A4(_elm_lang$core$Color$RGBA, 46, 52, 54, 1);
var _elm_lang$core$Color$Radial = F5(
	function (a, b, c, d, e) {
		return {ctor: 'Radial', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Color$radial = _elm_lang$core$Color$Radial;
var _elm_lang$core$Color$Linear = F3(
	function (a, b, c) {
		return {ctor: 'Linear', _0: a, _1: b, _2: c};
	});
var _elm_lang$core$Color$linear = _elm_lang$core$Color$Linear;

var _evancz$elm_graphics$Native_Element = function()
{


// CREATION

var createNode =
	typeof document === 'undefined'
		?
			function(_)
			{
				return {
					style: {},
					appendChild: function() {}
				};
			}
		:
			function(elementType)
			{
				var node = document.createElement(elementType);
				node.style.padding = '0';
				node.style.margin = '0';
				return node;
			}
		;


function newElement(width, height, elementPrim)
{
	return {
		ctor: 'Element_elm_builtin',
		_0: {
			element: elementPrim,
			props: {
				width: width,
				height: height,
				opacity: 1,
				color: _elm_lang$core$Maybe$Nothing,
				href: '',
				tag: ''
			}
		}
	};
}


// PROPERTIES

function setProps(elem, node)
{
	var props = elem.props;

	var element = elem.element;
	var width = props.width - (element.adjustWidth || 0);
	var height = props.height - (element.adjustHeight || 0);
	node.style.width  = (width | 0) + 'px';
	node.style.height = (height | 0) + 'px';

	if (props.opacity !== 1)
	{
		node.style.opacity = props.opacity;
	}

	if (props.color.ctor === 'Just')
	{
		node.style.backgroundColor = _evancz$elm_graphics$Text$colorToCss(props.color._0);
	}

	if (props.tag !== '')
	{
		node.id = props.tag;
	}

	if (props.href !== '')
	{
		var anchor = createNode('a');
		anchor.href = props.href;
		anchor.style.display = 'block';
		anchor.style.pointerEvents = 'auto';
		anchor.appendChild(node);
		node = anchor;
	}

	return node;
}


// IMAGES

function image(props, img)
{
	switch (img._0.ctor)
	{
		case 'Plain':
			return plainImage(img._3);

		case 'Fitted':
			return fittedImage(props.width, props.height, img._3);

		case 'Cropped':
			return croppedImage(img, props.width, props.height, img._3);

		case 'Tiled':
			return tiledImage(img._3);
	}
}

function plainImage(src)
{
	var img = createNode('img');
	img.src = src;
	img.name = src;
	img.style.display = 'block';
	return img;
}

function tiledImage(src)
{
	var div = createNode('div');
	div.style.backgroundImage = 'url(' + src + ')';
	return div;
}

function fittedImage(w, h, src)
{
	var div = createNode('div');
	div.style.background = 'url(' + src + ') no-repeat center';
	div.style.webkitBackgroundSize = 'cover';
	div.style.MozBackgroundSize = 'cover';
	div.style.OBackgroundSize = 'cover';
	div.style.backgroundSize = 'cover';
	return div;
}

function croppedImage(elem, w, h, src)
{
	var pos = elem._0._0;
	var e = createNode('div');
	e.style.overflow = 'hidden';

	var img = createNode('img');
	img.onload = function() {
		var sw = w / elem._1, sh = h / elem._2;
		img.style.width = ((this.width * sw) | 0) + 'px';
		img.style.height = ((this.height * sh) | 0) + 'px';
		img.style.marginLeft = ((- pos._0 * sw) | 0) + 'px';
		img.style.marginTop = ((- pos._1 * sh) | 0) + 'px';
	};
	img.src = src;
	img.name = src;
	e.appendChild(img);
	return e;
}


// FLOW

function goOut(node)
{
	node.style.position = 'absolute';
	return node;
}
function goDown(node)
{
	return node;
}
function goRight(node)
{
	node.style.styleFloat = 'left';
	node.style.cssFloat = 'left';
	return node;
}

var directionTable = {
	DUp: goDown,
	DDown: goDown,
	DLeft: goRight,
	DRight: goRight,
	DIn: goOut,
	DOut: goOut
};
function needsReversal(dir)
{
	return dir === 'DUp' || dir === 'DLeft' || dir === 'DIn';
}

function flow(dir, elist)
{
	var array = _elm_lang$core$Native_List.toArray(elist);
	var container = createNode('div');
	var goDir = directionTable[dir];
	if (goDir === goOut)
	{
		container.style.pointerEvents = 'none';
	}
	if (needsReversal(dir))
	{
		array.reverse();
	}
	var len = array.length;
	for (var i = 0; i < len; ++i)
	{
		container.appendChild(goDir(render(array[i])));
	}
	return container;
}


// CONTAINER

function toPos(pos)
{
	return pos.ctor === 'Absolute'
		? pos._0 + 'px'
		: (pos._0 * 100) + '%';
}

// must clear right, left, top, bottom, and transform
// before calling this function
function setPos(pos, wrappedElement, e)
{
	var elem = wrappedElement._0;
	var element = elem.element;
	var props = elem.props;
	var w = props.width + (element.adjustWidth ? element.adjustWidth : 0);
	var h = props.height + (element.adjustHeight ? element.adjustHeight : 0);

	e.style.position = 'absolute';
	e.style.margin = 'auto';
	var transform = '';

	switch (pos.horizontal.ctor)
	{
		case 'P':
			e.style.right = toPos(pos.x);
			e.style.removeProperty('left');
			break;

		case 'Z':
			transform = 'translateX(' + ((-w / 2) | 0) + 'px) ';

		case 'N':
			e.style.left = toPos(pos.x);
			e.style.removeProperty('right');
			break;
	}
	switch (pos.vertical.ctor)
	{
		case 'N':
			e.style.bottom = toPos(pos.y);
			e.style.removeProperty('top');
			break;

		case 'Z':
			transform += 'translateY(' + ((-h / 2) | 0) + 'px)';

		case 'P':
			e.style.top = toPos(pos.y);
			e.style.removeProperty('bottom');
			break;
	}
	if (transform !== '')
	{
		addTransform(e.style, transform);
	}
	return e;
}

function addTransform(style, transform)
{
	style.transform       = transform;
	style.msTransform     = transform;
	style.MozTransform    = transform;
	style.webkitTransform = transform;
	style.OTransform      = transform;
}

function container(pos, elem)
{
	var e = render(elem);
	setPos(pos, elem, e);
	var div = createNode('div');
	div.style.position = 'relative';
	div.style.overflow = 'hidden';
	div.appendChild(e);
	return div;
}


function rawHtml(elem)
{
	var html = elem.html;
	var align = elem.align;

	var div = createNode('div');
	div.innerHTML = html;
	div.style.visibility = 'hidden';
	if (align)
	{
		div.style.textAlign = align;
	}
	div.style.visibility = 'visible';
	div.style.pointerEvents = 'auto';
	return div;
}


// TO HTML

function toHtml(element)
{
	return _elm_lang$virtual_dom$Native_VirtualDom.custom(
		_elm_lang$core$Native_List.Nil,
		element,
		implementation
	);
}


// WIDGET IMPLEMENTATION

var implementation = {
	render: render,
	diff: diff
};

function diff(a, b)
{
	var aModel = a.model;
	var bModel = b.model;

	if (aModel === bModel)
	{
		return null;
	}

	return {
		applyPatch: applyPatch,
		data: { a: aModel, b: bModel }
	};
}

function applyPatch(domNode, data)
{
	return updateAndReplace(domNode, data.a, data.b);
}


// RENDER

function render(wrappedElement)
{
	var elem = wrappedElement._0;
	return setProps(elem, makeElement(elem));
}

function makeElement(e)
{
	var elem = e.element;
	switch (elem.ctor)
	{
		case 'Image':
			return image(e.props, elem);

		case 'Flow':
			return flow(elem._0.ctor, elem._1);

		case 'Container':
			return container(elem._0, elem._1);

		case 'Spacer':
			return createNode('div');

		case 'RawHtml':
			return rawHtml(elem);

		case 'Custom':
			return elem.render(elem.model);
	}
}

function updateAndReplace(node, curr, next)
{
	var newNode = update(node, curr, next);
	if (newNode !== node)
	{
		node.parentNode.replaceChild(newNode, node);
	}
	return newNode;
}


// UPDATE

function update(node, wrappedCurrent, wrappedNext)
{
	var curr = wrappedCurrent._0;
	var next = wrappedNext._0;
	var rootNode = node;

	if (curr === next)
	{
		return rootNode;
	}

	if (node.tagName === 'A')
	{
		node = node.firstChild;
	}
	if (curr.element.ctor !== next.element.ctor)
	{
		return render(wrappedNext);
	}
	var nextE = next.element;
	var currE = curr.element;
	switch (nextE.ctor)
	{
		case 'Spacer':
			updateProps(node, curr, next);
			return rootNode;

		case 'RawHtml':
			if(currE.html.valueOf() !== nextE.html.valueOf())
			{
				node.innerHTML = nextE.html;
			}
			updateProps(node, curr, next);
			return rootNode;

		case 'Image':
			if (nextE._0.ctor === 'Plain')
			{
				if (nextE._3 !== currE._3)
				{
					node.src = nextE._3;
				}
			}
			else if (!_elm_lang$core$Native_Utils.eq(nextE, currE)
				|| next.props.width !== curr.props.width
				|| next.props.height !== curr.props.height)
			{
				return render(wrappedNext);
			}
			updateProps(node, curr, next);
			return rootNode;

		case 'Flow':
			var arr = _elm_lang$core$Native_List.toArray(nextE._1);
			for (var i = arr.length; i--; )
			{
				arr[i] = arr[i]._0.element.ctor;
			}
			if (nextE._0.ctor !== currE._0.ctor)
			{
				return render(wrappedNext);
			}
			var nexts = _elm_lang$core$Native_List.toArray(nextE._1);
			var kids = node.childNodes;
			if (nexts.length !== kids.length)
			{
				return render(wrappedNext);
			}
			var currs = _elm_lang$core$Native_List.toArray(currE._1);
			var dir = nextE._0.ctor;
			var goDir = directionTable[dir];
			var toReverse = needsReversal(dir);
			var len = kids.length;
			for (var i = len; i--; )
			{
				var subNode = kids[toReverse ? len - i - 1 : i];
				goDir(updateAndReplace(subNode, currs[i], nexts[i]));
			}
			updateProps(node, curr, next);
			return rootNode;

		case 'Container':
			var subNode = node.firstChild;
			var newSubNode = updateAndReplace(subNode, currE._1, nextE._1);
			setPos(nextE._0, nextE._1, newSubNode);
			updateProps(node, curr, next);
			return rootNode;

		case 'Custom':
			if (currE.type === nextE.type)
			{
				var updatedNode = nextE.update(node, currE.model, nextE.model);
				updateProps(updatedNode, curr, next);
				return updatedNode;
			}
			return render(wrappedNext);
	}
}

function updateProps(node, curr, next)
{
	var nextProps = next.props;
	var currProps = curr.props;

	var element = next.element;
	var width = nextProps.width - (element.adjustWidth || 0);
	var height = nextProps.height - (element.adjustHeight || 0);
	if (width !== currProps.width)
	{
		node.style.width = (width | 0) + 'px';
	}
	if (height !== currProps.height)
	{
		node.style.height = (height | 0) + 'px';
	}

	if (nextProps.opacity !== currProps.opacity)
	{
		node.style.opacity = nextProps.opacity;
	}

	var nextColor = nextProps.color.ctor === 'Just'
		? _evancz$elm_graphics$Text$colorToCss(nextProps.color._0)
		: '';
	if (node.style.backgroundColor !== nextColor)
	{
		node.style.backgroundColor = nextColor;
	}

	if (nextProps.tag !== currProps.tag)
	{
		node.id = nextProps.tag;
	}

	if (nextProps.href !== currProps.href)
	{
		if (currProps.href === '')
		{
			// add a surrounding href
			var anchor = createNode('a');
			anchor.href = nextProps.href;
			anchor.style.display = 'block';
			anchor.style.pointerEvents = 'auto';

			node.parentNode.replaceChild(anchor, node);
			anchor.appendChild(node);
		}
		else if (nextProps.href === '')
		{
			// remove the surrounding href
			var anchor = node.parentNode;
			anchor.parentNode.replaceChild(node, anchor);
		}
		else
		{
			// just update the link
			node.parentNode.href = nextProps.href;
		}
	}
}


// TEXT

function block(align)
{
	return function(text)
	{
		var raw = {
			ctor: 'RawHtml',
			html: _evancz$elm_graphics$Text$toHtmlString(text),
			align: align
		};
		var pos = htmlHeight(0, raw);
		return newElement(pos._0, pos._1, raw);
	};
}

var htmlHeight =
	typeof document !== 'undefined'
		? realHtmlHeight
		: function(a, b) { return _elm_lang$core$Native_Utils.Tuple2(0, 0); };

function realHtmlHeight(width, rawHtml)
{
	// create dummy node
	var temp = document.createElement('div');
	temp.innerHTML = rawHtml.html;
	if (width > 0)
	{
		temp.style.width = width + 'px';
	}
	temp.style.visibility = 'hidden';
	temp.style.styleFloat = 'left';
	temp.style.cssFloat = 'left';

	document.body.appendChild(temp);

	// get dimensions
	var style = window.getComputedStyle(temp, null);
	var w = Math.ceil(style.getPropertyValue('width').slice(0, -2) - 0);
	var h = Math.ceil(style.getPropertyValue('height').slice(0, -2) - 0);
	document.body.removeChild(temp);
	return _elm_lang$core$Native_Utils.Tuple2(w, h);
}


return {
	toHtml: toHtml,

	render: render,
	update: update,
	createNode: createNode,
	newElement: F3(newElement),
	addTransform: addTransform,

	block: block
};

}();


var _evancz$elm_graphics$Text$wrap = F3(
	function (maybeHref, styles, insides) {
		var linkedInsides = function () {
			var _p0 = maybeHref;
			if (_p0.ctor === 'Nothing') {
				return insides;
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'<a href=\"',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p0._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\">',
							A2(_elm_lang$core$Basics_ops['++'], insides, '</a>'))));
			}
		}();
		return _elm_lang$core$Native_Utils.eq(styles, '') ? linkedInsides : A2(
			_elm_lang$core$Basics_ops['++'],
			'<span style=\"',
			A2(
				_elm_lang$core$Basics_ops['++'],
				styles,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'\">',
					A2(_elm_lang$core$Basics_ops['++'], linkedInsides, '</span>'))));
	});
var _evancz$elm_graphics$Text$replace = F3(
	function (from, to, str) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(from),
			function (_p1) {
				return to;
			},
			str);
	});
var _evancz$elm_graphics$Text$toHtmlString = function (text) {
	return A3(_evancz$elm_graphics$Text$toHtmlStringHelp, _elm_lang$core$Maybe$Nothing, '', text);
};
var _evancz$elm_graphics$Text$toHtmlStringHelp = F3(
	function (maybeHref, styles, text) {
		toHtmlStringHelp:
		while (true) {
			var _p2 = text;
			switch (_p2.ctor) {
				case 'Str':
					return A3(
						_evancz$elm_graphics$Text$wrap,
						maybeHref,
						styles,
						A2(
							_elm_lang$core$String$join,
							'<br>',
							A2(
								_elm_lang$core$List$map,
								A2(_evancz$elm_graphics$Text$replace, ' ', '&nbsp;'),
								_elm_lang$core$String$lines(
									A3(
										_evancz$elm_graphics$Text$replace,
										'>',
										'&#62;',
										A3(
											_evancz$elm_graphics$Text$replace,
											'<',
											'&#60;',
											A3(
												_evancz$elm_graphics$Text$replace,
												'\'',
												'&#39;',
												A3(_evancz$elm_graphics$Text$replace, '\"', '&#34;', _p2._0))))))));
				case 'Append':
					return A3(
						_evancz$elm_graphics$Text$wrap,
						maybeHref,
						styles,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_evancz$elm_graphics$Text$toHtmlString(_p2._0),
							_evancz$elm_graphics$Text$toHtmlString(_p2._1)));
				case 'Link':
					var _v2 = _elm_lang$core$Maybe$Just(
						A2(_elm_lang$core$Maybe$withDefault, _p2._0, maybeHref)),
						_v3 = styles,
						_v4 = _p2._1;
					maybeHref = _v2;
					styles = _v3;
					text = _v4;
					continue toHtmlStringHelp;
				default:
					var _v5 = maybeHref,
						_v6 = A2(
						_elm_lang$core$Basics_ops['++'],
						styles,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p2._0,
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								A2(_elm_lang$core$Basics_ops['++'], _p2._1, ';')))),
						_v7 = _p2._2;
					maybeHref = _v5;
					styles = _v6;
					text = _v7;
					continue toHtmlStringHelp;
			}
		}
	});
var _evancz$elm_graphics$Text$colorToCss = function (color) {
	var _p3 = _elm_lang$core$Color$toRgb(color);
	var red = _p3.red;
	var green = _p3.green;
	var blue = _p3.blue;
	var alpha = _p3.alpha;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'rgba(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(red),
			A2(
				_elm_lang$core$Basics_ops['++'],
				', ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(green),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(blue),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(alpha),
									')'))))))));
};
var _evancz$elm_graphics$Text$typefacesToString = function (faces) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'\'',
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$String$join, '\', \'', faces),
			'\''));
};
var _evancz$elm_graphics$Text$maybeAdd = F3(
	function (add, maybeValue, text) {
		var _p4 = maybeValue;
		if (_p4.ctor === 'Nothing') {
			return text;
		} else {
			return A2(add, _p4._0, text);
		}
	});
var _evancz$elm_graphics$Text$defaultStyle = {
	typeface: {ctor: '[]'},
	height: _elm_lang$core$Maybe$Nothing,
	color: _elm_lang$core$Color$black,
	bold: false,
	italic: false,
	line: _elm_lang$core$Maybe$Nothing
};
var _evancz$elm_graphics$Text$Style = F6(
	function (a, b, c, d, e, f) {
		return {typeface: a, height: b, color: c, bold: d, italic: e, line: f};
	});
var _evancz$elm_graphics$Text$Meta = F3(
	function (a, b, c) {
		return {ctor: 'Meta', _0: a, _1: b, _2: c};
	});
var _evancz$elm_graphics$Text$typeface = F2(
	function (faces, text) {
		var _p5 = faces;
		if (_p5.ctor === '[]') {
			return text;
		} else {
			return A3(
				_evancz$elm_graphics$Text$Meta,
				'font-family',
				_evancz$elm_graphics$Text$typefacesToString(faces),
				text);
		}
	});
var _evancz$elm_graphics$Text$monospace = function (text) {
	return A3(_evancz$elm_graphics$Text$Meta, 'font-family', 'monospace', text);
};
var _evancz$elm_graphics$Text$height = F2(
	function (px, text) {
		return A3(
			_evancz$elm_graphics$Text$Meta,
			'font-size',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(px),
				'px'),
			text);
	});
var _evancz$elm_graphics$Text$color = F2(
	function (color, text) {
		return A3(
			_evancz$elm_graphics$Text$Meta,
			'color',
			_evancz$elm_graphics$Text$colorToCss(color),
			text);
	});
var _evancz$elm_graphics$Text$bold = function (text) {
	return A3(_evancz$elm_graphics$Text$Meta, 'font-weight', 'bold', text);
};
var _evancz$elm_graphics$Text$italic = function (text) {
	return A3(_evancz$elm_graphics$Text$Meta, 'font-style', 'italic', text);
};
var _evancz$elm_graphics$Text$line = F2(
	function (lineTag, text) {
		var decoration = function () {
			var _p6 = lineTag;
			switch (_p6.ctor) {
				case 'Under':
					return 'underline';
				case 'Over':
					return 'overline';
				default:
					return 'line-through';
			}
		}();
		return A3(_evancz$elm_graphics$Text$Meta, 'text-decoration', decoration, text);
	});
var _evancz$elm_graphics$Text$style = F2(
	function (sty, text) {
		return A3(
			_evancz$elm_graphics$Text$maybeAdd,
			_evancz$elm_graphics$Text$height,
			sty.height,
			A3(
				_evancz$elm_graphics$Text$maybeAdd,
				_evancz$elm_graphics$Text$line,
				sty.line,
				(sty.italic ? _evancz$elm_graphics$Text$italic : _elm_lang$core$Basics$identity)(
					(sty.bold ? _evancz$elm_graphics$Text$bold : _elm_lang$core$Basics$identity)(
						A2(
							_evancz$elm_graphics$Text$typeface,
							sty.typeface,
							A2(_evancz$elm_graphics$Text$color, sty.color, text))))));
	});
var _evancz$elm_graphics$Text$Link = F2(
	function (a, b) {
		return {ctor: 'Link', _0: a, _1: b};
	});
var _evancz$elm_graphics$Text$link = _evancz$elm_graphics$Text$Link;
var _evancz$elm_graphics$Text$Append = F2(
	function (a, b) {
		return {ctor: 'Append', _0: a, _1: b};
	});
var _evancz$elm_graphics$Text$append = _evancz$elm_graphics$Text$Append;
var _evancz$elm_graphics$Text$Str = function (a) {
	return {ctor: 'Str', _0: a};
};
var _evancz$elm_graphics$Text$fromString = _evancz$elm_graphics$Text$Str;
var _evancz$elm_graphics$Text$empty = _evancz$elm_graphics$Text$fromString('');
var _evancz$elm_graphics$Text$concat = function (texts) {
	return A3(_elm_lang$core$List$foldr, _evancz$elm_graphics$Text$append, _evancz$elm_graphics$Text$empty, texts);
};
var _evancz$elm_graphics$Text$join = F2(
	function (seperator, texts) {
		return _evancz$elm_graphics$Text$concat(
			A2(_elm_lang$core$List$intersperse, seperator, texts));
	});
var _evancz$elm_graphics$Text$Through = {ctor: 'Through'};
var _evancz$elm_graphics$Text$Over = {ctor: 'Over'};
var _evancz$elm_graphics$Text$Under = {ctor: 'Under'};

var _evancz$elm_graphics$Element$justified = _evancz$elm_graphics$Native_Element.block('justify');
var _evancz$elm_graphics$Element$centered = _evancz$elm_graphics$Native_Element.block('center');
var _evancz$elm_graphics$Element$rightAligned = _evancz$elm_graphics$Native_Element.block('right');
var _evancz$elm_graphics$Element$leftAligned = _evancz$elm_graphics$Native_Element.block('left');
var _evancz$elm_graphics$Element$show = function (value) {
	return _evancz$elm_graphics$Element$leftAligned(
		_evancz$elm_graphics$Text$monospace(
			_evancz$elm_graphics$Text$fromString(
				_elm_lang$core$Basics$toString(value))));
};
var _evancz$elm_graphics$Element$newElement = _evancz$elm_graphics$Native_Element.newElement;
var _evancz$elm_graphics$Element$sizeOf = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1._0;
	return {ctor: '_Tuple2', _0: _p2.props.width, _1: _p2.props.height};
};
var _evancz$elm_graphics$Element$heightOf = function (_p3) {
	var _p4 = _p3;
	return _p4._0.props.height;
};
var _evancz$elm_graphics$Element$widthOf = function (_p5) {
	var _p6 = _p5;
	return _p6._0.props.width;
};
var _evancz$elm_graphics$Element$toHtml = _evancz$elm_graphics$Native_Element.toHtml;
var _evancz$elm_graphics$Element$Properties = F6(
	function (a, b, c, d, e, f) {
		return {width: a, height: b, opacity: c, color: d, href: e, tag: f};
	});
var _evancz$elm_graphics$Element$RawPosition = F4(
	function (a, b, c, d) {
		return {horizontal: a, vertical: b, x: c, y: d};
	});
var _evancz$elm_graphics$Element$Element_elm_builtin = function (a) {
	return {ctor: 'Element_elm_builtin', _0: a};
};
var _evancz$elm_graphics$Element$width = F2(
	function (newWidth, _p7) {
		var _p8 = _p7;
		var _p11 = _p8._0.props;
		var _p10 = _p8._0.element;
		var newHeight = function () {
			var _p9 = _p10;
			switch (_p9.ctor) {
				case 'Image':
					return _elm_lang$core$Basics$round(
						(_elm_lang$core$Basics$toFloat(_p9._2) / _elm_lang$core$Basics$toFloat(_p9._1)) * _elm_lang$core$Basics$toFloat(newWidth));
				case 'RawHtml':
					return _elm_lang$core$Tuple$second(
						A2(_evancz$elm_graphics$Native_Element.htmlHeight, newWidth, _p10));
				default:
					return _p11.height;
			}
		}();
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p10,
				props: _elm_lang$core$Native_Utils.update(
					_p11,
					{width: newWidth, height: newHeight})
			});
	});
var _evancz$elm_graphics$Element$height = F2(
	function (newHeight, _p12) {
		var _p13 = _p12;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p13._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p13._0.props,
					{height: newHeight})
			});
	});
var _evancz$elm_graphics$Element$size = F3(
	function (w, h, e) {
		return A2(
			_evancz$elm_graphics$Element$height,
			h,
			A2(_evancz$elm_graphics$Element$width, w, e));
	});
var _evancz$elm_graphics$Element$opacity = F2(
	function (givenOpacity, _p14) {
		var _p15 = _p14;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p15._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p15._0.props,
					{opacity: givenOpacity})
			});
	});
var _evancz$elm_graphics$Element$color = F2(
	function (clr, _p16) {
		var _p17 = _p16;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p17._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p17._0.props,
					{
						color: _elm_lang$core$Maybe$Just(clr)
					})
			});
	});
var _evancz$elm_graphics$Element$tag = F2(
	function (name, _p18) {
		var _p19 = _p18;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p19._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p19._0.props,
					{tag: name})
			});
	});
var _evancz$elm_graphics$Element$link = F2(
	function (href, _p20) {
		var _p21 = _p20;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p21._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p21._0.props,
					{href: href})
			});
	});
var _evancz$elm_graphics$Element$Custom = {ctor: 'Custom'};
var _evancz$elm_graphics$Element$RawHtml = {ctor: 'RawHtml'};
var _evancz$elm_graphics$Element$Spacer = {ctor: 'Spacer'};
var _evancz$elm_graphics$Element$spacer = F2(
	function (w, h) {
		return A3(_evancz$elm_graphics$Element$newElement, w, h, _evancz$elm_graphics$Element$Spacer);
	});
var _evancz$elm_graphics$Element$empty = A2(_evancz$elm_graphics$Element$spacer, 0, 0);
var _evancz$elm_graphics$Element$Flow = F2(
	function (a, b) {
		return {ctor: 'Flow', _0: a, _1: b};
	});
var _evancz$elm_graphics$Element$flow = F2(
	function (dir, es) {
		var newFlow = F2(
			function (w, h) {
				return A3(
					_evancz$elm_graphics$Element$newElement,
					w,
					h,
					A2(_evancz$elm_graphics$Element$Flow, dir, es));
			});
		var maxOrZero = function (list) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				_elm_lang$core$List$maximum(list));
		};
		var hs = A2(_elm_lang$core$List$map, _evancz$elm_graphics$Element$heightOf, es);
		var ws = A2(_elm_lang$core$List$map, _evancz$elm_graphics$Element$widthOf, es);
		if (_elm_lang$core$Native_Utils.eq(
			es,
			{ctor: '[]'})) {
			return _evancz$elm_graphics$Element$empty;
		} else {
			var _p22 = dir;
			switch (_p22.ctor) {
				case 'DUp':
					return A2(
						newFlow,
						maxOrZero(ws),
						_elm_lang$core$List$sum(hs));
				case 'DDown':
					return A2(
						newFlow,
						maxOrZero(ws),
						_elm_lang$core$List$sum(hs));
				case 'DLeft':
					return A2(
						newFlow,
						_elm_lang$core$List$sum(ws),
						maxOrZero(hs));
				case 'DRight':
					return A2(
						newFlow,
						_elm_lang$core$List$sum(ws),
						maxOrZero(hs));
				case 'DIn':
					return A2(
						newFlow,
						maxOrZero(ws),
						maxOrZero(hs));
				default:
					return A2(
						newFlow,
						maxOrZero(ws),
						maxOrZero(hs));
			}
		}
	});
var _evancz$elm_graphics$Element$Container = F2(
	function (a, b) {
		return {ctor: 'Container', _0: a, _1: b};
	});
var _evancz$elm_graphics$Element$container = F4(
	function (w, h, _p23, e) {
		var _p24 = _p23;
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A2(_evancz$elm_graphics$Element$Container, _p24._0, e));
	});
var _evancz$elm_graphics$Element$Image = F4(
	function (a, b, c, d) {
		return {ctor: 'Image', _0: a, _1: b, _2: c, _3: d};
	});
var _evancz$elm_graphics$Element$Tiled = {ctor: 'Tiled'};
var _evancz$elm_graphics$Element$tiledImage = F3(
	function (w, h, src) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A4(_evancz$elm_graphics$Element$Image, _evancz$elm_graphics$Element$Tiled, w, h, src));
	});
var _evancz$elm_graphics$Element$Cropped = function (a) {
	return {ctor: 'Cropped', _0: a};
};
var _evancz$elm_graphics$Element$croppedImage = F4(
	function (pos, w, h, src) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A4(
				_evancz$elm_graphics$Element$Image,
				_evancz$elm_graphics$Element$Cropped(pos),
				w,
				h,
				src));
	});
var _evancz$elm_graphics$Element$Fitted = {ctor: 'Fitted'};
var _evancz$elm_graphics$Element$fittedImage = F3(
	function (w, h, src) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A4(_evancz$elm_graphics$Element$Image, _evancz$elm_graphics$Element$Fitted, w, h, src));
	});
var _evancz$elm_graphics$Element$Plain = {ctor: 'Plain'};
var _evancz$elm_graphics$Element$image = F3(
	function (w, h, src) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A4(_evancz$elm_graphics$Element$Image, _evancz$elm_graphics$Element$Plain, w, h, src));
	});
var _evancz$elm_graphics$Element$N = {ctor: 'N'};
var _evancz$elm_graphics$Element$Z = {ctor: 'Z'};
var _evancz$elm_graphics$Element$P = {ctor: 'P'};
var _evancz$elm_graphics$Element$Relative = function (a) {
	return {ctor: 'Relative', _0: a};
};
var _evancz$elm_graphics$Element$relative = _evancz$elm_graphics$Element$Relative;
var _evancz$elm_graphics$Element$Absolute = function (a) {
	return {ctor: 'Absolute', _0: a};
};
var _evancz$elm_graphics$Element$absolute = _evancz$elm_graphics$Element$Absolute;
var _evancz$elm_graphics$Element$Position = function (a) {
	return {ctor: 'Position', _0: a};
};
var _evancz$elm_graphics$Element$middle = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$Z,
		vertical: _evancz$elm_graphics$Element$Z,
		x: _evancz$elm_graphics$Element$Relative(0.5),
		y: _evancz$elm_graphics$Element$Relative(0.5)
	});
var _evancz$elm_graphics$Element$topLeft = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$N,
		vertical: _evancz$elm_graphics$Element$P,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$topRight = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$P,
		vertical: _evancz$elm_graphics$Element$P,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$bottomLeft = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$N,
		vertical: _evancz$elm_graphics$Element$N,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$bottomRight = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$P,
		vertical: _evancz$elm_graphics$Element$N,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$midLeft = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$N,
		vertical: _evancz$elm_graphics$Element$Z,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Relative(0.5)
	});
var _evancz$elm_graphics$Element$midRight = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$P,
		vertical: _evancz$elm_graphics$Element$Z,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Relative(0.5)
	});
var _evancz$elm_graphics$Element$midTop = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$Z,
		vertical: _evancz$elm_graphics$Element$P,
		x: _evancz$elm_graphics$Element$Relative(0.5),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$midBottom = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$Z,
		vertical: _evancz$elm_graphics$Element$N,
		x: _evancz$elm_graphics$Element$Relative(0.5),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$middleAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$Z, vertical: _evancz$elm_graphics$Element$Z, x: x, y: y});
	});
var _evancz$elm_graphics$Element$topLeftAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$N, vertical: _evancz$elm_graphics$Element$P, x: x, y: y});
	});
var _evancz$elm_graphics$Element$topRightAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$P, vertical: _evancz$elm_graphics$Element$P, x: x, y: y});
	});
var _evancz$elm_graphics$Element$bottomLeftAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$N, vertical: _evancz$elm_graphics$Element$N, x: x, y: y});
	});
var _evancz$elm_graphics$Element$bottomRightAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$P, vertical: _evancz$elm_graphics$Element$N, x: x, y: y});
	});
var _evancz$elm_graphics$Element$midLeftAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$N, vertical: _evancz$elm_graphics$Element$Z, x: x, y: y});
	});
var _evancz$elm_graphics$Element$midRightAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$P, vertical: _evancz$elm_graphics$Element$Z, x: x, y: y});
	});
var _evancz$elm_graphics$Element$midTopAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$Z, vertical: _evancz$elm_graphics$Element$P, x: x, y: y});
	});
var _evancz$elm_graphics$Element$midBottomAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$Z, vertical: _evancz$elm_graphics$Element$N, x: x, y: y});
	});
var _evancz$elm_graphics$Element$DOut = {ctor: 'DOut'};
var _evancz$elm_graphics$Element$layers = function (es) {
	var hs = A2(_elm_lang$core$List$map, _evancz$elm_graphics$Element$heightOf, es);
	var ws = A2(_elm_lang$core$List$map, _evancz$elm_graphics$Element$widthOf, es);
	return A3(
		_evancz$elm_graphics$Element$newElement,
		A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$maximum(ws)),
		A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$maximum(hs)),
		A2(_evancz$elm_graphics$Element$Flow, _evancz$elm_graphics$Element$DOut, es));
};
var _evancz$elm_graphics$Element$outward = _evancz$elm_graphics$Element$DOut;
var _evancz$elm_graphics$Element$DIn = {ctor: 'DIn'};
var _evancz$elm_graphics$Element$inward = _evancz$elm_graphics$Element$DIn;
var _evancz$elm_graphics$Element$DRight = {ctor: 'DRight'};
var _evancz$elm_graphics$Element$right = _evancz$elm_graphics$Element$DRight;
var _evancz$elm_graphics$Element$beside = F2(
	function (lft, rht) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			_evancz$elm_graphics$Element$widthOf(lft) + _evancz$elm_graphics$Element$widthOf(rht),
			A2(
				_elm_lang$core$Basics$max,
				_evancz$elm_graphics$Element$heightOf(lft),
				_evancz$elm_graphics$Element$heightOf(rht)),
			A2(
				_evancz$elm_graphics$Element$Flow,
				_evancz$elm_graphics$Element$right,
				{
					ctor: '::',
					_0: lft,
					_1: {
						ctor: '::',
						_0: rht,
						_1: {ctor: '[]'}
					}
				}));
	});
var _evancz$elm_graphics$Element$DLeft = {ctor: 'DLeft'};
var _evancz$elm_graphics$Element$left = _evancz$elm_graphics$Element$DLeft;
var _evancz$elm_graphics$Element$DDown = {ctor: 'DDown'};
var _evancz$elm_graphics$Element$above = F2(
	function (hi, lo) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			A2(
				_elm_lang$core$Basics$max,
				_evancz$elm_graphics$Element$widthOf(hi),
				_evancz$elm_graphics$Element$widthOf(lo)),
			_evancz$elm_graphics$Element$heightOf(hi) + _evancz$elm_graphics$Element$heightOf(lo),
			A2(
				_evancz$elm_graphics$Element$Flow,
				_evancz$elm_graphics$Element$DDown,
				{
					ctor: '::',
					_0: hi,
					_1: {
						ctor: '::',
						_0: lo,
						_1: {ctor: '[]'}
					}
				}));
	});
var _evancz$elm_graphics$Element$below = F2(
	function (lo, hi) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			A2(
				_elm_lang$core$Basics$max,
				_evancz$elm_graphics$Element$widthOf(hi),
				_evancz$elm_graphics$Element$widthOf(lo)),
			_evancz$elm_graphics$Element$heightOf(hi) + _evancz$elm_graphics$Element$heightOf(lo),
			A2(
				_evancz$elm_graphics$Element$Flow,
				_evancz$elm_graphics$Element$DDown,
				{
					ctor: '::',
					_0: hi,
					_1: {
						ctor: '::',
						_0: lo,
						_1: {ctor: '[]'}
					}
				}));
	});
var _evancz$elm_graphics$Element$down = _evancz$elm_graphics$Element$DDown;
var _evancz$elm_graphics$Element$DUp = {ctor: 'DUp'};
var _evancz$elm_graphics$Element$up = _evancz$elm_graphics$Element$DUp;

var _evancz$elm_graphics$Native_Collage = function()
{

function setStrokeStyle(ctx, style)
{
	ctx.lineWidth = style.width;

	var cap = style.cap.ctor;
	ctx.lineCap = cap === 'Flat'
		? 'butt'
		: cap === 'Round'
			? 'round'
			: 'square';

	var join = style.join.ctor;
	ctx.lineJoin = join === 'Smooth'
		? 'round'
		: join === 'Sharp'
			? 'miter'
			: 'bevel';

	ctx.miterLimit = style.join._0 || 10;
	ctx.strokeStyle = _evancz$elm_graphics$Text$colorToCss(style.color);
}

function setFillStyle(redo, ctx, style)
{
	var sty = style.ctor;
	ctx.fillStyle = sty === 'Solid'
		? _evancz$elm_graphics$Text$colorToCss(style._0)
		: sty === 'Texture'
			? texture(redo, ctx, style._0)
			: gradient(ctx, style._0);
}

function trace(ctx, path)
{
	var points = _elm_lang$core$Native_List.toArray(path);
	var i = points.length - 1;
	if (i <= 0)
	{
		return;
	}
	ctx.moveTo(points[i]._0, points[i]._1);
	while (i--)
	{
		ctx.lineTo(points[i]._0, points[i]._1);
	}
	if (path.closed)
	{
		i = points.length - 1;
		ctx.lineTo(points[i]._0, points[i]._1);
	}
}

function line(ctx, style, path)
{
	if (style.dashing.ctor === '[]')
	{
		trace(ctx, path);
	}
	else
	{
		customLineHelp(ctx, style, path);
	}
	ctx.scale(1, -1);
	ctx.stroke();
}

function customLineHelp(ctx, style, path)
{
	var points = _elm_lang$core$Native_List.toArray(path);
	if (path.closed)
	{
		points.push(points[0]);
	}
	var pattern = _elm_lang$core$Native_List.toArray(style.dashing);
	var i = points.length - 1;
	if (i <= 0)
	{
		return;
	}
	var x0 = points[i]._0, y0 = points[i]._1;
	var x1 = 0, y1 = 0, dx = 0, dy = 0, remaining = 0;
	var pindex = 0, plen = pattern.length;
	var draw = true, segmentLength = pattern[0];
	ctx.moveTo(x0, y0);
	while (i--)
	{
		x1 = points[i]._0;
		y1 = points[i]._1;
		dx = x1 - x0;
		dy = y1 - y0;
		remaining = Math.sqrt(dx * dx + dy * dy);
		while (segmentLength <= remaining)
		{
			x0 += dx * segmentLength / remaining;
			y0 += dy * segmentLength / remaining;
			ctx[draw ? 'lineTo' : 'moveTo'](x0, y0);
			// update starting position
			dx = x1 - x0;
			dy = y1 - y0;
			remaining = Math.sqrt(dx * dx + dy * dy);
			// update pattern
			draw = !draw;
			pindex = (pindex + 1) % plen;
			segmentLength = pattern[pindex];
		}
		if (remaining > 0)
		{
			ctx[draw ? 'lineTo' : 'moveTo'](x1, y1);
			segmentLength -= remaining;
		}
		x0 = x1;
		y0 = y1;
	}
}

function drawLine(ctx, style, path)
{
	setStrokeStyle(ctx, style);
	return line(ctx, style, path);
}

function texture(redo, ctx, src)
{
	var img = new Image();
	img.src = src;
	img.onload = redo;
	return ctx.createPattern(img, 'repeat');
}

function gradient(ctx, grad)
{
	var g;
	var stops = [];
	if (grad.ctor === 'Linear')
	{
		var p0 = grad._0, p1 = grad._1;
		g = ctx.createLinearGradient(p0._0, -p0._1, p1._0, -p1._1);
		stops = _elm_lang$core$Native_List.toArray(grad._2);
	}
	else
	{
		var p0 = grad._0, p2 = grad._2;
		g = ctx.createRadialGradient(p0._0, -p0._1, grad._1, p2._0, -p2._1, grad._3);
		stops = _elm_lang$core$Native_List.toArray(grad._4);
	}
	var len = stops.length;
	for (var i = 0; i < len; ++i)
	{
		var stop = stops[i];
		g.addColorStop(stop._0, _evancz$elm_graphics$Text$colorToCss(stop._1));
	}
	return g;
}

function drawShape(redo, ctx, style, path)
{
	trace(ctx, path);
	setFillStyle(redo, ctx, style);
	ctx.scale(1, -1);
	ctx.fill();
}


// TEXT RENDERING

function fillText(redo, ctx, text)
{
	drawText(ctx, text, ctx.fillText);
}

function strokeText(redo, ctx, style, text)
{
	setStrokeStyle(ctx, style);
	// Use native canvas API for dashes only for text for now
	// Degrades to non-dashed on IE 9 + 10
	if (style.dashing.ctor !== '[]' && ctx.setLineDash)
	{
		var pattern = _elm_lang$core$Native_List.toArray(style.dashing);
		ctx.setLineDash(pattern);
	}
	drawText(ctx, text, ctx.strokeText);
}

function drawText(ctx, text, canvasDrawFn)
{
	var textChunks = chunkText(copy(defaultFacts), text);

	var totalWidth = 0;
	var maxHeight = 0;
	var numChunks = textChunks.length;

	ctx.scale(1,-1);

	for (var i = numChunks; i--; )
	{
		var chunk = textChunks[i];
		ctx.font = chunk.font;
		var metrics = ctx.measureText(chunk.text);
		chunk.width = metrics.width;
		totalWidth += chunk.width;
		if (chunk.height > maxHeight)
		{
			maxHeight = chunk.height;
		}
	}

	var x = -totalWidth / 2.0;
	for (var i = 0; i < numChunks; ++i)
	{
		var chunk = textChunks[i];
		ctx.font = chunk.font;
		ctx.fillStyle = chunk.color;
		canvasDrawFn.call(ctx, chunk.text, x, maxHeight / 2);
		x += chunk.width;
	}
}

function toFont(facts)
{
	return facts['font-style']
		+ ' ' + facts['font-variant']
		+ ' ' + facts['font-weight']
		+ ' ' + facts['font-size']
		+ ' ' + facts['font-family'];
}


// Convert the object returned by the text module
// into something we can use for styling canvas text
function chunkText(facts, text)
{
	switch (text.ctor)
	{
		case 'Append':
			var leftChunks = chunkText(copy(facts), text._0);
			var rightChunks = chunkText(copy(facts), text._1);
			return leftChunks.concat(rightChunks);

		case 'Str':
			return [{
				text: text._0,
				color: facts['color'],
				height: facts['font-size'].slice(0, -2) | 0,
				font: toFont(facts)
			}];

		case 'Link':
			return chunkText(facts, text._1);

		case 'Meta':
			facts[text._0] = text._1;
			return chunkText(facts, text._2);
	}
}

function copy(facts)
{
	return {
		'font-style': facts['font-style'],
		'font-variant': facts['font-variant'],
		'font-weight': facts['font-weight'],
		'font-size': facts['font-size'],
		'font-family': facts['font-family'],
		'color': facts['color']
	};
}

var defaultFacts = {
	'font-style': 'normal',
	'font-variant': 'normal',
	'font-weight': 'normal',
	'font-size': '12px',
	'font-family': 'sans-serif',
	'color': 'black'
};


// IMAGES

function drawImage(redo, ctx, form)
{
	var img = new Image();
	img.onload = redo;
	img.src = form._3;
	var w = form._0,
		h = form._1,
		pos = form._2,
		srcX = pos._0,
		srcY = pos._1,
		srcW = w,
		srcH = h,
		destX = -w / 2,
		destY = -h / 2,
		destW = w,
		destH = h;

	ctx.scale(1, -1);
	ctx.drawImage(img, srcX, srcY, srcW, srcH, destX, destY, destW, destH);
}

function renderForm(redo, ctx, form)
{
	ctx.save();

	var x = form.x,
		y = form.y,
		theta = form.theta,
		scale = form.scale;

	if (x !== 0 || y !== 0)
	{
		ctx.translate(x, y);
	}
	if (theta !== 0)
	{
		ctx.rotate(theta % (Math.PI * 2));
	}
	if (scale !== 1)
	{
		ctx.scale(scale, scale);
	}
	if (form.alpha !== 1)
	{
		ctx.globalAlpha = ctx.globalAlpha * form.alpha;
	}

	ctx.beginPath();
	var f = form.form;
	switch (f.ctor)
	{
		case 'FPath':
			drawLine(ctx, f._0, f._1);
			break;

		case 'FImage':
			drawImage(redo, ctx, f);
			break;

		case 'FShape':
			if (f._0.ctor === 'Line')
			{
				f._1.closed = true;
				drawLine(ctx, f._0._0, f._1);
			}
			else
			{
				drawShape(redo, ctx, f._0._0, f._1);
			}
			break;

		case 'FText':
			fillText(redo, ctx, f._0);
			break;

		case 'FOutlinedText':
			strokeText(redo, ctx, f._0, f._1);
			break;
	}
	ctx.restore();
}

function formToMatrix(form)
{
	var scale = form.scale;
	var matrix = A6( _evancz$elm_graphics$Transform$matrix, scale, 0, 0, scale, form.x, form.y );

	var theta = form.theta;
	if (theta !== 0)
	{
		matrix = A2(
			_evancz$elm_graphics$Transform$multiply,
			matrix,
			_evancz$elm_graphics$Transform$rotation(theta)
		);
	}

   return matrix;
}

function str(n)
{
	if (n < 0.00001 && n > -0.00001)
	{
		return 0;
	}
	return n;
}

function makeTransform(w, h, form, matrices)
{
	var props = form.form._0._0.props;
	var m = A6(
		_evancz$elm_graphics$Transform$matrix,
		1,
		0,
		0,
		-1,
		(w - props.width ) / 2,
		(h - props.height) / 2
	);

	var len = matrices.length;
	for (var i = 0; i < len; ++i)
	{
		m = A2( _evancz$elm_graphics$Transform$multiply, m, matrices[i] );
	}
	m = A2( _evancz$elm_graphics$Transform$multiply, m, formToMatrix(form) );

	return 'matrix(' +
		str( m[0]) + ', ' + str( m[3]) + ', ' +
		str(-m[1]) + ', ' + str(-m[4]) + ', ' +
		str( m[2]) + ', ' + str( m[5]) + ')';
}

function stepperHelp(list)
{
	var arr = _elm_lang$core$Native_List.toArray(list);
	var i = 0;
	function peekNext()
	{
		return i < arr.length ? arr[i]._0.form.ctor : '';
	}
	// assumes that there is a next element
	function next()
	{
		var out = arr[i]._0;
		++i;
		return out;
	}
	return {
		peekNext: peekNext,
		next: next
	};
}

function formStepper(forms)
{
	var ps = [stepperHelp(forms)];
	var matrices = [];
	var alphas = [];
	function peekNext()
	{
		var len = ps.length;
		var formType = '';
		for (var i = 0; i < len; ++i )
		{
			if (formType = ps[i].peekNext()) return formType;
		}
		return '';
	}
	// assumes that there is a next element
	function next(ctx)
	{
		while (!ps[0].peekNext())
		{
			ps.shift();
			matrices.pop();
			alphas.shift();
			if (ctx)
			{
				ctx.restore();
			}
		}
		var out = ps[0].next();
		var f = out.form;
		if (f.ctor === 'FGroup')
		{
			ps.unshift(stepperHelp(f._1));
			var m = A2(_evancz$elm_graphics$Transform$multiply, f._0, formToMatrix(out));
			ctx.save();
			ctx.transform(m[0], m[3], m[1], m[4], m[2], m[5]);
			matrices.push(m);

			var alpha = (alphas[0] || 1) * out.alpha;
			alphas.unshift(alpha);
			ctx.globalAlpha = alpha;
		}
		return out;
	}
	function transforms()
	{
		return matrices;
	}
	function alpha()
	{
		return alphas[0] || 1;
	}
	return {
		peekNext: peekNext,
		next: next,
		transforms: transforms,
		alpha: alpha
	};
}

function makeCanvas(w, h)
{
	var canvas = _evancz$elm_graphics$Native_Element.createNode('canvas');
	canvas.style.width  = w + 'px';
	canvas.style.height = h + 'px';
	canvas.style.display = 'block';
	canvas.style.position = 'absolute';
	var ratio = window.devicePixelRatio || 1;
	canvas.width  = w * ratio;
	canvas.height = h * ratio;
	return canvas;
}

function render(model)
{
	var div = _evancz$elm_graphics$Native_Element.createNode('div');
	div.style.overflow = 'hidden';
	div.style.position = 'relative';
	update(div, model, model);
	return div;
}

function nodeStepper(w, h, div)
{
	var kids = div.childNodes;
	var i = 0;
	var ratio = window.devicePixelRatio || 1;

	function transform(transforms, ctx)
	{
		ctx.translate( w / 2 * ratio, h / 2 * ratio );
		ctx.scale( ratio, -ratio );
		var len = transforms.length;
		for (var i = 0; i < len; ++i)
		{
			var m = transforms[i];
			ctx.save();
			ctx.transform(m[0], m[3], m[1], m[4], m[2], m[5]);
		}
		return ctx;
	}
	function nextContext(transforms)
	{
		while (i < kids.length)
		{
			var node = kids[i];
			if (node.getContext)
			{
				node.width = w * ratio;
				node.height = h * ratio;
				node.style.width = w + 'px';
				node.style.height = h + 'px';
				++i;
				return transform(transforms, node.getContext('2d'));
			}
			div.removeChild(node);
		}
		var canvas = makeCanvas(w, h);
		div.appendChild(canvas);
		// we have added a new node, so we must step our position
		++i;
		return transform(transforms, canvas.getContext('2d'));
	}
	function addElement(matrices, alpha, form)
	{
		var kid = kids[i];
		var elem = form.form._0;

		var node = (!kid || kid.getContext)
			? _evancz$elm_graphics$Native_Element.render(elem)
			: _evancz$elm_graphics$Native_Element.update(kid, kid.oldElement, elem);

		node.style.position = 'absolute';
		node.style.opacity = alpha * form.alpha * elem._0.props.opacity;
		_evancz$elm_graphics$Native_Element.addTransform(node.style, makeTransform(w, h, form, matrices));
		node.oldElement = elem;
		++i;
		if (!kid)
		{
			div.appendChild(node);
		}
		else
		{
			div.insertBefore(node, kid);
		}
	}
	function clearRest()
	{
		while (i < kids.length)
		{
			div.removeChild(kids[i]);
		}
	}
	return {
		nextContext: nextContext,
		addElement: addElement,
		clearRest: clearRest
	};
}


function update(div, _, model)
{
	var w = model.w;
	var h = model.h;

	var forms = formStepper(model.forms);
	var nodes = nodeStepper(w, h, div);
	var ctx = null;
	var formType = '';

	while (formType = forms.peekNext())
	{
		// make sure we have context if we need it
		if (ctx === null && formType !== 'FElement')
		{
			ctx = nodes.nextContext(forms.transforms());
			ctx.globalAlpha = forms.alpha();
		}

		var form = forms.next(ctx);
		// if it is FGroup, all updates are made within formStepper when next is called.
		if (formType === 'FElement')
		{
			// update or insert an element, get a new context
			nodes.addElement(forms.transforms(), forms.alpha(), form);
			ctx = null;
		}
		else if (formType !== 'FGroup')
		{
			renderForm(function() { update(div, model, model); }, ctx, form);
		}
	}
	nodes.clearRest();
	return div;
}


function collage(w, h, forms)
{
	return A3(_evancz$elm_graphics$Native_Element.newElement, w, h, {
		ctor: 'Custom',
		type: 'Collage',
		render: render,
		update: update,
		model: {w: w, h: h, forms: forms}
	});
}

return {
	collage: F3(collage)
};

}();

var _evancz$elm_graphics$Native_Transform = function()
{

var A;
if (typeof Float32Array === 'undefined')
{
	A = function(arr)
	{
		this.length = arr.length;
		this[0] = arr[0];
		this[1] = arr[1];
		this[2] = arr[2];
		this[3] = arr[3];
		this[4] = arr[4];
		this[5] = arr[5];
	};
}
else
{
	A = Float32Array;
}

// layout of matrix in an array is
//
//   | m11 m12 dx |
//   | m21 m22 dy |
//   |  0   0   1 |
//
//  new A([ m11, m12, dx, m21, m22, dy ])

var identity = new A([1, 0, 0, 0, 1, 0]);

function matrix(m11, m12, m21, m22, dx, dy)
{
	return new A([m11, m12, dx, m21, m22, dy]);
}

function rotation(t)
{
	var c = Math.cos(t);
	var s = Math.sin(t);
	return new A([c, -s, 0, s, c, 0]);
}

function rotate(t, m)
{
	var c = Math.cos(t);
	var s = Math.sin(t);
	var m11 = m[0], m12 = m[1], m21 = m[3], m22 = m[4];
	return new A([
		m11 * c + m12 * s,
		-m11 * s + m12 * c,
		m[2],
		m21 * c + m22 * s,
		-m21 * s + m22 * c,
		m[5]
	]);
}

function multiply(m, n)
{
	var m11 = m[0], m12 = m[1], m21 = m[3], m22 = m[4], mdx = m[2], mdy = m[5];
	var n11 = n[0], n12 = n[1], n21 = n[3], n22 = n[4], ndx = n[2], ndy = n[5];
	return new A([
		m11 * n11 + m12 * n21,
		m11 * n12 + m12 * n22,
		m11 * ndx + m12 * ndy + mdx,
		m21 * n11 + m22 * n21,
		m21 * n12 + m22 * n22,
		m21 * ndx + m22 * ndy + mdy
	]);
}

return {
	identity: identity,
	matrix: F6(matrix),
	rotation: rotation,
	multiply: F2(multiply)
};

}();

var _evancz$elm_graphics$Transform$multiply = _evancz$elm_graphics$Native_Transform.multiply;
var _evancz$elm_graphics$Transform$rotation = _evancz$elm_graphics$Native_Transform.rotation;
var _evancz$elm_graphics$Transform$matrix = _evancz$elm_graphics$Native_Transform.matrix;
var _evancz$elm_graphics$Transform$translation = F2(
	function (x, y) {
		return A6(_evancz$elm_graphics$Transform$matrix, 1, 0, 0, 1, x, y);
	});
var _evancz$elm_graphics$Transform$scale = function (s) {
	return A6(_evancz$elm_graphics$Transform$matrix, s, 0, 0, s, 0, 0);
};
var _evancz$elm_graphics$Transform$scaleX = function (x) {
	return A6(_evancz$elm_graphics$Transform$matrix, x, 0, 0, 1, 0, 0);
};
var _evancz$elm_graphics$Transform$scaleY = function (y) {
	return A6(_evancz$elm_graphics$Transform$matrix, 1, 0, 0, y, 0, 0);
};
var _evancz$elm_graphics$Transform$identity = _evancz$elm_graphics$Native_Transform.identity;
var _evancz$elm_graphics$Transform$Transform = {ctor: 'Transform'};

var _evancz$elm_graphics$Collage$collage = _evancz$elm_graphics$Native_Collage.collage;
var _evancz$elm_graphics$Collage$LineStyle = F6(
	function (a, b, c, d, e, f) {
		return {color: a, width: b, cap: c, join: d, dashing: e, dashOffset: f};
	});
var _evancz$elm_graphics$Collage$Form_elm_builtin = function (a) {
	return {ctor: 'Form_elm_builtin', _0: a};
};
var _evancz$elm_graphics$Collage$form = function (f) {
	return _evancz$elm_graphics$Collage$Form_elm_builtin(
		{theta: 0, scale: 1, x: 0, y: 0, alpha: 1, form: f});
};
var _evancz$elm_graphics$Collage$move = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p3 = _p0;
		var _p4 = _p3._0;
		return _evancz$elm_graphics$Collage$Form_elm_builtin(
			_elm_lang$core$Native_Utils.update(
				_p4,
				{x: _p4.x + _p2._0, y: _p4.y + _p2._1}));
	});
var _evancz$elm_graphics$Collage$moveX = F2(
	function (x, _p5) {
		var _p6 = _p5;
		var _p7 = _p6._0;
		return _evancz$elm_graphics$Collage$Form_elm_builtin(
			_elm_lang$core$Native_Utils.update(
				_p7,
				{x: _p7.x + x}));
	});
var _evancz$elm_graphics$Collage$moveY = F2(
	function (y, _p8) {
		var _p9 = _p8;
		var _p10 = _p9._0;
		return _evancz$elm_graphics$Collage$Form_elm_builtin(
			_elm_lang$core$Native_Utils.update(
				_p10,
				{y: _p10.y + y}));
	});
var _evancz$elm_graphics$Collage$scale = F2(
	function (s, _p11) {
		var _p12 = _p11;
		var _p13 = _p12._0;
		return _evancz$elm_graphics$Collage$Form_elm_builtin(
			_elm_lang$core$Native_Utils.update(
				_p13,
				{scale: _p13.scale * s}));
	});
var _evancz$elm_graphics$Collage$rotate = F2(
	function (t, _p14) {
		var _p15 = _p14;
		var _p16 = _p15._0;
		return _evancz$elm_graphics$Collage$Form_elm_builtin(
			_elm_lang$core$Native_Utils.update(
				_p16,
				{theta: _p16.theta + t}));
	});
var _evancz$elm_graphics$Collage$alpha = F2(
	function (a, _p17) {
		var _p18 = _p17;
		return _evancz$elm_graphics$Collage$Form_elm_builtin(
			_elm_lang$core$Native_Utils.update(
				_p18._0,
				{alpha: a}));
	});
var _evancz$elm_graphics$Collage$Grad = function (a) {
	return {ctor: 'Grad', _0: a};
};
var _evancz$elm_graphics$Collage$Texture = function (a) {
	return {ctor: 'Texture', _0: a};
};
var _evancz$elm_graphics$Collage$Solid = function (a) {
	return {ctor: 'Solid', _0: a};
};
var _evancz$elm_graphics$Collage$Padded = {ctor: 'Padded'};
var _evancz$elm_graphics$Collage$Round = {ctor: 'Round'};
var _evancz$elm_graphics$Collage$Flat = {ctor: 'Flat'};
var _evancz$elm_graphics$Collage$Clipped = {ctor: 'Clipped'};
var _evancz$elm_graphics$Collage$Sharp = function (a) {
	return {ctor: 'Sharp', _0: a};
};
var _evancz$elm_graphics$Collage$defaultLine = {
	color: _elm_lang$core$Color$black,
	width: 1,
	cap: _evancz$elm_graphics$Collage$Flat,
	join: _evancz$elm_graphics$Collage$Sharp(10),
	dashing: {ctor: '[]'},
	dashOffset: 0
};
var _evancz$elm_graphics$Collage$solid = function (clr) {
	return _elm_lang$core$Native_Utils.update(
		_evancz$elm_graphics$Collage$defaultLine,
		{color: clr});
};
var _evancz$elm_graphics$Collage$dashed = function (clr) {
	return _elm_lang$core$Native_Utils.update(
		_evancz$elm_graphics$Collage$defaultLine,
		{
			color: clr,
			dashing: {
				ctor: '::',
				_0: 8,
				_1: {
					ctor: '::',
					_0: 4,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _evancz$elm_graphics$Collage$dotted = function (clr) {
	return _elm_lang$core$Native_Utils.update(
		_evancz$elm_graphics$Collage$defaultLine,
		{
			color: clr,
			dashing: {
				ctor: '::',
				_0: 3,
				_1: {
					ctor: '::',
					_0: 3,
					_1: {ctor: '[]'}
				}
			}
		});
};
var _evancz$elm_graphics$Collage$Smooth = {ctor: 'Smooth'};
var _evancz$elm_graphics$Collage$FGroup = F2(
	function (a, b) {
		return {ctor: 'FGroup', _0: a, _1: b};
	});
var _evancz$elm_graphics$Collage$group = function (fs) {
	return _evancz$elm_graphics$Collage$form(
		A2(_evancz$elm_graphics$Collage$FGroup, _evancz$elm_graphics$Transform$identity, fs));
};
var _evancz$elm_graphics$Collage$groupTransform = F2(
	function (matrix, fs) {
		return _evancz$elm_graphics$Collage$form(
			A2(_evancz$elm_graphics$Collage$FGroup, matrix, fs));
	});
var _evancz$elm_graphics$Collage$FElement = function (a) {
	return {ctor: 'FElement', _0: a};
};
var _evancz$elm_graphics$Collage$toForm = function (e) {
	return _evancz$elm_graphics$Collage$form(
		_evancz$elm_graphics$Collage$FElement(e));
};
var _evancz$elm_graphics$Collage$FImage = F4(
	function (a, b, c, d) {
		return {ctor: 'FImage', _0: a, _1: b, _2: c, _3: d};
	});
var _evancz$elm_graphics$Collage$sprite = F4(
	function (w, h, pos, src) {
		return _evancz$elm_graphics$Collage$form(
			A4(_evancz$elm_graphics$Collage$FImage, w, h, pos, src));
	});
var _evancz$elm_graphics$Collage$FText = function (a) {
	return {ctor: 'FText', _0: a};
};
var _evancz$elm_graphics$Collage$text = function (t) {
	return _evancz$elm_graphics$Collage$form(
		_evancz$elm_graphics$Collage$FText(t));
};
var _evancz$elm_graphics$Collage$FOutlinedText = F2(
	function (a, b) {
		return {ctor: 'FOutlinedText', _0: a, _1: b};
	});
var _evancz$elm_graphics$Collage$outlinedText = F2(
	function (ls, t) {
		return _evancz$elm_graphics$Collage$form(
			A2(_evancz$elm_graphics$Collage$FOutlinedText, ls, t));
	});
var _evancz$elm_graphics$Collage$FShape = F2(
	function (a, b) {
		return {ctor: 'FShape', _0: a, _1: b};
	});
var _evancz$elm_graphics$Collage$FPath = F2(
	function (a, b) {
		return {ctor: 'FPath', _0: a, _1: b};
	});
var _evancz$elm_graphics$Collage$traced = F2(
	function (style, _p19) {
		var _p20 = _p19;
		return _evancz$elm_graphics$Collage$form(
			A2(_evancz$elm_graphics$Collage$FPath, style, _p20._0));
	});
var _evancz$elm_graphics$Collage$Fill = function (a) {
	return {ctor: 'Fill', _0: a};
};
var _evancz$elm_graphics$Collage$fill = F2(
	function (style, _p21) {
		var _p22 = _p21;
		return _evancz$elm_graphics$Collage$form(
			A2(
				_evancz$elm_graphics$Collage$FShape,
				_evancz$elm_graphics$Collage$Fill(style),
				_p22._0));
	});
var _evancz$elm_graphics$Collage$filled = F2(
	function (color, shape) {
		return A2(
			_evancz$elm_graphics$Collage$fill,
			_evancz$elm_graphics$Collage$Solid(color),
			shape);
	});
var _evancz$elm_graphics$Collage$textured = F2(
	function (src, shape) {
		return A2(
			_evancz$elm_graphics$Collage$fill,
			_evancz$elm_graphics$Collage$Texture(src),
			shape);
	});
var _evancz$elm_graphics$Collage$gradient = F2(
	function (grad, shape) {
		return A2(
			_evancz$elm_graphics$Collage$fill,
			_evancz$elm_graphics$Collage$Grad(grad),
			shape);
	});
var _evancz$elm_graphics$Collage$Line = function (a) {
	return {ctor: 'Line', _0: a};
};
var _evancz$elm_graphics$Collage$outlined = F2(
	function (style, _p23) {
		var _p24 = _p23;
		return _evancz$elm_graphics$Collage$form(
			A2(
				_evancz$elm_graphics$Collage$FShape,
				_evancz$elm_graphics$Collage$Line(style),
				_p24._0));
	});
var _evancz$elm_graphics$Collage$Path = function (a) {
	return {ctor: 'Path', _0: a};
};
var _evancz$elm_graphics$Collage$path = function (ps) {
	return _evancz$elm_graphics$Collage$Path(ps);
};
var _evancz$elm_graphics$Collage$segment = F2(
	function (p1, p2) {
		return _evancz$elm_graphics$Collage$Path(
			{
				ctor: '::',
				_0: p1,
				_1: {
					ctor: '::',
					_0: p2,
					_1: {ctor: '[]'}
				}
			});
	});
var _evancz$elm_graphics$Collage$Shape = function (a) {
	return {ctor: 'Shape', _0: a};
};
var _evancz$elm_graphics$Collage$polygon = function (points) {
	return _evancz$elm_graphics$Collage$Shape(points);
};
var _evancz$elm_graphics$Collage$rect = F2(
	function (w, h) {
		var hh = h / 2;
		var hw = w / 2;
		return _evancz$elm_graphics$Collage$Shape(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 0 - hw, _1: 0 - hh},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 0 - hw, _1: hh},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: hw, _1: hh},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: hw, _1: 0 - hh},
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _evancz$elm_graphics$Collage$square = function (n) {
	return A2(_evancz$elm_graphics$Collage$rect, n, n);
};
var _evancz$elm_graphics$Collage$oval = F2(
	function (w, h) {
		var hh = h / 2;
		var hw = w / 2;
		var n = 50;
		var t = (2 * _elm_lang$core$Basics$pi) / n;
		var f = function (i) {
			return {
				ctor: '_Tuple2',
				_0: hw * _elm_lang$core$Basics$cos(
					t * _elm_lang$core$Basics$toFloat(i)),
				_1: hh * _elm_lang$core$Basics$sin(
					t * _elm_lang$core$Basics$toFloat(i))
			};
		};
		return _evancz$elm_graphics$Collage$Shape(
			A2(
				_elm_lang$core$List$map,
				f,
				A2(_elm_lang$core$List$range, 0, n - 1)));
	});
var _evancz$elm_graphics$Collage$circle = function (r) {
	return A2(_evancz$elm_graphics$Collage$oval, 2 * r, 2 * r);
};
var _evancz$elm_graphics$Collage$ngon = F2(
	function (n, r) {
		var m = _elm_lang$core$Basics$toFloat(n);
		var t = (2 * _elm_lang$core$Basics$pi) / m;
		var f = function (i) {
			return {
				ctor: '_Tuple2',
				_0: r * _elm_lang$core$Basics$cos(
					t * _elm_lang$core$Basics$toFloat(i)),
				_1: r * _elm_lang$core$Basics$sin(
					t * _elm_lang$core$Basics$toFloat(i))
			};
		};
		return _evancz$elm_graphics$Collage$Shape(
			A2(
				_elm_lang$core$List$map,
				f,
				A2(_elm_lang$core$List$range, 0, n - 1)));
	});

var _elam03$elam03_github_io$Building$darkGrey = A4(_elm_lang$core$Color$rgba, 50, 50, 50, 0.75);
var _elam03$elam03_github_io$Building$glassWindowToForm = function (window) {
	return A2(
		_evancz$elm_graphics$Collage$move,
		{ctor: '_Tuple2', _0: window.x + (window.w / 2), _1: window.y + (window.h / 2)},
		A2(
			_evancz$elm_graphics$Collage$filled,
			_elam03$elam03_github_io$Building$darkGrey,
			A2(_evancz$elm_graphics$Collage$rect, window.w, window.h)));
};
var _elam03$elam03_github_io$Building$clearGrey = function () {
	var c = 90;
	return A4(_elm_lang$core$Color$rgba, c, c, c, 0.8);
}();
var _elam03$elam03_github_io$Building$viewBuilding = function (b) {
	var windows = A2(
		_elm_lang$core$List$map,
		_elam03$elam03_github_io$Building$glassWindowToForm,
		A2(
			_elm_lang$core$List$map,
			function (a) {
				return _elm_lang$core$Native_Utils.update(
					a,
					{x: a.x + b.x, y: a.y + b.y});
			},
			b.windows));
	var allForms = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: A2(
				_evancz$elm_graphics$Collage$move,
				{ctor: '_Tuple2', _0: b.x + (b.w / 2), _1: b.y + (b.h / 2)},
				A2(
					_evancz$elm_graphics$Collage$filled,
					_elam03$elam03_github_io$Building$clearGrey,
					A2(_evancz$elm_graphics$Collage$rect, b.w, b.h))),
			_1: {ctor: '[]'}
		},
		windows);
	return _evancz$elm_graphics$Collage$group(allForms);
};
var _elam03$elam03_github_io$Building$newGlassWindow = F4(
	function (x_, y_, w_, h_) {
		return {x: x_, y: y_, w: w_, h: h_};
	});
var _elam03$elam03_github_io$Building$buildingWidth = 30;
var _elam03$elam03_github_io$Building$glassWindowSpacing = {w: 3, h: 3};
var _elam03$elam03_github_io$Building$glassWindowSize = {w: 5, h: 9};
var _elam03$elam03_github_io$Building$generateGlassWindows = F7(
	function (x, y, w, h, xSpacing, ySpacing, windows) {
		generateGlassWindows:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp((x + _elam03$elam03_github_io$Building$glassWindowSize.w) + xSpacing, w) > 0) {
				return windows;
			} else {
				if (_elm_lang$core$Native_Utils.cmp((y + _elam03$elam03_github_io$Building$glassWindowSize.h) + ySpacing, h) > 0) {
					var _v0 = (x + _elam03$elam03_github_io$Building$glassWindowSize.w) + xSpacing,
						_v1 = ySpacing,
						_v2 = w,
						_v3 = h,
						_v4 = xSpacing,
						_v5 = ySpacing,
						_v6 = windows;
					x = _v0;
					y = _v1;
					w = _v2;
					h = _v3;
					xSpacing = _v4;
					ySpacing = _v5;
					windows = _v6;
					continue generateGlassWindows;
				} else {
					var _v7 = x,
						_v8 = (y + _elam03$elam03_github_io$Building$glassWindowSize.h) + ySpacing,
						_v9 = w,
						_v10 = h,
						_v11 = xSpacing,
						_v12 = ySpacing,
						_v13 = A2(
						_elm_lang$core$Basics_ops['++'],
						windows,
						{
							ctor: '::',
							_0: A4(_elam03$elam03_github_io$Building$newGlassWindow, x, y, _elam03$elam03_github_io$Building$glassWindowSize.w, _elam03$elam03_github_io$Building$glassWindowSize.h),
							_1: {ctor: '[]'}
						});
					x = _v7;
					y = _v8;
					w = _v9;
					h = _v10;
					xSpacing = _v11;
					ySpacing = _v12;
					windows = _v13;
					continue generateGlassWindows;
				}
			}
		}
	});
var _elam03$elam03_github_io$Building$Size = F2(
	function (a, b) {
		return {w: a, h: b};
	});
var _elam03$elam03_github_io$Building$GlassWindow = F4(
	function (a, b, c, d) {
		return {x: a, y: b, w: c, h: d};
	});
var _elam03$elam03_github_io$Building$Building = F6(
	function (a, b, c, d, e, f) {
		return {x: a, y: b, w: c, h: d, layer: e, windows: f};
	});
var _elam03$elam03_github_io$Building$Static = {ctor: 'Static'};
var _elam03$elam03_github_io$Building$isStatic = function (b) {
	return _elm_lang$core$Native_Utils.eq(b.layer, _elam03$elam03_github_io$Building$Static);
};
var _elam03$elam03_github_io$Building$Back = {ctor: 'Back'};
var _elam03$elam03_github_io$Building$isBack = function (b) {
	return _elm_lang$core$Native_Utils.eq(b.layer, _elam03$elam03_github_io$Building$Back);
};
var _elam03$elam03_github_io$Building$Middle = {ctor: 'Middle'};
var _elam03$elam03_github_io$Building$isMiddle = function (b) {
	return _elm_lang$core$Native_Utils.eq(b.layer, _elam03$elam03_github_io$Building$Middle);
};
var _elam03$elam03_github_io$Building$Front = {ctor: 'Front'};
var _elam03$elam03_github_io$Building$isFront = function (b) {
	return _elm_lang$core$Native_Utils.eq(b.layer, _elam03$elam03_github_io$Building$Front);
};
var _elam03$elam03_github_io$Building$nullBuilding = {
	x: 0,
	y: 0,
	w: _elam03$elam03_github_io$Building$buildingWidth,
	h: 0,
	layer: _elam03$elam03_github_io$Building$Front,
	windows: {ctor: '[]'}
};
var _elam03$elam03_github_io$Building$newBuilding = F4(
	function (x_, y_, h_, l_) {
		var w_ = _elam03$elam03_github_io$Building$buildingWidth;
		return _elm_lang$core$Native_Utils.update(
			_elam03$elam03_github_io$Building$nullBuilding,
			{
				x: x_,
				y: y_,
				w: w_,
				h: h_,
				layer: l_,
				windows: A7(
					_elam03$elam03_github_io$Building$generateGlassWindows,
					_elam03$elam03_github_io$Building$glassWindowSpacing.w,
					_elam03$elam03_github_io$Building$glassWindowSpacing.h,
					w_,
					h_,
					_elam03$elam03_github_io$Building$glassWindowSpacing.w,
					_elam03$elam03_github_io$Building$glassWindowSpacing.h,
					{ctor: '[]'})
			});
	});

var _elm_lang$animation_frame$Native_AnimationFrame = function()
{

function create()
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = requestAnimationFrame(function() {
			callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
		});

		return function() {
			cancelAnimationFrame(id);
		};
	});
}

return {
	create: create
};

}();

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$animation_frame$AnimationFrame$rAF = _elm_lang$animation_frame$Native_AnimationFrame.create(
	{ctor: '_Tuple0'});
var _elm_lang$animation_frame$AnimationFrame$subscription = _elm_lang$core$Native_Platform.leaf('AnimationFrame');
var _elm_lang$animation_frame$AnimationFrame$State = F3(
	function (a, b, c) {
		return {subs: a, request: b, oldTime: c};
	});
var _elm_lang$animation_frame$AnimationFrame$init = _elm_lang$core$Task$succeed(
	A3(
		_elm_lang$animation_frame$AnimationFrame$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing,
		0));
var _elm_lang$animation_frame$AnimationFrame$onEffects = F3(
	function (router, subs, _p0) {
		var _p1 = _p0;
		var _p5 = _p1.request;
		var _p4 = _p1.oldTime;
		var _p2 = {ctor: '_Tuple2', _0: _p5, _1: subs};
		if (_p2._0.ctor === 'Nothing') {
			if (_p2._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(
					A3(
						_elm_lang$animation_frame$AnimationFrame$State,
						{ctor: '[]'},
						_elm_lang$core$Maybe$Nothing,
						_p4));
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (time) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$animation_frame$AnimationFrame$State,
										subs,
										_elm_lang$core$Maybe$Just(pid),
										time));
							},
							_elm_lang$core$Time$now);
					},
					_elm_lang$core$Process$spawn(
						A2(
							_elm_lang$core$Task$andThen,
							_elm_lang$core$Platform$sendToSelf(router),
							_elm_lang$animation_frame$AnimationFrame$rAF)));
			}
		} else {
			if (_p2._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p3) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$animation_frame$AnimationFrame$State,
								{ctor: '[]'},
								_elm_lang$core$Maybe$Nothing,
								_p4));
					},
					_elm_lang$core$Process$kill(_p2._0._0));
			} else {
				return _elm_lang$core$Task$succeed(
					A3(_elm_lang$animation_frame$AnimationFrame$State, subs, _p5, _p4));
			}
		}
	});
var _elm_lang$animation_frame$AnimationFrame$onSelfMsg = F3(
	function (router, newTime, _p6) {
		var _p7 = _p6;
		var _p10 = _p7.subs;
		var diff = newTime - _p7.oldTime;
		var send = function (sub) {
			var _p8 = sub;
			if (_p8.ctor === 'Time') {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p8._0(newTime));
			} else {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p8._0(diff));
			}
		};
		return A2(
			_elm_lang$core$Task$andThen,
			function (pid) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p9) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$animation_frame$AnimationFrame$State,
								_p10,
								_elm_lang$core$Maybe$Just(pid),
								newTime));
					},
					_elm_lang$core$Task$sequence(
						A2(_elm_lang$core$List$map, send, _p10)));
			},
			_elm_lang$core$Process$spawn(
				A2(
					_elm_lang$core$Task$andThen,
					_elm_lang$core$Platform$sendToSelf(router),
					_elm_lang$animation_frame$AnimationFrame$rAF)));
	});
var _elm_lang$animation_frame$AnimationFrame$Diff = function (a) {
	return {ctor: 'Diff', _0: a};
};
var _elm_lang$animation_frame$AnimationFrame$diffs = function (tagger) {
	return _elm_lang$animation_frame$AnimationFrame$subscription(
		_elm_lang$animation_frame$AnimationFrame$Diff(tagger));
};
var _elm_lang$animation_frame$AnimationFrame$Time = function (a) {
	return {ctor: 'Time', _0: a};
};
var _elm_lang$animation_frame$AnimationFrame$times = function (tagger) {
	return _elm_lang$animation_frame$AnimationFrame$subscription(
		_elm_lang$animation_frame$AnimationFrame$Time(tagger));
};
var _elm_lang$animation_frame$AnimationFrame$subMap = F2(
	function (func, sub) {
		var _p11 = sub;
		if (_p11.ctor === 'Time') {
			return _elm_lang$animation_frame$AnimationFrame$Time(
				function (_p12) {
					return func(
						_p11._0(_p12));
				});
		} else {
			return _elm_lang$animation_frame$AnimationFrame$Diff(
				function (_p13) {
					return func(
						_p11._0(_p13));
				});
		}
	});
_elm_lang$core$Native_Platform.effectManagers['AnimationFrame'] = {pkg: 'elm-lang/animation-frame', init: _elm_lang$animation_frame$AnimationFrame$init, onEffects: _elm_lang$animation_frame$AnimationFrame$onEffects, onSelfMsg: _elm_lang$animation_frame$AnimationFrame$onSelfMsg, tag: 'sub', subMap: _elm_lang$animation_frame$AnimationFrame$subMap};

var _elm_lang$dom$Native_Dom = function() {

var fakeNode = {
	addEventListener: function() {},
	removeEventListener: function() {}
};

var onDocument = on(typeof document !== 'undefined' ? document : fakeNode);
var onWindow = on(typeof window !== 'undefined' ? window : fakeNode);

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

var rAF = typeof requestAnimationFrame !== 'undefined'
	? requestAnimationFrame
	: function(callback) { callback(); };

function withNode(id, doStuff)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		rAF(function()
		{
			var node = document.getElementById(id);
			if (node === null)
			{
				callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NotFound', _0: id }));
				return;
			}
			callback(_elm_lang$core$Native_Scheduler.succeed(doStuff(node)));
		});
	});
}


// FOCUS

function focus(id)
{
	return withNode(id, function(node) {
		node.focus();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function blur(id)
{
	return withNode(id, function(node) {
		node.blur();
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SCROLLING

function getScrollTop(id)
{
	return withNode(id, function(node) {
		return node.scrollTop;
	});
}

function setScrollTop(id, desiredScrollTop)
{
	return withNode(id, function(node) {
		node.scrollTop = desiredScrollTop;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toBottom(id)
{
	return withNode(id, function(node) {
		node.scrollTop = node.scrollHeight;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function getScrollLeft(id)
{
	return withNode(id, function(node) {
		return node.scrollLeft;
	});
}

function setScrollLeft(id, desiredScrollLeft)
{
	return withNode(id, function(node) {
		node.scrollLeft = desiredScrollLeft;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}

function toRight(id)
{
	return withNode(id, function(node) {
		node.scrollLeft = node.scrollWidth;
		return _elm_lang$core$Native_Utils.Tuple0;
	});
}


// SIZE

function width(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollWidth;
			case 'VisibleContent':
				return node.clientWidth;
			case 'VisibleContentWithBorders':
				return node.offsetWidth;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.right - rect.left;
		}
	});
}

function height(options, id)
{
	return withNode(id, function(node) {
		switch (options.ctor)
		{
			case 'Content':
				return node.scrollHeight;
			case 'VisibleContent':
				return node.clientHeight;
			case 'VisibleContentWithBorders':
				return node.offsetHeight;
			case 'VisibleContentWithBordersAndMargins':
				var rect = node.getBoundingClientRect();
				return rect.bottom - rect.top;
		}
	});
}

return {
	onDocument: F3(onDocument),
	onWindow: F3(onWindow),

	focus: focus,
	blur: blur,

	getScrollTop: getScrollTop,
	setScrollTop: F2(setScrollTop),
	getScrollLeft: getScrollLeft,
	setScrollLeft: F2(setScrollLeft),
	toBottom: toBottom,
	toRight: toRight,

	height: F2(height),
	width: F2(width)
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$mouse$Mouse_ops = _elm_lang$mouse$Mouse_ops || {};
_elm_lang$mouse$Mouse_ops['&>'] = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return t2;
			},
			t1);
	});
var _elm_lang$mouse$Mouse$onSelfMsg = F3(
	function (router, _p1, state) {
		var _p2 = _p1;
		var _p3 = A2(_elm_lang$core$Dict$get, _p2.category, state);
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p2.position));
			};
			return A2(
				_elm_lang$mouse$Mouse_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p3._0.taggers)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$mouse$Mouse$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$mouse$Mouse$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p4 = maybeValues;
		if (_p4.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p4._0});
		}
	});
var _elm_lang$mouse$Mouse$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p5 = subs;
			if (_p5.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p5._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p5._0._0,
					_elm_lang$mouse$Mouse$categorizeHelpHelp(_p5._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$mouse$Mouse$categorize = function (subs) {
	return A2(_elm_lang$mouse$Mouse$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$mouse$Mouse$subscription = _elm_lang$core$Native_Platform.leaf('Mouse');
var _elm_lang$mouse$Mouse$Position = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _elm_lang$mouse$Mouse$position = A3(
	_elm_lang$core$Json_Decode$map2,
	_elm_lang$mouse$Mouse$Position,
	A2(_elm_lang$core$Json_Decode$field, 'pageX', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'pageY', _elm_lang$core$Json_Decode$int));
var _elm_lang$mouse$Mouse$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$mouse$Mouse$Msg = F2(
	function (a, b) {
		return {category: a, position: b};
	});
var _elm_lang$mouse$Mouse$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				var tracker = A3(
					_elm_lang$dom$Dom_LowLevel$onDocument,
					category,
					_elm_lang$mouse$Mouse$position,
					function (_p6) {
						return A2(
							_elm_lang$core$Platform$sendToSelf,
							router,
							A2(_elm_lang$mouse$Mouse$Msg, category, _p6));
					});
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$mouse$Mouse$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(tracker));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p7, taggers, task) {
				var _p8 = _p7;
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return _elm_lang$core$Task$succeed(
							A3(
								_elm_lang$core$Dict$insert,
								category,
								A2(_elm_lang$mouse$Mouse$Watcher, taggers, _p8.pid),
								state));
					},
					task);
			});
		var leftStep = F3(
			function (category, _p9, task) {
				var _p10 = _p9;
				return A2(
					_elm_lang$mouse$Mouse_ops['&>'],
					_elm_lang$core$Process$kill(_p10.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$mouse$Mouse$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$mouse$Mouse$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$mouse$Mouse$clicks = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'click', tagger));
};
var _elm_lang$mouse$Mouse$moves = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousemove', tagger));
};
var _elm_lang$mouse$Mouse$downs = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mousedown', tagger));
};
var _elm_lang$mouse$Mouse$ups = function (tagger) {
	return _elm_lang$mouse$Mouse$subscription(
		A2(_elm_lang$mouse$Mouse$MySub, 'mouseup', tagger));
};
var _elm_lang$mouse$Mouse$subMap = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return A2(
			_elm_lang$mouse$Mouse$MySub,
			_p12._0,
			function (_p13) {
				return func(
					_p12._1(_p13));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Mouse'] = {pkg: 'elm-lang/mouse', init: _elm_lang$mouse$Mouse$init, onEffects: _elm_lang$mouse$Mouse$onEffects, onSelfMsg: _elm_lang$mouse$Mouse$onSelfMsg, tag: 'sub', subMap: _elm_lang$mouse$Mouse$subMap};

var _elm_lang$keyboard$Keyboard$onSelfMsg = F3(
	function (router, _p0, state) {
		var _p1 = _p0;
		var _p2 = A2(_elm_lang$core$Dict$get, _p1.category, state);
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (tagger) {
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					tagger(_p1.keyCode));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p3) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p2._0.taggers)));
		}
	});
var _elm_lang$keyboard$Keyboard_ops = _elm_lang$keyboard$Keyboard_ops || {};
_elm_lang$keyboard$Keyboard_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p4) {
				return task2;
			},
			task1);
	});
var _elm_lang$keyboard$Keyboard$init = _elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty);
var _elm_lang$keyboard$Keyboard$categorizeHelpHelp = F2(
	function (value, maybeValues) {
		var _p5 = maybeValues;
		if (_p5.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p5._0});
		}
	});
var _elm_lang$keyboard$Keyboard$categorizeHelp = F2(
	function (subs, subDict) {
		categorizeHelp:
		while (true) {
			var _p6 = subs;
			if (_p6.ctor === '[]') {
				return subDict;
			} else {
				var _v4 = _p6._1,
					_v5 = A3(
					_elm_lang$core$Dict$update,
					_p6._0._0,
					_elm_lang$keyboard$Keyboard$categorizeHelpHelp(_p6._0._1),
					subDict);
				subs = _v4;
				subDict = _v5;
				continue categorizeHelp;
			}
		}
	});
var _elm_lang$keyboard$Keyboard$categorize = function (subs) {
	return A2(_elm_lang$keyboard$Keyboard$categorizeHelp, subs, _elm_lang$core$Dict$empty);
};
var _elm_lang$keyboard$Keyboard$keyCode = A2(_elm_lang$core$Json_Decode$field, 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$keyboard$Keyboard$subscription = _elm_lang$core$Native_Platform.leaf('Keyboard');
var _elm_lang$keyboard$Keyboard$Watcher = F2(
	function (a, b) {
		return {taggers: a, pid: b};
	});
var _elm_lang$keyboard$Keyboard$Msg = F2(
	function (a, b) {
		return {category: a, keyCode: b};
	});
var _elm_lang$keyboard$Keyboard$onEffects = F3(
	function (router, newSubs, oldState) {
		var rightStep = F3(
			function (category, taggers, task) {
				return A2(
					_elm_lang$core$Task$andThen,
					function (state) {
						return A2(
							_elm_lang$core$Task$andThen,
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A3(
										_elm_lang$core$Dict$insert,
										category,
										A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, pid),
										state));
							},
							_elm_lang$core$Process$spawn(
								A3(
									_elm_lang$dom$Dom_LowLevel$onDocument,
									category,
									_elm_lang$keyboard$Keyboard$keyCode,
									function (_p7) {
										return A2(
											_elm_lang$core$Platform$sendToSelf,
											router,
											A2(_elm_lang$keyboard$Keyboard$Msg, category, _p7));
									})));
					},
					task);
			});
		var bothStep = F4(
			function (category, _p8, taggers, task) {
				var _p9 = _p8;
				return A2(
					_elm_lang$core$Task$map,
					A2(
						_elm_lang$core$Dict$insert,
						category,
						A2(_elm_lang$keyboard$Keyboard$Watcher, taggers, _p9.pid)),
					task);
			});
		var leftStep = F3(
			function (category, _p10, task) {
				var _p11 = _p10;
				return A2(
					_elm_lang$keyboard$Keyboard_ops['&>'],
					_elm_lang$core$Process$kill(_p11.pid),
					task);
			});
		return A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			oldState,
			_elm_lang$keyboard$Keyboard$categorize(newSubs),
			_elm_lang$core$Task$succeed(_elm_lang$core$Dict$empty));
	});
var _elm_lang$keyboard$Keyboard$MySub = F2(
	function (a, b) {
		return {ctor: 'MySub', _0: a, _1: b};
	});
var _elm_lang$keyboard$Keyboard$presses = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keypress', tagger));
};
var _elm_lang$keyboard$Keyboard$downs = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keydown', tagger));
};
var _elm_lang$keyboard$Keyboard$ups = function (tagger) {
	return _elm_lang$keyboard$Keyboard$subscription(
		A2(_elm_lang$keyboard$Keyboard$MySub, 'keyup', tagger));
};
var _elm_lang$keyboard$Keyboard$subMap = F2(
	function (func, _p12) {
		var _p13 = _p12;
		return A2(
			_elm_lang$keyboard$Keyboard$MySub,
			_p13._0,
			function (_p14) {
				return func(
					_p13._1(_p14));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Keyboard'] = {pkg: 'elm-lang/keyboard', init: _elm_lang$keyboard$Keyboard$init, onEffects: _elm_lang$keyboard$Keyboard$onEffects, onSelfMsg: _elm_lang$keyboard$Keyboard$onSelfMsg, tag: 'sub', subMap: _elm_lang$keyboard$Keyboard$subMap};

// import Native.Scheduler, Utils //

var _elm_lang$page_visibility$Native_PageVisibility = function() {


// sort out the prefixes

var hidden, change;
if (typeof document.hidden !== 'undefined')
{
	hidden = 'hidden';
	change = 'visibilitychange';
}
else if (typeof document.mozHidden !== 'undefined')
{
	hidden = 'mozHidden';
	change = 'mozvisibilitychange';
}
else if (typeof document.msHidden !== 'undefined')
{
	hidden = 'msHidden';
	change = 'msvisibilitychange';
}
else if (typeof document.webkitHidden !== 'undefined')
{
	hidden = 'webkitHidden';
	change = 'webkitvisibilitychange';
}


// actually provide functionality

function visibilityChange(toTask)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

		function performTask()
		{
			_elm_lang$core$Native_Scheduler.rawSpawn(toTask(document[hidden]));
		}

		document.addEventListener(change, performTask);

		return function()
		{
			document.removeEventListener(change, performTask);
		};
	});
}

var isHidden = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
	callback(_elm_lang$core$Native_Scheduler.succeed(document[hidden]));
});


return {
	visibilityChange: visibilityChange,
	isHidden: isHidden
};

}();

var _elm_lang$page_visibility$PageVisibility$onVisibilityChange = _elm_lang$page_visibility$Native_PageVisibility.visibilityChange;
var _elm_lang$page_visibility$PageVisibility$onEffects = F3(
	function (router, newSubs, state) {
		var _p0 = {ctor: '_Tuple2', _0: state, _1: newSubs};
		if (_p0._0.ctor === 'Nothing') {
			if (_p0._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(state);
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return _elm_lang$core$Task$succeed(
							_elm_lang$core$Maybe$Just(
								{subs: newSubs, pid: pid}));
					},
					_elm_lang$core$Process$spawn(
						_elm_lang$page_visibility$PageVisibility$onVisibilityChange(
							_elm_lang$core$Platform$sendToSelf(router))));
			}
		} else {
			if (_p0._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Task$andThen,
					function (_p1) {
						return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
					},
					_elm_lang$core$Process$kill(_p0._0._0.pid));
			} else {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Maybe$Just(
						{subs: newSubs, pid: _p0._0._0.pid}));
			}
		}
	});
var _elm_lang$page_visibility$PageVisibility$init = _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
var _elm_lang$page_visibility$PageVisibility$isHidden = _elm_lang$page_visibility$Native_PageVisibility.isHidden;
var _elm_lang$page_visibility$PageVisibility$isVisible = A2(_elm_lang$core$Task$map, _elm_lang$core$Basics$not, _elm_lang$page_visibility$PageVisibility$isHidden);
var _elm_lang$page_visibility$PageVisibility$subscription = _elm_lang$core$Native_Platform.leaf('PageVisibility');
var _elm_lang$page_visibility$PageVisibility$Hidden = {ctor: 'Hidden'};
var _elm_lang$page_visibility$PageVisibility$Visible = {ctor: 'Visible'};
var _elm_lang$page_visibility$PageVisibility$hiddenToVisibility = function (hidden) {
	return hidden ? _elm_lang$page_visibility$PageVisibility$Hidden : _elm_lang$page_visibility$PageVisibility$Visible;
};
var _elm_lang$page_visibility$PageVisibility$visibility = A2(_elm_lang$core$Task$map, _elm_lang$page_visibility$PageVisibility$hiddenToVisibility, _elm_lang$page_visibility$PageVisibility$isHidden);
var _elm_lang$page_visibility$PageVisibility$onSelfMsg = F3(
	function (router, hidden, state) {
		var _p2 = state;
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (_p3) {
				var _p4 = _p3;
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p4._0(
						_elm_lang$page_visibility$PageVisibility$hiddenToVisibility(hidden)));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p5) {
					return _elm_lang$core$Task$succeed(state);
				},
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p2._0.subs)));
		}
	});
var _elm_lang$page_visibility$PageVisibility$Tagger = function (a) {
	return {ctor: 'Tagger', _0: a};
};
var _elm_lang$page_visibility$PageVisibility$visibilityChanges = function (tagger) {
	return _elm_lang$page_visibility$PageVisibility$subscription(
		_elm_lang$page_visibility$PageVisibility$Tagger(tagger));
};
var _elm_lang$page_visibility$PageVisibility$subMap = F2(
	function (func, _p6) {
		var _p7 = _p6;
		return _elm_lang$page_visibility$PageVisibility$Tagger(
			function (_p8) {
				return func(
					_p7._0(_p8));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['PageVisibility'] = {pkg: 'elm-lang/page-visibility', init: _elm_lang$page_visibility$PageVisibility$init, onEffects: _elm_lang$page_visibility$PageVisibility$onEffects, onSelfMsg: _elm_lang$page_visibility$PageVisibility$onSelfMsg, tag: 'sub', subMap: _elm_lang$page_visibility$PageVisibility$subMap};

var _elm_lang$core$Random$onSelfMsg = F3(
	function (_p1, _p0, seed) {
		return _elm_lang$core$Task$succeed(seed);
	});
var _elm_lang$core$Random$magicNum8 = 2147483562;
var _elm_lang$core$Random$range = function (_p2) {
	return {ctor: '_Tuple2', _0: 0, _1: _elm_lang$core$Random$magicNum8};
};
var _elm_lang$core$Random$magicNum7 = 2147483399;
var _elm_lang$core$Random$magicNum6 = 2147483563;
var _elm_lang$core$Random$magicNum5 = 3791;
var _elm_lang$core$Random$magicNum4 = 40692;
var _elm_lang$core$Random$magicNum3 = 52774;
var _elm_lang$core$Random$magicNum2 = 12211;
var _elm_lang$core$Random$magicNum1 = 53668;
var _elm_lang$core$Random$magicNum0 = 40014;
var _elm_lang$core$Random$step = F2(
	function (_p3, seed) {
		var _p4 = _p3;
		return _p4._0(seed);
	});
var _elm_lang$core$Random$onEffects = F3(
	function (router, commands, seed) {
		var _p5 = commands;
		if (_p5.ctor === '[]') {
			return _elm_lang$core$Task$succeed(seed);
		} else {
			var _p6 = A2(_elm_lang$core$Random$step, _p5._0._0, seed);
			var value = _p6._0;
			var newSeed = _p6._1;
			return A2(
				_elm_lang$core$Task$andThen,
				function (_p7) {
					return A3(_elm_lang$core$Random$onEffects, router, _p5._1, newSeed);
				},
				A2(_elm_lang$core$Platform$sendToApp, router, value));
		}
	});
var _elm_lang$core$Random$listHelp = F4(
	function (list, n, generate, seed) {
		listHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 1) < 0) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$List$reverse(list),
					_1: seed
				};
			} else {
				var _p8 = generate(seed);
				var value = _p8._0;
				var newSeed = _p8._1;
				var _v2 = {ctor: '::', _0: value, _1: list},
					_v3 = n - 1,
					_v4 = generate,
					_v5 = newSeed;
				list = _v2;
				n = _v3;
				generate = _v4;
				seed = _v5;
				continue listHelp;
			}
		}
	});
var _elm_lang$core$Random$minInt = -2147483648;
var _elm_lang$core$Random$maxInt = 2147483647;
var _elm_lang$core$Random$iLogBase = F2(
	function (b, i) {
		return (_elm_lang$core$Native_Utils.cmp(i, b) < 0) ? 1 : (1 + A2(_elm_lang$core$Random$iLogBase, b, (i / b) | 0));
	});
var _elm_lang$core$Random$command = _elm_lang$core$Native_Platform.leaf('Random');
var _elm_lang$core$Random$Generator = function (a) {
	return {ctor: 'Generator', _0: a};
};
var _elm_lang$core$Random$list = F2(
	function (n, _p9) {
		var _p10 = _p9;
		return _elm_lang$core$Random$Generator(
			function (seed) {
				return A4(
					_elm_lang$core$Random$listHelp,
					{ctor: '[]'},
					n,
					_p10._0,
					seed);
			});
	});
var _elm_lang$core$Random$map = F2(
	function (func, _p11) {
		var _p12 = _p11;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p13 = _p12._0(seed0);
				var a = _p13._0;
				var seed1 = _p13._1;
				return {
					ctor: '_Tuple2',
					_0: func(a),
					_1: seed1
				};
			});
	});
var _elm_lang$core$Random$map2 = F3(
	function (func, _p15, _p14) {
		var _p16 = _p15;
		var _p17 = _p14;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p18 = _p16._0(seed0);
				var a = _p18._0;
				var seed1 = _p18._1;
				var _p19 = _p17._0(seed1);
				var b = _p19._0;
				var seed2 = _p19._1;
				return {
					ctor: '_Tuple2',
					_0: A2(func, a, b),
					_1: seed2
				};
			});
	});
var _elm_lang$core$Random$pair = F2(
	function (genA, genB) {
		return A3(
			_elm_lang$core$Random$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			genA,
			genB);
	});
var _elm_lang$core$Random$map3 = F4(
	function (func, _p22, _p21, _p20) {
		var _p23 = _p22;
		var _p24 = _p21;
		var _p25 = _p20;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p26 = _p23._0(seed0);
				var a = _p26._0;
				var seed1 = _p26._1;
				var _p27 = _p24._0(seed1);
				var b = _p27._0;
				var seed2 = _p27._1;
				var _p28 = _p25._0(seed2);
				var c = _p28._0;
				var seed3 = _p28._1;
				return {
					ctor: '_Tuple2',
					_0: A3(func, a, b, c),
					_1: seed3
				};
			});
	});
var _elm_lang$core$Random$map4 = F5(
	function (func, _p32, _p31, _p30, _p29) {
		var _p33 = _p32;
		var _p34 = _p31;
		var _p35 = _p30;
		var _p36 = _p29;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p37 = _p33._0(seed0);
				var a = _p37._0;
				var seed1 = _p37._1;
				var _p38 = _p34._0(seed1);
				var b = _p38._0;
				var seed2 = _p38._1;
				var _p39 = _p35._0(seed2);
				var c = _p39._0;
				var seed3 = _p39._1;
				var _p40 = _p36._0(seed3);
				var d = _p40._0;
				var seed4 = _p40._1;
				return {
					ctor: '_Tuple2',
					_0: A4(func, a, b, c, d),
					_1: seed4
				};
			});
	});
var _elm_lang$core$Random$map5 = F6(
	function (func, _p45, _p44, _p43, _p42, _p41) {
		var _p46 = _p45;
		var _p47 = _p44;
		var _p48 = _p43;
		var _p49 = _p42;
		var _p50 = _p41;
		return _elm_lang$core$Random$Generator(
			function (seed0) {
				var _p51 = _p46._0(seed0);
				var a = _p51._0;
				var seed1 = _p51._1;
				var _p52 = _p47._0(seed1);
				var b = _p52._0;
				var seed2 = _p52._1;
				var _p53 = _p48._0(seed2);
				var c = _p53._0;
				var seed3 = _p53._1;
				var _p54 = _p49._0(seed3);
				var d = _p54._0;
				var seed4 = _p54._1;
				var _p55 = _p50._0(seed4);
				var e = _p55._0;
				var seed5 = _p55._1;
				return {
					ctor: '_Tuple2',
					_0: A5(func, a, b, c, d, e),
					_1: seed5
				};
			});
	});
var _elm_lang$core$Random$andThen = F2(
	function (callback, _p56) {
		var _p57 = _p56;
		return _elm_lang$core$Random$Generator(
			function (seed) {
				var _p58 = _p57._0(seed);
				var result = _p58._0;
				var newSeed = _p58._1;
				var _p59 = callback(result);
				var genB = _p59._0;
				return genB(newSeed);
			});
	});
var _elm_lang$core$Random$State = F2(
	function (a, b) {
		return {ctor: 'State', _0: a, _1: b};
	});
var _elm_lang$core$Random$initState = function (seed) {
	var s = A2(_elm_lang$core$Basics$max, seed, 0 - seed);
	var q = (s / (_elm_lang$core$Random$magicNum6 - 1)) | 0;
	var s2 = A2(_elm_lang$core$Basics_ops['%'], q, _elm_lang$core$Random$magicNum7 - 1);
	var s1 = A2(_elm_lang$core$Basics_ops['%'], s, _elm_lang$core$Random$magicNum6 - 1);
	return A2(_elm_lang$core$Random$State, s1 + 1, s2 + 1);
};
var _elm_lang$core$Random$next = function (_p60) {
	var _p61 = _p60;
	var _p63 = _p61._1;
	var _p62 = _p61._0;
	var k2 = (_p63 / _elm_lang$core$Random$magicNum3) | 0;
	var rawState2 = (_elm_lang$core$Random$magicNum4 * (_p63 - (k2 * _elm_lang$core$Random$magicNum3))) - (k2 * _elm_lang$core$Random$magicNum5);
	var newState2 = (_elm_lang$core$Native_Utils.cmp(rawState2, 0) < 0) ? (rawState2 + _elm_lang$core$Random$magicNum7) : rawState2;
	var k1 = (_p62 / _elm_lang$core$Random$magicNum1) | 0;
	var rawState1 = (_elm_lang$core$Random$magicNum0 * (_p62 - (k1 * _elm_lang$core$Random$magicNum1))) - (k1 * _elm_lang$core$Random$magicNum2);
	var newState1 = (_elm_lang$core$Native_Utils.cmp(rawState1, 0) < 0) ? (rawState1 + _elm_lang$core$Random$magicNum6) : rawState1;
	var z = newState1 - newState2;
	var newZ = (_elm_lang$core$Native_Utils.cmp(z, 1) < 0) ? (z + _elm_lang$core$Random$magicNum8) : z;
	return {
		ctor: '_Tuple2',
		_0: newZ,
		_1: A2(_elm_lang$core$Random$State, newState1, newState2)
	};
};
var _elm_lang$core$Random$split = function (_p64) {
	var _p65 = _p64;
	var _p68 = _p65._1;
	var _p67 = _p65._0;
	var _p66 = _elm_lang$core$Tuple$second(
		_elm_lang$core$Random$next(_p65));
	var t1 = _p66._0;
	var t2 = _p66._1;
	var new_s2 = _elm_lang$core$Native_Utils.eq(_p68, 1) ? (_elm_lang$core$Random$magicNum7 - 1) : (_p68 - 1);
	var new_s1 = _elm_lang$core$Native_Utils.eq(_p67, _elm_lang$core$Random$magicNum6 - 1) ? 1 : (_p67 + 1);
	return {
		ctor: '_Tuple2',
		_0: A2(_elm_lang$core$Random$State, new_s1, t2),
		_1: A2(_elm_lang$core$Random$State, t1, new_s2)
	};
};
var _elm_lang$core$Random$Seed = function (a) {
	return {ctor: 'Seed', _0: a};
};
var _elm_lang$core$Random$int = F2(
	function (a, b) {
		return _elm_lang$core$Random$Generator(
			function (_p69) {
				var _p70 = _p69;
				var _p75 = _p70._0;
				var base = 2147483561;
				var f = F3(
					function (n, acc, state) {
						f:
						while (true) {
							var _p71 = n;
							if (_p71 === 0) {
								return {ctor: '_Tuple2', _0: acc, _1: state};
							} else {
								var _p72 = _p75.next(state);
								var x = _p72._0;
								var nextState = _p72._1;
								var _v27 = n - 1,
									_v28 = x + (acc * base),
									_v29 = nextState;
								n = _v27;
								acc = _v28;
								state = _v29;
								continue f;
							}
						}
					});
				var _p73 = (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? {ctor: '_Tuple2', _0: a, _1: b} : {ctor: '_Tuple2', _0: b, _1: a};
				var lo = _p73._0;
				var hi = _p73._1;
				var k = (hi - lo) + 1;
				var n = A2(_elm_lang$core$Random$iLogBase, base, k);
				var _p74 = A3(f, n, 1, _p75.state);
				var v = _p74._0;
				var nextState = _p74._1;
				return {
					ctor: '_Tuple2',
					_0: lo + A2(_elm_lang$core$Basics_ops['%'], v, k),
					_1: _elm_lang$core$Random$Seed(
						_elm_lang$core$Native_Utils.update(
							_p75,
							{state: nextState}))
				};
			});
	});
var _elm_lang$core$Random$bool = A2(
	_elm_lang$core$Random$map,
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		})(1),
	A2(_elm_lang$core$Random$int, 0, 1));
var _elm_lang$core$Random$float = F2(
	function (a, b) {
		return _elm_lang$core$Random$Generator(
			function (seed) {
				var _p76 = A2(
					_elm_lang$core$Random$step,
					A2(_elm_lang$core$Random$int, _elm_lang$core$Random$minInt, _elm_lang$core$Random$maxInt),
					seed);
				var number = _p76._0;
				var newSeed = _p76._1;
				var negativeOneToOne = _elm_lang$core$Basics$toFloat(number) / _elm_lang$core$Basics$toFloat(_elm_lang$core$Random$maxInt - _elm_lang$core$Random$minInt);
				var _p77 = (_elm_lang$core$Native_Utils.cmp(a, b) < 0) ? {ctor: '_Tuple2', _0: a, _1: b} : {ctor: '_Tuple2', _0: b, _1: a};
				var lo = _p77._0;
				var hi = _p77._1;
				var scaled = ((lo + hi) / 2) + ((hi - lo) * negativeOneToOne);
				return {ctor: '_Tuple2', _0: scaled, _1: newSeed};
			});
	});
var _elm_lang$core$Random$initialSeed = function (n) {
	return _elm_lang$core$Random$Seed(
		{
			state: _elm_lang$core$Random$initState(n),
			next: _elm_lang$core$Random$next,
			split: _elm_lang$core$Random$split,
			range: _elm_lang$core$Random$range
		});
};
var _elm_lang$core$Random$init = A2(
	_elm_lang$core$Task$andThen,
	function (t) {
		return _elm_lang$core$Task$succeed(
			_elm_lang$core$Random$initialSeed(
				_elm_lang$core$Basics$round(t)));
	},
	_elm_lang$core$Time$now);
var _elm_lang$core$Random$Generate = function (a) {
	return {ctor: 'Generate', _0: a};
};
var _elm_lang$core$Random$generate = F2(
	function (tagger, generator) {
		return _elm_lang$core$Random$command(
			_elm_lang$core$Random$Generate(
				A2(_elm_lang$core$Random$map, tagger, generator)));
	});
var _elm_lang$core$Random$cmdMap = F2(
	function (func, _p78) {
		var _p79 = _p78;
		return _elm_lang$core$Random$Generate(
			A2(_elm_lang$core$Random$map, func, _p79._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Random'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Random$init, onEffects: _elm_lang$core$Random$onEffects, onSelfMsg: _elm_lang$core$Random$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Random$cmdMap};

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_lang$svg$Svg$map = _elm_lang$virtual_dom$VirtualDom$map;
var _elm_lang$svg$Svg$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$svg$Svg$svgNamespace = A2(
	_elm_lang$virtual_dom$VirtualDom$property,
	'namespace',
	_elm_lang$core$Json_Encode$string('http://www.w3.org/2000/svg'));
var _elm_lang$svg$Svg$node = F3(
	function (name, attributes, children) {
		return A3(
			_elm_lang$virtual_dom$VirtualDom$node,
			name,
			{ctor: '::', _0: _elm_lang$svg$Svg$svgNamespace, _1: attributes},
			children);
	});
var _elm_lang$svg$Svg$svg = _elm_lang$svg$Svg$node('svg');
var _elm_lang$svg$Svg$foreignObject = _elm_lang$svg$Svg$node('foreignObject');
var _elm_lang$svg$Svg$animate = _elm_lang$svg$Svg$node('animate');
var _elm_lang$svg$Svg$animateColor = _elm_lang$svg$Svg$node('animateColor');
var _elm_lang$svg$Svg$animateMotion = _elm_lang$svg$Svg$node('animateMotion');
var _elm_lang$svg$Svg$animateTransform = _elm_lang$svg$Svg$node('animateTransform');
var _elm_lang$svg$Svg$mpath = _elm_lang$svg$Svg$node('mpath');
var _elm_lang$svg$Svg$set = _elm_lang$svg$Svg$node('set');
var _elm_lang$svg$Svg$a = _elm_lang$svg$Svg$node('a');
var _elm_lang$svg$Svg$defs = _elm_lang$svg$Svg$node('defs');
var _elm_lang$svg$Svg$g = _elm_lang$svg$Svg$node('g');
var _elm_lang$svg$Svg$marker = _elm_lang$svg$Svg$node('marker');
var _elm_lang$svg$Svg$mask = _elm_lang$svg$Svg$node('mask');
var _elm_lang$svg$Svg$pattern = _elm_lang$svg$Svg$node('pattern');
var _elm_lang$svg$Svg$switch = _elm_lang$svg$Svg$node('switch');
var _elm_lang$svg$Svg$symbol = _elm_lang$svg$Svg$node('symbol');
var _elm_lang$svg$Svg$desc = _elm_lang$svg$Svg$node('desc');
var _elm_lang$svg$Svg$metadata = _elm_lang$svg$Svg$node('metadata');
var _elm_lang$svg$Svg$title = _elm_lang$svg$Svg$node('title');
var _elm_lang$svg$Svg$feBlend = _elm_lang$svg$Svg$node('feBlend');
var _elm_lang$svg$Svg$feColorMatrix = _elm_lang$svg$Svg$node('feColorMatrix');
var _elm_lang$svg$Svg$feComponentTransfer = _elm_lang$svg$Svg$node('feComponentTransfer');
var _elm_lang$svg$Svg$feComposite = _elm_lang$svg$Svg$node('feComposite');
var _elm_lang$svg$Svg$feConvolveMatrix = _elm_lang$svg$Svg$node('feConvolveMatrix');
var _elm_lang$svg$Svg$feDiffuseLighting = _elm_lang$svg$Svg$node('feDiffuseLighting');
var _elm_lang$svg$Svg$feDisplacementMap = _elm_lang$svg$Svg$node('feDisplacementMap');
var _elm_lang$svg$Svg$feFlood = _elm_lang$svg$Svg$node('feFlood');
var _elm_lang$svg$Svg$feFuncA = _elm_lang$svg$Svg$node('feFuncA');
var _elm_lang$svg$Svg$feFuncB = _elm_lang$svg$Svg$node('feFuncB');
var _elm_lang$svg$Svg$feFuncG = _elm_lang$svg$Svg$node('feFuncG');
var _elm_lang$svg$Svg$feFuncR = _elm_lang$svg$Svg$node('feFuncR');
var _elm_lang$svg$Svg$feGaussianBlur = _elm_lang$svg$Svg$node('feGaussianBlur');
var _elm_lang$svg$Svg$feImage = _elm_lang$svg$Svg$node('feImage');
var _elm_lang$svg$Svg$feMerge = _elm_lang$svg$Svg$node('feMerge');
var _elm_lang$svg$Svg$feMergeNode = _elm_lang$svg$Svg$node('feMergeNode');
var _elm_lang$svg$Svg$feMorphology = _elm_lang$svg$Svg$node('feMorphology');
var _elm_lang$svg$Svg$feOffset = _elm_lang$svg$Svg$node('feOffset');
var _elm_lang$svg$Svg$feSpecularLighting = _elm_lang$svg$Svg$node('feSpecularLighting');
var _elm_lang$svg$Svg$feTile = _elm_lang$svg$Svg$node('feTile');
var _elm_lang$svg$Svg$feTurbulence = _elm_lang$svg$Svg$node('feTurbulence');
var _elm_lang$svg$Svg$font = _elm_lang$svg$Svg$node('font');
var _elm_lang$svg$Svg$linearGradient = _elm_lang$svg$Svg$node('linearGradient');
var _elm_lang$svg$Svg$radialGradient = _elm_lang$svg$Svg$node('radialGradient');
var _elm_lang$svg$Svg$stop = _elm_lang$svg$Svg$node('stop');
var _elm_lang$svg$Svg$circle = _elm_lang$svg$Svg$node('circle');
var _elm_lang$svg$Svg$ellipse = _elm_lang$svg$Svg$node('ellipse');
var _elm_lang$svg$Svg$image = _elm_lang$svg$Svg$node('image');
var _elm_lang$svg$Svg$line = _elm_lang$svg$Svg$node('line');
var _elm_lang$svg$Svg$path = _elm_lang$svg$Svg$node('path');
var _elm_lang$svg$Svg$polygon = _elm_lang$svg$Svg$node('polygon');
var _elm_lang$svg$Svg$polyline = _elm_lang$svg$Svg$node('polyline');
var _elm_lang$svg$Svg$rect = _elm_lang$svg$Svg$node('rect');
var _elm_lang$svg$Svg$use = _elm_lang$svg$Svg$node('use');
var _elm_lang$svg$Svg$feDistantLight = _elm_lang$svg$Svg$node('feDistantLight');
var _elm_lang$svg$Svg$fePointLight = _elm_lang$svg$Svg$node('fePointLight');
var _elm_lang$svg$Svg$feSpotLight = _elm_lang$svg$Svg$node('feSpotLight');
var _elm_lang$svg$Svg$altGlyph = _elm_lang$svg$Svg$node('altGlyph');
var _elm_lang$svg$Svg$altGlyphDef = _elm_lang$svg$Svg$node('altGlyphDef');
var _elm_lang$svg$Svg$altGlyphItem = _elm_lang$svg$Svg$node('altGlyphItem');
var _elm_lang$svg$Svg$glyph = _elm_lang$svg$Svg$node('glyph');
var _elm_lang$svg$Svg$glyphRef = _elm_lang$svg$Svg$node('glyphRef');
var _elm_lang$svg$Svg$textPath = _elm_lang$svg$Svg$node('textPath');
var _elm_lang$svg$Svg$text_ = _elm_lang$svg$Svg$node('text');
var _elm_lang$svg$Svg$tref = _elm_lang$svg$Svg$node('tref');
var _elm_lang$svg$Svg$tspan = _elm_lang$svg$Svg$node('tspan');
var _elm_lang$svg$Svg$clipPath = _elm_lang$svg$Svg$node('clipPath');
var _elm_lang$svg$Svg$colorProfile = _elm_lang$svg$Svg$node('colorProfile');
var _elm_lang$svg$Svg$cursor = _elm_lang$svg$Svg$node('cursor');
var _elm_lang$svg$Svg$filter = _elm_lang$svg$Svg$node('filter');
var _elm_lang$svg$Svg$script = _elm_lang$svg$Svg$node('script');
var _elm_lang$svg$Svg$style = _elm_lang$svg$Svg$node('style');
var _elm_lang$svg$Svg$view = _elm_lang$svg$Svg$node('view');

var _elm_lang$svg$Svg_Attributes$writingMode = _elm_lang$virtual_dom$VirtualDom$attribute('writing-mode');
var _elm_lang$svg$Svg_Attributes$wordSpacing = _elm_lang$virtual_dom$VirtualDom$attribute('word-spacing');
var _elm_lang$svg$Svg_Attributes$visibility = _elm_lang$virtual_dom$VirtualDom$attribute('visibility');
var _elm_lang$svg$Svg_Attributes$unicodeBidi = _elm_lang$virtual_dom$VirtualDom$attribute('unicode-bidi');
var _elm_lang$svg$Svg_Attributes$textRendering = _elm_lang$virtual_dom$VirtualDom$attribute('text-rendering');
var _elm_lang$svg$Svg_Attributes$textDecoration = _elm_lang$virtual_dom$VirtualDom$attribute('text-decoration');
var _elm_lang$svg$Svg_Attributes$textAnchor = _elm_lang$virtual_dom$VirtualDom$attribute('text-anchor');
var _elm_lang$svg$Svg_Attributes$stroke = _elm_lang$virtual_dom$VirtualDom$attribute('stroke');
var _elm_lang$svg$Svg_Attributes$strokeWidth = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-width');
var _elm_lang$svg$Svg_Attributes$strokeOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-opacity');
var _elm_lang$svg$Svg_Attributes$strokeMiterlimit = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-miterlimit');
var _elm_lang$svg$Svg_Attributes$strokeLinejoin = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-linejoin');
var _elm_lang$svg$Svg_Attributes$strokeLinecap = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-linecap');
var _elm_lang$svg$Svg_Attributes$strokeDashoffset = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-dashoffset');
var _elm_lang$svg$Svg_Attributes$strokeDasharray = _elm_lang$virtual_dom$VirtualDom$attribute('stroke-dasharray');
var _elm_lang$svg$Svg_Attributes$stopOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('stop-opacity');
var _elm_lang$svg$Svg_Attributes$stopColor = _elm_lang$virtual_dom$VirtualDom$attribute('stop-color');
var _elm_lang$svg$Svg_Attributes$shapeRendering = _elm_lang$virtual_dom$VirtualDom$attribute('shape-rendering');
var _elm_lang$svg$Svg_Attributes$pointerEvents = _elm_lang$virtual_dom$VirtualDom$attribute('pointer-events');
var _elm_lang$svg$Svg_Attributes$overflow = _elm_lang$virtual_dom$VirtualDom$attribute('overflow');
var _elm_lang$svg$Svg_Attributes$opacity = _elm_lang$virtual_dom$VirtualDom$attribute('opacity');
var _elm_lang$svg$Svg_Attributes$mask = _elm_lang$virtual_dom$VirtualDom$attribute('mask');
var _elm_lang$svg$Svg_Attributes$markerStart = _elm_lang$virtual_dom$VirtualDom$attribute('marker-start');
var _elm_lang$svg$Svg_Attributes$markerMid = _elm_lang$virtual_dom$VirtualDom$attribute('marker-mid');
var _elm_lang$svg$Svg_Attributes$markerEnd = _elm_lang$virtual_dom$VirtualDom$attribute('marker-end');
var _elm_lang$svg$Svg_Attributes$lightingColor = _elm_lang$virtual_dom$VirtualDom$attribute('lighting-color');
var _elm_lang$svg$Svg_Attributes$letterSpacing = _elm_lang$virtual_dom$VirtualDom$attribute('letter-spacing');
var _elm_lang$svg$Svg_Attributes$kerning = _elm_lang$virtual_dom$VirtualDom$attribute('kerning');
var _elm_lang$svg$Svg_Attributes$imageRendering = _elm_lang$virtual_dom$VirtualDom$attribute('image-rendering');
var _elm_lang$svg$Svg_Attributes$glyphOrientationVertical = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-orientation-vertical');
var _elm_lang$svg$Svg_Attributes$glyphOrientationHorizontal = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-orientation-horizontal');
var _elm_lang$svg$Svg_Attributes$fontWeight = _elm_lang$virtual_dom$VirtualDom$attribute('font-weight');
var _elm_lang$svg$Svg_Attributes$fontVariant = _elm_lang$virtual_dom$VirtualDom$attribute('font-variant');
var _elm_lang$svg$Svg_Attributes$fontStyle = _elm_lang$virtual_dom$VirtualDom$attribute('font-style');
var _elm_lang$svg$Svg_Attributes$fontStretch = _elm_lang$virtual_dom$VirtualDom$attribute('font-stretch');
var _elm_lang$svg$Svg_Attributes$fontSize = _elm_lang$virtual_dom$VirtualDom$attribute('font-size');
var _elm_lang$svg$Svg_Attributes$fontSizeAdjust = _elm_lang$virtual_dom$VirtualDom$attribute('font-size-adjust');
var _elm_lang$svg$Svg_Attributes$fontFamily = _elm_lang$virtual_dom$VirtualDom$attribute('font-family');
var _elm_lang$svg$Svg_Attributes$floodOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('flood-opacity');
var _elm_lang$svg$Svg_Attributes$floodColor = _elm_lang$virtual_dom$VirtualDom$attribute('flood-color');
var _elm_lang$svg$Svg_Attributes$filter = _elm_lang$virtual_dom$VirtualDom$attribute('filter');
var _elm_lang$svg$Svg_Attributes$fill = _elm_lang$virtual_dom$VirtualDom$attribute('fill');
var _elm_lang$svg$Svg_Attributes$fillRule = _elm_lang$virtual_dom$VirtualDom$attribute('fill-rule');
var _elm_lang$svg$Svg_Attributes$fillOpacity = _elm_lang$virtual_dom$VirtualDom$attribute('fill-opacity');
var _elm_lang$svg$Svg_Attributes$enableBackground = _elm_lang$virtual_dom$VirtualDom$attribute('enable-background');
var _elm_lang$svg$Svg_Attributes$dominantBaseline = _elm_lang$virtual_dom$VirtualDom$attribute('dominant-baseline');
var _elm_lang$svg$Svg_Attributes$display = _elm_lang$virtual_dom$VirtualDom$attribute('display');
var _elm_lang$svg$Svg_Attributes$direction = _elm_lang$virtual_dom$VirtualDom$attribute('direction');
var _elm_lang$svg$Svg_Attributes$cursor = _elm_lang$virtual_dom$VirtualDom$attribute('cursor');
var _elm_lang$svg$Svg_Attributes$color = _elm_lang$virtual_dom$VirtualDom$attribute('color');
var _elm_lang$svg$Svg_Attributes$colorRendering = _elm_lang$virtual_dom$VirtualDom$attribute('color-rendering');
var _elm_lang$svg$Svg_Attributes$colorProfile = _elm_lang$virtual_dom$VirtualDom$attribute('color-profile');
var _elm_lang$svg$Svg_Attributes$colorInterpolation = _elm_lang$virtual_dom$VirtualDom$attribute('color-interpolation');
var _elm_lang$svg$Svg_Attributes$colorInterpolationFilters = _elm_lang$virtual_dom$VirtualDom$attribute('color-interpolation-filters');
var _elm_lang$svg$Svg_Attributes$clip = _elm_lang$virtual_dom$VirtualDom$attribute('clip');
var _elm_lang$svg$Svg_Attributes$clipRule = _elm_lang$virtual_dom$VirtualDom$attribute('clip-rule');
var _elm_lang$svg$Svg_Attributes$clipPath = _elm_lang$virtual_dom$VirtualDom$attribute('clip-path');
var _elm_lang$svg$Svg_Attributes$baselineShift = _elm_lang$virtual_dom$VirtualDom$attribute('baseline-shift');
var _elm_lang$svg$Svg_Attributes$alignmentBaseline = _elm_lang$virtual_dom$VirtualDom$attribute('alignment-baseline');
var _elm_lang$svg$Svg_Attributes$zoomAndPan = _elm_lang$virtual_dom$VirtualDom$attribute('zoomAndPan');
var _elm_lang$svg$Svg_Attributes$z = _elm_lang$virtual_dom$VirtualDom$attribute('z');
var _elm_lang$svg$Svg_Attributes$yChannelSelector = _elm_lang$virtual_dom$VirtualDom$attribute('yChannelSelector');
var _elm_lang$svg$Svg_Attributes$y2 = _elm_lang$virtual_dom$VirtualDom$attribute('y2');
var _elm_lang$svg$Svg_Attributes$y1 = _elm_lang$virtual_dom$VirtualDom$attribute('y1');
var _elm_lang$svg$Svg_Attributes$y = _elm_lang$virtual_dom$VirtualDom$attribute('y');
var _elm_lang$svg$Svg_Attributes$xmlSpace = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:space');
var _elm_lang$svg$Svg_Attributes$xmlLang = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:lang');
var _elm_lang$svg$Svg_Attributes$xmlBase = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', 'xml:base');
var _elm_lang$svg$Svg_Attributes$xlinkType = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:type');
var _elm_lang$svg$Svg_Attributes$xlinkTitle = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:title');
var _elm_lang$svg$Svg_Attributes$xlinkShow = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:show');
var _elm_lang$svg$Svg_Attributes$xlinkRole = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:role');
var _elm_lang$svg$Svg_Attributes$xlinkHref = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:href');
var _elm_lang$svg$Svg_Attributes$xlinkArcrole = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:arcrole');
var _elm_lang$svg$Svg_Attributes$xlinkActuate = A2(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', 'xlink:actuate');
var _elm_lang$svg$Svg_Attributes$xChannelSelector = _elm_lang$virtual_dom$VirtualDom$attribute('xChannelSelector');
var _elm_lang$svg$Svg_Attributes$x2 = _elm_lang$virtual_dom$VirtualDom$attribute('x2');
var _elm_lang$svg$Svg_Attributes$x1 = _elm_lang$virtual_dom$VirtualDom$attribute('x1');
var _elm_lang$svg$Svg_Attributes$xHeight = _elm_lang$virtual_dom$VirtualDom$attribute('x-height');
var _elm_lang$svg$Svg_Attributes$x = _elm_lang$virtual_dom$VirtualDom$attribute('x');
var _elm_lang$svg$Svg_Attributes$widths = _elm_lang$virtual_dom$VirtualDom$attribute('widths');
var _elm_lang$svg$Svg_Attributes$width = _elm_lang$virtual_dom$VirtualDom$attribute('width');
var _elm_lang$svg$Svg_Attributes$viewTarget = _elm_lang$virtual_dom$VirtualDom$attribute('viewTarget');
var _elm_lang$svg$Svg_Attributes$viewBox = _elm_lang$virtual_dom$VirtualDom$attribute('viewBox');
var _elm_lang$svg$Svg_Attributes$vertOriginY = _elm_lang$virtual_dom$VirtualDom$attribute('vert-origin-y');
var _elm_lang$svg$Svg_Attributes$vertOriginX = _elm_lang$virtual_dom$VirtualDom$attribute('vert-origin-x');
var _elm_lang$svg$Svg_Attributes$vertAdvY = _elm_lang$virtual_dom$VirtualDom$attribute('vert-adv-y');
var _elm_lang$svg$Svg_Attributes$version = _elm_lang$virtual_dom$VirtualDom$attribute('version');
var _elm_lang$svg$Svg_Attributes$values = _elm_lang$virtual_dom$VirtualDom$attribute('values');
var _elm_lang$svg$Svg_Attributes$vMathematical = _elm_lang$virtual_dom$VirtualDom$attribute('v-mathematical');
var _elm_lang$svg$Svg_Attributes$vIdeographic = _elm_lang$virtual_dom$VirtualDom$attribute('v-ideographic');
var _elm_lang$svg$Svg_Attributes$vHanging = _elm_lang$virtual_dom$VirtualDom$attribute('v-hanging');
var _elm_lang$svg$Svg_Attributes$vAlphabetic = _elm_lang$virtual_dom$VirtualDom$attribute('v-alphabetic');
var _elm_lang$svg$Svg_Attributes$unitsPerEm = _elm_lang$virtual_dom$VirtualDom$attribute('units-per-em');
var _elm_lang$svg$Svg_Attributes$unicodeRange = _elm_lang$virtual_dom$VirtualDom$attribute('unicode-range');
var _elm_lang$svg$Svg_Attributes$unicode = _elm_lang$virtual_dom$VirtualDom$attribute('unicode');
var _elm_lang$svg$Svg_Attributes$underlineThickness = _elm_lang$virtual_dom$VirtualDom$attribute('underline-thickness');
var _elm_lang$svg$Svg_Attributes$underlinePosition = _elm_lang$virtual_dom$VirtualDom$attribute('underline-position');
var _elm_lang$svg$Svg_Attributes$u2 = _elm_lang$virtual_dom$VirtualDom$attribute('u2');
var _elm_lang$svg$Svg_Attributes$u1 = _elm_lang$virtual_dom$VirtualDom$attribute('u1');
var _elm_lang$svg$Svg_Attributes$type_ = _elm_lang$virtual_dom$VirtualDom$attribute('type');
var _elm_lang$svg$Svg_Attributes$transform = _elm_lang$virtual_dom$VirtualDom$attribute('transform');
var _elm_lang$svg$Svg_Attributes$to = _elm_lang$virtual_dom$VirtualDom$attribute('to');
var _elm_lang$svg$Svg_Attributes$title = _elm_lang$virtual_dom$VirtualDom$attribute('title');
var _elm_lang$svg$Svg_Attributes$textLength = _elm_lang$virtual_dom$VirtualDom$attribute('textLength');
var _elm_lang$svg$Svg_Attributes$targetY = _elm_lang$virtual_dom$VirtualDom$attribute('targetY');
var _elm_lang$svg$Svg_Attributes$targetX = _elm_lang$virtual_dom$VirtualDom$attribute('targetX');
var _elm_lang$svg$Svg_Attributes$target = _elm_lang$virtual_dom$VirtualDom$attribute('target');
var _elm_lang$svg$Svg_Attributes$tableValues = _elm_lang$virtual_dom$VirtualDom$attribute('tableValues');
var _elm_lang$svg$Svg_Attributes$systemLanguage = _elm_lang$virtual_dom$VirtualDom$attribute('systemLanguage');
var _elm_lang$svg$Svg_Attributes$surfaceScale = _elm_lang$virtual_dom$VirtualDom$attribute('surfaceScale');
var _elm_lang$svg$Svg_Attributes$style = _elm_lang$virtual_dom$VirtualDom$attribute('style');
var _elm_lang$svg$Svg_Attributes$string = _elm_lang$virtual_dom$VirtualDom$attribute('string');
var _elm_lang$svg$Svg_Attributes$strikethroughThickness = _elm_lang$virtual_dom$VirtualDom$attribute('strikethrough-thickness');
var _elm_lang$svg$Svg_Attributes$strikethroughPosition = _elm_lang$virtual_dom$VirtualDom$attribute('strikethrough-position');
var _elm_lang$svg$Svg_Attributes$stitchTiles = _elm_lang$virtual_dom$VirtualDom$attribute('stitchTiles');
var _elm_lang$svg$Svg_Attributes$stemv = _elm_lang$virtual_dom$VirtualDom$attribute('stemv');
var _elm_lang$svg$Svg_Attributes$stemh = _elm_lang$virtual_dom$VirtualDom$attribute('stemh');
var _elm_lang$svg$Svg_Attributes$stdDeviation = _elm_lang$virtual_dom$VirtualDom$attribute('stdDeviation');
var _elm_lang$svg$Svg_Attributes$startOffset = _elm_lang$virtual_dom$VirtualDom$attribute('startOffset');
var _elm_lang$svg$Svg_Attributes$spreadMethod = _elm_lang$virtual_dom$VirtualDom$attribute('spreadMethod');
var _elm_lang$svg$Svg_Attributes$speed = _elm_lang$virtual_dom$VirtualDom$attribute('speed');
var _elm_lang$svg$Svg_Attributes$specularExponent = _elm_lang$virtual_dom$VirtualDom$attribute('specularExponent');
var _elm_lang$svg$Svg_Attributes$specularConstant = _elm_lang$virtual_dom$VirtualDom$attribute('specularConstant');
var _elm_lang$svg$Svg_Attributes$spacing = _elm_lang$virtual_dom$VirtualDom$attribute('spacing');
var _elm_lang$svg$Svg_Attributes$slope = _elm_lang$virtual_dom$VirtualDom$attribute('slope');
var _elm_lang$svg$Svg_Attributes$seed = _elm_lang$virtual_dom$VirtualDom$attribute('seed');
var _elm_lang$svg$Svg_Attributes$scale = _elm_lang$virtual_dom$VirtualDom$attribute('scale');
var _elm_lang$svg$Svg_Attributes$ry = _elm_lang$virtual_dom$VirtualDom$attribute('ry');
var _elm_lang$svg$Svg_Attributes$rx = _elm_lang$virtual_dom$VirtualDom$attribute('rx');
var _elm_lang$svg$Svg_Attributes$rotate = _elm_lang$virtual_dom$VirtualDom$attribute('rotate');
var _elm_lang$svg$Svg_Attributes$result = _elm_lang$virtual_dom$VirtualDom$attribute('result');
var _elm_lang$svg$Svg_Attributes$restart = _elm_lang$virtual_dom$VirtualDom$attribute('restart');
var _elm_lang$svg$Svg_Attributes$requiredFeatures = _elm_lang$virtual_dom$VirtualDom$attribute('requiredFeatures');
var _elm_lang$svg$Svg_Attributes$requiredExtensions = _elm_lang$virtual_dom$VirtualDom$attribute('requiredExtensions');
var _elm_lang$svg$Svg_Attributes$repeatDur = _elm_lang$virtual_dom$VirtualDom$attribute('repeatDur');
var _elm_lang$svg$Svg_Attributes$repeatCount = _elm_lang$virtual_dom$VirtualDom$attribute('repeatCount');
var _elm_lang$svg$Svg_Attributes$renderingIntent = _elm_lang$virtual_dom$VirtualDom$attribute('rendering-intent');
var _elm_lang$svg$Svg_Attributes$refY = _elm_lang$virtual_dom$VirtualDom$attribute('refY');
var _elm_lang$svg$Svg_Attributes$refX = _elm_lang$virtual_dom$VirtualDom$attribute('refX');
var _elm_lang$svg$Svg_Attributes$radius = _elm_lang$virtual_dom$VirtualDom$attribute('radius');
var _elm_lang$svg$Svg_Attributes$r = _elm_lang$virtual_dom$VirtualDom$attribute('r');
var _elm_lang$svg$Svg_Attributes$primitiveUnits = _elm_lang$virtual_dom$VirtualDom$attribute('primitiveUnits');
var _elm_lang$svg$Svg_Attributes$preserveAspectRatio = _elm_lang$virtual_dom$VirtualDom$attribute('preserveAspectRatio');
var _elm_lang$svg$Svg_Attributes$preserveAlpha = _elm_lang$virtual_dom$VirtualDom$attribute('preserveAlpha');
var _elm_lang$svg$Svg_Attributes$pointsAtZ = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtZ');
var _elm_lang$svg$Svg_Attributes$pointsAtY = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtY');
var _elm_lang$svg$Svg_Attributes$pointsAtX = _elm_lang$virtual_dom$VirtualDom$attribute('pointsAtX');
var _elm_lang$svg$Svg_Attributes$points = _elm_lang$virtual_dom$VirtualDom$attribute('points');
var _elm_lang$svg$Svg_Attributes$pointOrder = _elm_lang$virtual_dom$VirtualDom$attribute('point-order');
var _elm_lang$svg$Svg_Attributes$patternUnits = _elm_lang$virtual_dom$VirtualDom$attribute('patternUnits');
var _elm_lang$svg$Svg_Attributes$patternTransform = _elm_lang$virtual_dom$VirtualDom$attribute('patternTransform');
var _elm_lang$svg$Svg_Attributes$patternContentUnits = _elm_lang$virtual_dom$VirtualDom$attribute('patternContentUnits');
var _elm_lang$svg$Svg_Attributes$pathLength = _elm_lang$virtual_dom$VirtualDom$attribute('pathLength');
var _elm_lang$svg$Svg_Attributes$path = _elm_lang$virtual_dom$VirtualDom$attribute('path');
var _elm_lang$svg$Svg_Attributes$panose1 = _elm_lang$virtual_dom$VirtualDom$attribute('panose-1');
var _elm_lang$svg$Svg_Attributes$overlineThickness = _elm_lang$virtual_dom$VirtualDom$attribute('overline-thickness');
var _elm_lang$svg$Svg_Attributes$overlinePosition = _elm_lang$virtual_dom$VirtualDom$attribute('overline-position');
var _elm_lang$svg$Svg_Attributes$origin = _elm_lang$virtual_dom$VirtualDom$attribute('origin');
var _elm_lang$svg$Svg_Attributes$orientation = _elm_lang$virtual_dom$VirtualDom$attribute('orientation');
var _elm_lang$svg$Svg_Attributes$orient = _elm_lang$virtual_dom$VirtualDom$attribute('orient');
var _elm_lang$svg$Svg_Attributes$order = _elm_lang$virtual_dom$VirtualDom$attribute('order');
var _elm_lang$svg$Svg_Attributes$operator = _elm_lang$virtual_dom$VirtualDom$attribute('operator');
var _elm_lang$svg$Svg_Attributes$offset = _elm_lang$virtual_dom$VirtualDom$attribute('offset');
var _elm_lang$svg$Svg_Attributes$numOctaves = _elm_lang$virtual_dom$VirtualDom$attribute('numOctaves');
var _elm_lang$svg$Svg_Attributes$name = _elm_lang$virtual_dom$VirtualDom$attribute('name');
var _elm_lang$svg$Svg_Attributes$mode = _elm_lang$virtual_dom$VirtualDom$attribute('mode');
var _elm_lang$svg$Svg_Attributes$min = _elm_lang$virtual_dom$VirtualDom$attribute('min');
var _elm_lang$svg$Svg_Attributes$method = _elm_lang$virtual_dom$VirtualDom$attribute('method');
var _elm_lang$svg$Svg_Attributes$media = _elm_lang$virtual_dom$VirtualDom$attribute('media');
var _elm_lang$svg$Svg_Attributes$max = _elm_lang$virtual_dom$VirtualDom$attribute('max');
var _elm_lang$svg$Svg_Attributes$mathematical = _elm_lang$virtual_dom$VirtualDom$attribute('mathematical');
var _elm_lang$svg$Svg_Attributes$maskUnits = _elm_lang$virtual_dom$VirtualDom$attribute('maskUnits');
var _elm_lang$svg$Svg_Attributes$maskContentUnits = _elm_lang$virtual_dom$VirtualDom$attribute('maskContentUnits');
var _elm_lang$svg$Svg_Attributes$markerWidth = _elm_lang$virtual_dom$VirtualDom$attribute('markerWidth');
var _elm_lang$svg$Svg_Attributes$markerUnits = _elm_lang$virtual_dom$VirtualDom$attribute('markerUnits');
var _elm_lang$svg$Svg_Attributes$markerHeight = _elm_lang$virtual_dom$VirtualDom$attribute('markerHeight');
var _elm_lang$svg$Svg_Attributes$local = _elm_lang$virtual_dom$VirtualDom$attribute('local');
var _elm_lang$svg$Svg_Attributes$limitingConeAngle = _elm_lang$virtual_dom$VirtualDom$attribute('limitingConeAngle');
var _elm_lang$svg$Svg_Attributes$lengthAdjust = _elm_lang$virtual_dom$VirtualDom$attribute('lengthAdjust');
var _elm_lang$svg$Svg_Attributes$lang = _elm_lang$virtual_dom$VirtualDom$attribute('lang');
var _elm_lang$svg$Svg_Attributes$keyTimes = _elm_lang$virtual_dom$VirtualDom$attribute('keyTimes');
var _elm_lang$svg$Svg_Attributes$keySplines = _elm_lang$virtual_dom$VirtualDom$attribute('keySplines');
var _elm_lang$svg$Svg_Attributes$keyPoints = _elm_lang$virtual_dom$VirtualDom$attribute('keyPoints');
var _elm_lang$svg$Svg_Attributes$kernelUnitLength = _elm_lang$virtual_dom$VirtualDom$attribute('kernelUnitLength');
var _elm_lang$svg$Svg_Attributes$kernelMatrix = _elm_lang$virtual_dom$VirtualDom$attribute('kernelMatrix');
var _elm_lang$svg$Svg_Attributes$k4 = _elm_lang$virtual_dom$VirtualDom$attribute('k4');
var _elm_lang$svg$Svg_Attributes$k3 = _elm_lang$virtual_dom$VirtualDom$attribute('k3');
var _elm_lang$svg$Svg_Attributes$k2 = _elm_lang$virtual_dom$VirtualDom$attribute('k2');
var _elm_lang$svg$Svg_Attributes$k1 = _elm_lang$virtual_dom$VirtualDom$attribute('k1');
var _elm_lang$svg$Svg_Attributes$k = _elm_lang$virtual_dom$VirtualDom$attribute('k');
var _elm_lang$svg$Svg_Attributes$intercept = _elm_lang$virtual_dom$VirtualDom$attribute('intercept');
var _elm_lang$svg$Svg_Attributes$in2 = _elm_lang$virtual_dom$VirtualDom$attribute('in2');
var _elm_lang$svg$Svg_Attributes$in_ = _elm_lang$virtual_dom$VirtualDom$attribute('in');
var _elm_lang$svg$Svg_Attributes$ideographic = _elm_lang$virtual_dom$VirtualDom$attribute('ideographic');
var _elm_lang$svg$Svg_Attributes$id = _elm_lang$virtual_dom$VirtualDom$attribute('id');
var _elm_lang$svg$Svg_Attributes$horizOriginY = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-origin-y');
var _elm_lang$svg$Svg_Attributes$horizOriginX = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-origin-x');
var _elm_lang$svg$Svg_Attributes$horizAdvX = _elm_lang$virtual_dom$VirtualDom$attribute('horiz-adv-x');
var _elm_lang$svg$Svg_Attributes$height = _elm_lang$virtual_dom$VirtualDom$attribute('height');
var _elm_lang$svg$Svg_Attributes$hanging = _elm_lang$virtual_dom$VirtualDom$attribute('hanging');
var _elm_lang$svg$Svg_Attributes$gradientUnits = _elm_lang$virtual_dom$VirtualDom$attribute('gradientUnits');
var _elm_lang$svg$Svg_Attributes$gradientTransform = _elm_lang$virtual_dom$VirtualDom$attribute('gradientTransform');
var _elm_lang$svg$Svg_Attributes$glyphRef = _elm_lang$virtual_dom$VirtualDom$attribute('glyphRef');
var _elm_lang$svg$Svg_Attributes$glyphName = _elm_lang$virtual_dom$VirtualDom$attribute('glyph-name');
var _elm_lang$svg$Svg_Attributes$g2 = _elm_lang$virtual_dom$VirtualDom$attribute('g2');
var _elm_lang$svg$Svg_Attributes$g1 = _elm_lang$virtual_dom$VirtualDom$attribute('g1');
var _elm_lang$svg$Svg_Attributes$fy = _elm_lang$virtual_dom$VirtualDom$attribute('fy');
var _elm_lang$svg$Svg_Attributes$fx = _elm_lang$virtual_dom$VirtualDom$attribute('fx');
var _elm_lang$svg$Svg_Attributes$from = _elm_lang$virtual_dom$VirtualDom$attribute('from');
var _elm_lang$svg$Svg_Attributes$format = _elm_lang$virtual_dom$VirtualDom$attribute('format');
var _elm_lang$svg$Svg_Attributes$filterUnits = _elm_lang$virtual_dom$VirtualDom$attribute('filterUnits');
var _elm_lang$svg$Svg_Attributes$filterRes = _elm_lang$virtual_dom$VirtualDom$attribute('filterRes');
var _elm_lang$svg$Svg_Attributes$externalResourcesRequired = _elm_lang$virtual_dom$VirtualDom$attribute('externalResourcesRequired');
var _elm_lang$svg$Svg_Attributes$exponent = _elm_lang$virtual_dom$VirtualDom$attribute('exponent');
var _elm_lang$svg$Svg_Attributes$end = _elm_lang$virtual_dom$VirtualDom$attribute('end');
var _elm_lang$svg$Svg_Attributes$elevation = _elm_lang$virtual_dom$VirtualDom$attribute('elevation');
var _elm_lang$svg$Svg_Attributes$edgeMode = _elm_lang$virtual_dom$VirtualDom$attribute('edgeMode');
var _elm_lang$svg$Svg_Attributes$dy = _elm_lang$virtual_dom$VirtualDom$attribute('dy');
var _elm_lang$svg$Svg_Attributes$dx = _elm_lang$virtual_dom$VirtualDom$attribute('dx');
var _elm_lang$svg$Svg_Attributes$dur = _elm_lang$virtual_dom$VirtualDom$attribute('dur');
var _elm_lang$svg$Svg_Attributes$divisor = _elm_lang$virtual_dom$VirtualDom$attribute('divisor');
var _elm_lang$svg$Svg_Attributes$diffuseConstant = _elm_lang$virtual_dom$VirtualDom$attribute('diffuseConstant');
var _elm_lang$svg$Svg_Attributes$descent = _elm_lang$virtual_dom$VirtualDom$attribute('descent');
var _elm_lang$svg$Svg_Attributes$decelerate = _elm_lang$virtual_dom$VirtualDom$attribute('decelerate');
var _elm_lang$svg$Svg_Attributes$d = _elm_lang$virtual_dom$VirtualDom$attribute('d');
var _elm_lang$svg$Svg_Attributes$cy = _elm_lang$virtual_dom$VirtualDom$attribute('cy');
var _elm_lang$svg$Svg_Attributes$cx = _elm_lang$virtual_dom$VirtualDom$attribute('cx');
var _elm_lang$svg$Svg_Attributes$contentStyleType = _elm_lang$virtual_dom$VirtualDom$attribute('contentStyleType');
var _elm_lang$svg$Svg_Attributes$contentScriptType = _elm_lang$virtual_dom$VirtualDom$attribute('contentScriptType');
var _elm_lang$svg$Svg_Attributes$clipPathUnits = _elm_lang$virtual_dom$VirtualDom$attribute('clipPathUnits');
var _elm_lang$svg$Svg_Attributes$class = _elm_lang$virtual_dom$VirtualDom$attribute('class');
var _elm_lang$svg$Svg_Attributes$capHeight = _elm_lang$virtual_dom$VirtualDom$attribute('cap-height');
var _elm_lang$svg$Svg_Attributes$calcMode = _elm_lang$virtual_dom$VirtualDom$attribute('calcMode');
var _elm_lang$svg$Svg_Attributes$by = _elm_lang$virtual_dom$VirtualDom$attribute('by');
var _elm_lang$svg$Svg_Attributes$bias = _elm_lang$virtual_dom$VirtualDom$attribute('bias');
var _elm_lang$svg$Svg_Attributes$begin = _elm_lang$virtual_dom$VirtualDom$attribute('begin');
var _elm_lang$svg$Svg_Attributes$bbox = _elm_lang$virtual_dom$VirtualDom$attribute('bbox');
var _elm_lang$svg$Svg_Attributes$baseProfile = _elm_lang$virtual_dom$VirtualDom$attribute('baseProfile');
var _elm_lang$svg$Svg_Attributes$baseFrequency = _elm_lang$virtual_dom$VirtualDom$attribute('baseFrequency');
var _elm_lang$svg$Svg_Attributes$azimuth = _elm_lang$virtual_dom$VirtualDom$attribute('azimuth');
var _elm_lang$svg$Svg_Attributes$autoReverse = _elm_lang$virtual_dom$VirtualDom$attribute('autoReverse');
var _elm_lang$svg$Svg_Attributes$attributeType = _elm_lang$virtual_dom$VirtualDom$attribute('attributeType');
var _elm_lang$svg$Svg_Attributes$attributeName = _elm_lang$virtual_dom$VirtualDom$attribute('attributeName');
var _elm_lang$svg$Svg_Attributes$ascent = _elm_lang$virtual_dom$VirtualDom$attribute('ascent');
var _elm_lang$svg$Svg_Attributes$arabicForm = _elm_lang$virtual_dom$VirtualDom$attribute('arabic-form');
var _elm_lang$svg$Svg_Attributes$amplitude = _elm_lang$virtual_dom$VirtualDom$attribute('amplitude');
var _elm_lang$svg$Svg_Attributes$allowReorder = _elm_lang$virtual_dom$VirtualDom$attribute('allowReorder');
var _elm_lang$svg$Svg_Attributes$alphabetic = _elm_lang$virtual_dom$VirtualDom$attribute('alphabetic');
var _elm_lang$svg$Svg_Attributes$additive = _elm_lang$virtual_dom$VirtualDom$attribute('additive');
var _elm_lang$svg$Svg_Attributes$accumulate = _elm_lang$virtual_dom$VirtualDom$attribute('accumulate');
var _elm_lang$svg$Svg_Attributes$accelerate = _elm_lang$virtual_dom$VirtualDom$attribute('accelerate');
var _elm_lang$svg$Svg_Attributes$accentHeight = _elm_lang$virtual_dom$VirtualDom$attribute('accent-height');

var _elm_lang$svg$Svg_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$svg$Svg_Events$simpleOn = F2(
	function (name, msg) {
		return A2(
			_elm_lang$svg$Svg_Events$on,
			name,
			_elm_lang$core$Json_Decode$succeed(msg));
	});
var _elm_lang$svg$Svg_Events$onBegin = _elm_lang$svg$Svg_Events$simpleOn('begin');
var _elm_lang$svg$Svg_Events$onEnd = _elm_lang$svg$Svg_Events$simpleOn('end');
var _elm_lang$svg$Svg_Events$onRepeat = _elm_lang$svg$Svg_Events$simpleOn('repeat');
var _elm_lang$svg$Svg_Events$onAbort = _elm_lang$svg$Svg_Events$simpleOn('abort');
var _elm_lang$svg$Svg_Events$onError = _elm_lang$svg$Svg_Events$simpleOn('error');
var _elm_lang$svg$Svg_Events$onResize = _elm_lang$svg$Svg_Events$simpleOn('resize');
var _elm_lang$svg$Svg_Events$onScroll = _elm_lang$svg$Svg_Events$simpleOn('scroll');
var _elm_lang$svg$Svg_Events$onLoad = _elm_lang$svg$Svg_Events$simpleOn('load');
var _elm_lang$svg$Svg_Events$onUnload = _elm_lang$svg$Svg_Events$simpleOn('unload');
var _elm_lang$svg$Svg_Events$onZoom = _elm_lang$svg$Svg_Events$simpleOn('zoom');
var _elm_lang$svg$Svg_Events$onActivate = _elm_lang$svg$Svg_Events$simpleOn('activate');
var _elm_lang$svg$Svg_Events$onClick = _elm_lang$svg$Svg_Events$simpleOn('click');
var _elm_lang$svg$Svg_Events$onFocusIn = _elm_lang$svg$Svg_Events$simpleOn('focusin');
var _elm_lang$svg$Svg_Events$onFocusOut = _elm_lang$svg$Svg_Events$simpleOn('focusout');
var _elm_lang$svg$Svg_Events$onMouseDown = _elm_lang$svg$Svg_Events$simpleOn('mousedown');
var _elm_lang$svg$Svg_Events$onMouseMove = _elm_lang$svg$Svg_Events$simpleOn('mousemove');
var _elm_lang$svg$Svg_Events$onMouseOut = _elm_lang$svg$Svg_Events$simpleOn('mouseout');
var _elm_lang$svg$Svg_Events$onMouseOver = _elm_lang$svg$Svg_Events$simpleOn('mouseover');
var _elm_lang$svg$Svg_Events$onMouseUp = _elm_lang$svg$Svg_Events$simpleOn('mouseup');

var _elm_lang$window$Native_Window = function()
{

var size = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)	{
	callback(_elm_lang$core$Native_Scheduler.succeed({
		width: window.innerWidth,
		height: window.innerHeight
	}));
});

return {
	size: size
};

}();
var _elm_lang$window$Window_ops = _elm_lang$window$Window_ops || {};
_elm_lang$window$Window_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$window$Window$onSelfMsg = F3(
	function (router, dimensions, state) {
		var _p1 = state;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			var send = function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p3._0(dimensions));
			};
			return A2(
				_elm_lang$window$Window_ops['&>'],
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p1._0.subs)),
				_elm_lang$core$Task$succeed(state));
		}
	});
var _elm_lang$window$Window$init = _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
var _elm_lang$window$Window$size = _elm_lang$window$Native_Window.size;
var _elm_lang$window$Window$width = A2(
	_elm_lang$core$Task$map,
	function (_) {
		return _.width;
	},
	_elm_lang$window$Window$size);
var _elm_lang$window$Window$height = A2(
	_elm_lang$core$Task$map,
	function (_) {
		return _.height;
	},
	_elm_lang$window$Window$size);
var _elm_lang$window$Window$onEffects = F3(
	function (router, newSubs, oldState) {
		var _p4 = {ctor: '_Tuple2', _0: oldState, _1: newSubs};
		if (_p4._0.ctor === 'Nothing') {
			if (_p4._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					function (pid) {
						return _elm_lang$core$Task$succeed(
							_elm_lang$core$Maybe$Just(
								{subs: newSubs, pid: pid}));
					},
					_elm_lang$core$Process$spawn(
						A3(
							_elm_lang$dom$Dom_LowLevel$onWindow,
							'resize',
							_elm_lang$core$Json_Decode$succeed(
								{ctor: '_Tuple0'}),
							function (_p5) {
								return A2(
									_elm_lang$core$Task$andThen,
									_elm_lang$core$Platform$sendToSelf(router),
									_elm_lang$window$Window$size);
							})));
			}
		} else {
			if (_p4._1.ctor === '[]') {
				return A2(
					_elm_lang$window$Window_ops['&>'],
					_elm_lang$core$Process$kill(_p4._0._0.pid),
					_elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing));
			} else {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Maybe$Just(
						{subs: newSubs, pid: _p4._0._0.pid}));
			}
		}
	});
var _elm_lang$window$Window$subscription = _elm_lang$core$Native_Platform.leaf('Window');
var _elm_lang$window$Window$Size = F2(
	function (a, b) {
		return {width: a, height: b};
	});
var _elm_lang$window$Window$MySub = function (a) {
	return {ctor: 'MySub', _0: a};
};
var _elm_lang$window$Window$resizes = function (tagger) {
	return _elm_lang$window$Window$subscription(
		_elm_lang$window$Window$MySub(tagger));
};
var _elm_lang$window$Window$subMap = F2(
	function (func, _p6) {
		var _p7 = _p6;
		return _elm_lang$window$Window$MySub(
			function (_p8) {
				return func(
					_p7._0(_p8));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Window'] = {pkg: 'elm-lang/window', init: _elm_lang$window$Window$init, onEffects: _elm_lang$window$Window$onEffects, onSelfMsg: _elm_lang$window$Window$onSelfMsg, tag: 'sub', subMap: _elm_lang$window$Window$subMap};

var _elam03$elam03_github_io$Cityscape$displayRandomValue = function (_p0) {
	var _p1 = _p0;
	var x = _elm_lang$core$Basics$toFloat(_p1._0);
	return A2(
		_evancz$elm_graphics$Collage$traced,
		_evancz$elm_graphics$Collage$solid(_elm_lang$core$Color$red),
		_evancz$elm_graphics$Collage$path(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: x, _1: 0},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: x, _1: _p1._1 * 100},
					_1: {ctor: '[]'}
				}
			}));
};
var _elam03$elam03_github_io$Cityscape$displayModelInfo = function (model) {
	if (model.showInfo) {
		var randomValues = A2(
			_elm_lang$core$List$map,
			_elam03$elam03_github_io$Cityscape$displayRandomValue,
			A3(
				_elm_lang$core$List$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				A2(
					_elm_lang$core$List$range,
					1,
					_elm_lang$core$Array$length(model.randomValues)),
				_elm_lang$core$Array$toList(model.randomValues)));
		var movementType = model.movementType;
		var firstBuilding = A2(
			_elm_lang$core$Maybe$withDefault,
			_elam03$elam03_github_io$Building$nullBuilding,
			_elm_lang$core$List$head(model.buildings));
		var _p2 = {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toFloat(model.windowWidth),
			_1: _elm_lang$core$Basics$toFloat(model.windowHeight)
		};
		var ww = _p2._0;
		var wh = _p2._1;
		var keys = A2(
			_elm_lang$core$List$map,
			function (key) {
				return _elm_lang$core$Char$fromCode(key);
			},
			_elm_lang$core$Set$toList(model.keys));
		var dt = _elm_lang$core$Basics$round(model.dt);
		var t = _elm_lang$core$Basics$round(model.t);
		var d = {ctor: '_Tuple2', _0: model.dx, _1: model.dy};
		var m = {ctor: '_Tuple2', _0: model.x, _1: model.y};
		var allInfo = {
			ctor: '::',
			_0: _evancz$elm_graphics$Element$show(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'(x,y): ',
					_elm_lang$core$Basics$toString(m))),
			_1: {
				ctor: '::',
				_0: _evancz$elm_graphics$Element$show(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'(dx,dy): ',
						_elm_lang$core$Basics$toString(d))),
				_1: {
					ctor: '::',
					_0: _evancz$elm_graphics$Element$show(
						A2(
							_elm_lang$core$Basics_ops['++'],
							't: ',
							_elm_lang$core$Basics$toString(t))),
					_1: {
						ctor: '::',
						_0: _evancz$elm_graphics$Element$show(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'dt: ',
								_elm_lang$core$Basics$toString(dt))),
						_1: {
							ctor: '::',
							_0: _evancz$elm_graphics$Element$show(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'keys: ',
									_elm_lang$core$Basics$toString(keys))),
							_1: {
								ctor: '::',
								_0: _evancz$elm_graphics$Element$show(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'(ww, wh): ',
										_elm_lang$core$Basics$toString(
											{ctor: '_Tuple2', _0: ww, _1: wh}))),
								_1: {
									ctor: '::',
									_0: _evancz$elm_graphics$Element$show(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'buildings: ',
											_elm_lang$core$Basics$toString(
												_elm_lang$core$List$length(model.buildings)))),
									_1: {
										ctor: '::',
										_0: _evancz$elm_graphics$Element$show(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'first building: ',
												_elm_lang$core$Basics$toString(
													_elm_lang$core$Basics$round(firstBuilding.x)))),
										_1: {
											ctor: '::',
											_0: _evancz$elm_graphics$Element$show(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'movementType: ',
													_elm_lang$core$Basics$toString(movementType))),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		};
		var formsToDisplay = A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _evancz$elm_graphics$Collage$toForm(
					A2(_evancz$elm_graphics$Element$flow, _evancz$elm_graphics$Element$down, allInfo)),
				_1: {ctor: '[]'}
			},
			randomValues);
		return A2(
			_elm_lang$core$List$map,
			function (a) {
				return A2(
					_evancz$elm_graphics$Collage$move,
					{ctor: '_Tuple2', _0: ((0 - ww) / 2) + 80, _1: (wh / 2) - 100},
					a);
			},
			formsToDisplay);
	} else {
		return {ctor: '[]'};
	}
};
var _elam03$elam03_github_io$Cityscape$displayMouseCursor = F2(
	function (_p3, model) {
		var _p4 = _p3;
		var a = model.t;
		var p = {
			ctor: '_Tuple2',
			_0: _p4._0 - (_elm_lang$core$Basics$toFloat(model.windowWidth) / 2),
			_1: _p4._1 + (_elm_lang$core$Basics$toFloat(model.windowHeight) / 2)
		};
		return {
			ctor: '::',
			_0: A2(
				_evancz$elm_graphics$Collage$rotate,
				_elm_lang$core$Basics$degrees(a),
				A2(
					_evancz$elm_graphics$Collage$move,
					p,
					A2(
						_evancz$elm_graphics$Collage$filled,
						_elm_lang$core$Color$red,
						A2(_evancz$elm_graphics$Collage$ngon, 3, 5)))),
			_1: {ctor: '[]'}
		};
	});
var _elam03$elam03_github_io$Cityscape$viewWithSvg = function (model) {
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('120'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height('120'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 120 120'),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$rect,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$rotate('45'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x('10'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y('10'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('100'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$rx('15'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$ry('15'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		});
};
var _elam03$elam03_github_io$Cityscape$viewTree = function (t) {
	var leaves = {
		ctor: '::',
		_0: A2(
			_evancz$elm_graphics$Collage$move,
			{ctor: '_Tuple2', _0: t.x + (t.w / 2), _1: t.y + t.h},
			A2(
				_evancz$elm_graphics$Collage$rotate,
				_elm_lang$core$Basics$degrees(t.currRotation),
				A2(
					_evancz$elm_graphics$Collage$filled,
					t.color,
					A2(_evancz$elm_graphics$Collage$ngon, t.leafEdgeCount, t.w / 2)))),
		_1: {ctor: '[]'}
	};
	var trunk = {
		ctor: '::',
		_0: A2(
			_evancz$elm_graphics$Collage$move,
			{ctor: '_Tuple2', _0: t.x + (t.w / 2), _1: t.y + (t.h / 2)},
			A2(
				_evancz$elm_graphics$Collage$filled,
				_elm_lang$core$Color$brown,
				A2(_evancz$elm_graphics$Collage$rect, t.trunkWidth, t.h))),
		_1: {ctor: '[]'}
	};
	return _evancz$elm_graphics$Collage$group(
		A2(_elm_lang$core$Basics_ops['++'], trunk, leaves));
};
var _elam03$elam03_github_io$Cityscape$grad = F2(
	function (y, h) {
		var split = 0.75;
		var center = y - (h * (1.0 - split));
		return A3(
			_elm_lang$core$Color$linear,
			{ctor: '_Tuple2', _0: 0, _1: center + h},
			{ctor: '_Tuple2', _0: 0, _1: center},
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 0.0,
					_1: A3(_elm_lang$core$Color$rgb, 0, 171, 235)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: split,
						_1: A3(_elm_lang$core$Color$rgb, 255, 192, 64)
					},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: split, _1: _elm_lang$core$Color$brown},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 1.0,
								_1: A3(_elm_lang$core$Color$rgb, 38, 192, 0)
							},
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _elam03$elam03_github_io$Cityscape$viewSunset = function (model) {
	var h = _elm_lang$core$Basics$toFloat(model.windowHeight);
	var w = _elm_lang$core$Basics$toFloat(model.windowWidth);
	return A2(
		_evancz$elm_graphics$Collage$gradient,
		A2(_elam03$elam03_github_io$Cityscape$grad, model.sunset.y, model.sunset.h),
		A2(_evancz$elm_graphics$Collage$rect, w, h));
};
var _elam03$elam03_github_io$Cityscape$viewWithHtml = function (model) {
	var attributes = {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$class('cityscape'),
		_1: {ctor: '[]'}
	};
	var trees = A2(_elm_lang$core$List$map, _elam03$elam03_github_io$Cityscape$viewTree, model.trees);
	var sunset = _elam03$elam03_github_io$Cityscape$viewSunset(model);
	var allBuildings = A2(_elm_lang$core$List$map, _elam03$elam03_github_io$Building$viewBuilding, model.buildings);
	var _p5 = {ctor: '_Tuple2', _0: model.x, _1: 0 - model.y};
	var mx = _p5._0;
	var my = _p5._1;
	var things = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: sunset,
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			trees,
			A2(
				_elm_lang$core$Basics_ops['++'],
				allBuildings,
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elam03$elam03_github_io$Cityscape$displayModelInfo(model),
					A2(
						_elam03$elam03_github_io$Cityscape$displayMouseCursor,
						{ctor: '_Tuple2', _0: mx, _1: my},
						model)))));
	var finalOutput = _evancz$elm_graphics$Element$toHtml(
		A3(_evancz$elm_graphics$Collage$collage, model.windowWidth, model.windowHeight, things));
	return A2(
		_elm_lang$html$Html$div,
		attributes,
		{
			ctor: '::',
			_0: finalOutput,
			_1: {ctor: '[]'}
		});
};
var _elam03$elam03_github_io$Cityscape$view = function (model) {
	var html = _elam03$elam03_github_io$Cityscape$viewWithHtml(model);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: html,
			_1: {ctor: '[]'}
		});
};
var _elam03$elam03_github_io$Cityscape$timeUpdate = F3(
	function (dt, t, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{dt: dt, t: t});
	});
var _elam03$elam03_github_io$Cityscape$mouseUpdate = F2(
	function (_p6, model) {
		var _p7 = _p6;
		var _p10 = _p7._1;
		var _p9 = _p7._0;
		var _p8 = {ctor: '_Tuple2', _0: model.x, _1: model.y};
		var px = _p8._0;
		var py = _p8._1;
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				x: _elm_lang$core$Basics$toFloat(_p9),
				y: _elm_lang$core$Basics$toFloat(_p10),
				dx: _elm_lang$core$Basics$toFloat(_p9) - px,
				dy: _elm_lang$core$Basics$toFloat(_p10) - py
			});
	});
var _elam03$elam03_github_io$Cityscape$resetMouseDelta = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{dx: 0, dy: 0});
};
var _elam03$elam03_github_io$Cityscape$updateAllEntitiesInModel = function (model) {
	var applySway = function (e) {
		var angularRotation = 0;
		var lerps = F2(
			function (keyFrames, t) {
				return A3(
					_elm_lang$core$List$foldl,
					F2(
						function (x, y) {
							return x + y;
						}),
					0,
					A2(
						_elm_lang$core$List$map,
						function (_p11) {
							var _p12 = _p11;
							return _elm_lang$core$Basics$abs(t - _p12._0) * _p12._1;
						},
						keyFrames));
			});
		var t = function () {
			var dt = model.dt / 1000;
			var result = e.currRotationT + dt;
			return (_elm_lang$core$Native_Utils.cmp(result, 1.0) > 0) ? (result - 1.0) : result;
		}();
		var currRotationT = t;
		var keyFrames = {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 0.0, _1: -25},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 0.25, _1: 0},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 0.5, _1: 25},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 0.75, _1: 0},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 1.0, _1: -25},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		};
		var currRotation = A2(lerps, keyFrames, currRotationT);
		return _elm_lang$core$Native_Utils.update(
			e,
			{currRotation: currRotation, currRotationT: currRotationT, angularRotation: angularRotation});
	};
	var wrapThings = F2(
		function (widthWrap, things) {
			var w = _elm_lang$core$Basics$toFloat(widthWrap);
			var checkRightEdge = function (a) {
				return (_elm_lang$core$Native_Utils.cmp(a.x, w / 2) > 0) ? _elm_lang$core$Native_Utils.update(
					a,
					{x: (a.x - a.w) - w}) : a;
			};
			var checkLeftEdge = function (a) {
				return (_elm_lang$core$Native_Utils.cmp(a.x, 0 - ((w / 2) + a.w)) < 0) ? _elm_lang$core$Native_Utils.update(
					a,
					{x: (a.x + a.w) + w}) : a;
			};
			return A2(
				_elm_lang$core$List$map,
				checkLeftEdge,
				A2(_elm_lang$core$List$map, checkRightEdge, things));
		});
	var toValue = function (layer) {
		var _p13 = layer;
		switch (_p13.ctor) {
			case 'Front':
				return 0.1;
			case 'Middle':
				return 0.2;
			case 'Back':
				return 0.3;
			default:
				return 0.0;
		}
	};
	var dx = function () {
		var _p14 = model.movementType;
		switch (_p14.ctor) {
			case 'MouseMove':
				return model.dx;
			case 'TimeMove':
				return 5;
			default:
				return 0;
		}
	}();
	var moveEntity = function (e) {
		return _elm_lang$core$Native_Utils.update(
			e,
			{
				x: e.x + (dx * toValue(e.layer))
			});
	};
	var buildings_ = A2(
		wrapThings,
		model.windowWidth,
		A2(_elm_lang$core$List$map, moveEntity, model.buildings));
	var trees_ = A2(
		wrapThings,
		model.windowWidth,
		A2(
			_elm_lang$core$List$map,
			applySway,
			A2(_elm_lang$core$List$map, moveEntity, model.trees)));
	return _elm_lang$core$Native_Utils.update(
		model,
		{buildings: buildings_, trees: trees_});
};
var _elam03$elam03_github_io$Cityscape$addBuildings = F2(
	function (numBuildings, model) {
		addBuildings:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(numBuildings, 0)) {
				return model;
			} else {
				var y = model.sunset.y;
				var wh = _elm_lang$core$Basics$toFloat((model.windowHeight / 2) | 0);
				var ww = _elm_lang$core$Basics$toFloat((model.windowWidth / 2) | 0);
				var toValue = F3(
					function (min, max, v) {
						return (A2(_elm_lang$core$Maybe$withDefault, 0.5, v) * (max - min)) + min;
					});
				var pickLayer = function (value) {
					return (_elm_lang$core$Native_Utils.cmp(value, 66) > -1) ? _elam03$elam03_github_io$Building$Front : ((_elm_lang$core$Native_Utils.cmp(value, 33) > -1) ? _elam03$elam03_github_io$Building$Middle : _elam03$elam03_github_io$Building$Back);
				};
				var popRandomValues = F2(
					function (numOfValuesToPop, model) {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								randomValues: A3(
									_elm_lang$core$Array$slice,
									numOfValuesToPop,
									_elm_lang$core$Array$length(model.randomValues),
									model.randomValues)
							});
					});
				var model_ = A2(popRandomValues, 3, model);
				var getRandomValues = F2(
					function (model, numValues) {
						return A3(_elm_lang$core$Array$slice, 0, numValues, model.randomValues);
					});
				var randomValues = A2(getRandomValues, model, 3);
				var x = A3(
					toValue,
					0 - ww,
					ww,
					A2(_elm_lang$core$Array$get, 0, randomValues));
				var h = A3(
					toValue,
					25,
					100,
					A2(_elm_lang$core$Array$get, 1, randomValues));
				var l = pickLayer(
					A3(
						toValue,
						0,
						100,
						A2(_elm_lang$core$Array$get, 2, randomValues)));
				var building_ = A4(_elam03$elam03_github_io$Building$newBuilding, x, y, h, l);
				var _v6 = numBuildings - 1,
					_v7 = _elm_lang$core$Native_Utils.update(
					model_,
					{
						buildings: A2(
							_elm_lang$core$Basics_ops['++'],
							model_.buildings,
							{
								ctor: '::',
								_0: building_,
								_1: {ctor: '[]'}
							})
					});
				numBuildings = _v6;
				model = _v7;
				continue addBuildings;
			}
		}
	});
var _elam03$elam03_github_io$Cityscape$initTree = function () {
	var model = {
		x: 0,
		y: 0,
		w: 0,
		h: 0,
		layer: _elam03$elam03_github_io$Building$Back,
		trunkWidth: 6,
		color: A3(_elm_lang$core$Color$rgb, 255, 255, 255),
		leafEdgeCount: 4,
		currRotationT: 0,
		currRotation: 0,
		angularRotation: 1,
		angularRotationRange: 25
	};
	return model;
}();
var _elam03$elam03_github_io$Cityscape$addTrees = F2(
	function (numTrees, model) {
		addTrees:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(numTrees, 0)) {
				return model;
			} else {
				var y = model.sunset.y;
				var ww = _elm_lang$core$Basics$toFloat(model.windowWidth);
				var popRandomValues = F2(
					function (numOfValuesToPop, model) {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								randomValues: A3(
									_elm_lang$core$Array$slice,
									numOfValuesToPop,
									_elm_lang$core$Array$length(model.randomValues),
									model.randomValues)
							});
					});
				var model_ = A2(popRandomValues, 4, model);
				var pickLayer = function (value) {
					return (_elm_lang$core$Native_Utils.cmp(value, 66) > -1) ? _elam03$elam03_github_io$Building$Front : ((_elm_lang$core$Native_Utils.cmp(value, 33) > -1) ? _elam03$elam03_github_io$Building$Middle : _elam03$elam03_github_io$Building$Back);
				};
				var toValue = F3(
					function (min, max, v) {
						return (A2(_elm_lang$core$Maybe$withDefault, 0.5, v) * (max - min)) + min;
					});
				var x = A3(
					toValue,
					0 - ww,
					ww,
					A2(_elm_lang$core$Array$get, 0, model.randomValues));
				var h = A3(
					toValue,
					25,
					75,
					A2(_elm_lang$core$Array$get, 1, model.randomValues));
				var w = h;
				var l = pickLayer(
					A3(
						toValue,
						0,
						100,
						A2(_elm_lang$core$Array$get, 2, model.randomValues)));
				var leafColor = function () {
					var c = _elm_lang$core$Basics$truncate(
						A3(
							toValue,
							80,
							250,
							A2(_elm_lang$core$Array$get, 3, model.randomValues)));
					return A4(_elm_lang$core$Color$rgba, 0, c, 0, 0.95);
				}();
				var leafEdgeCount = _elm_lang$core$Basics$truncate(
					A3(
						toValue,
						5,
						10,
						A2(_elm_lang$core$Array$get, 4, model.randomValues)));
				var tree_ = _elm_lang$core$Native_Utils.update(
					_elam03$elam03_github_io$Cityscape$initTree,
					{x: x, y: y, w: w, h: h, layer: l, color: leafColor, leafEdgeCount: leafEdgeCount});
				var _v8 = numTrees - 1,
					_v9 = _elm_lang$core$Native_Utils.update(
					model_,
					{
						trees: A2(
							_elm_lang$core$Basics_ops['++'],
							model.trees,
							{
								ctor: '::',
								_0: tree_,
								_1: {ctor: '[]'}
							})
					});
				numTrees = _v8;
				model = _v9;
				continue addTrees;
			}
		}
	});
var _elam03$elam03_github_io$Cityscape$Sunset = F2(
	function (a, b) {
		return {y: a, h: b};
	});
var _elam03$elam03_github_io$Cityscape$Tree = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {x: a, y: b, w: c, h: d, layer: e, trunkWidth: f, color: g, leafEdgeCount: h, currRotationT: i, currRotation: j, angularRotation: k, angularRotationRange: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elam03$elam03_github_io$Cityscape$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return {x: a, y: b, dx: c, dy: d, keys: e, t: f, dt: g, initialized: h, buildings: i, randomValues: j, windowWidth: k, windowHeight: l, movementType: m, sunset: n, showInfo: o, trees: p, paused: q};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elam03$elam03_github_io$Cityscape$StaticMove = {ctor: 'StaticMove'};
var _elam03$elam03_github_io$Cityscape$MouseMove = {ctor: 'MouseMove'};
var _elam03$elam03_github_io$Cityscape$TimeMove = {ctor: 'TimeMove'};
var _elam03$elam03_github_io$Cityscape$VisibilityChange = function (a) {
	return {ctor: 'VisibilityChange', _0: a};
};
var _elam03$elam03_github_io$Cityscape$NewRandomValues = function (a) {
	return {ctor: 'NewRandomValues', _0: a};
};
var _elam03$elam03_github_io$Cityscape$update = F2(
	function (action, model) {
		var _p15 = action;
		switch (_p15.ctor) {
			case 'None':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Size':
				var margin = 16;
				var h = 200;
				var w = _p15._0.width;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							windowWidth: w - (margin * 2),
							windowHeight: h,
							sunset: {
								y: 0 - (_elm_lang$core$Basics$toFloat(h) / 3),
								h: _elm_lang$core$Basics$toFloat(h) / 4
							}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'KeyDown':
				var _p17 = _p15._0;
				var model_ = _elm_lang$core$Native_Utils.update(
					model,
					{
						keys: A2(_elm_lang$core$Set$insert, _p17, model.keys)
					});
				var _p16 = _elm_lang$core$Char$fromCode(_p17);
				switch (_p16.valueOf()) {
					case '1':
						return {
							ctor: '_Tuple2',
							_0: A2(_elam03$elam03_github_io$Cityscape$addBuildings, 10, model_),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case '2':
						return {
							ctor: '_Tuple2',
							_0: A2(_elam03$elam03_github_io$Cityscape$addTrees, 10, model_),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'M':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{movementType: _elam03$elam03_github_io$Cityscape$MouseMove}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 't':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{movementType: _elam03$elam03_github_io$Cityscape$TimeMove}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'S':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{movementType: _elam03$elam03_github_io$Cityscape$StaticMove}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'P':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{paused: !model.paused}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'I':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{showInfo: !model_.showInfo}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'KeyUp':
				var model_ = _elm_lang$core$Native_Utils.update(
					model,
					{
						keys: A2(_elm_lang$core$Set$remove, _p15._0, model.keys)
					});
				return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Tick':
				var _p18 = _p15._0;
				var dt = _p18 - model.t;
				return (!model.paused) ? {
					ctor: '_Tuple2',
					_0: _elam03$elam03_github_io$Cityscape$resetMouseDelta(
						_elam03$elam03_github_io$Cityscape$updateAllEntitiesInModel(
							A3(_elam03$elam03_github_io$Cityscape$timeUpdate, dt, _p18, model))),
					_1: A2(
						_elm_lang$core$Random$generate,
						_elam03$elam03_github_io$Cityscape$NewRandomValues,
						A2(
							_elm_lang$core$Random$list,
							100,
							A2(_elm_lang$core$Random$float, 0, 1)))
				} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'NewRandomValues':
				var model_ = _elm_lang$core$Native_Utils.update(
					model,
					{
						randomValues: _elm_lang$core$Array$fromList(_p15._0)
					});
				var setInitialized = function (model) {
					return _elm_lang$core$Native_Utils.update(
						model,
						{initialized: true});
				};
				if (!model_.initialized) {
					var value = model_.windowWidth;
					var numInitialBuildings = (value / 120) | 0;
					var numInitialTrees = (value / 120) | 0;
					return {
						ctor: '_Tuple2',
						_0: setInitialized(
							A2(
								_elam03$elam03_github_io$Cityscape$addTrees,
								numInitialTrees,
								A2(_elam03$elam03_github_io$Cityscape$addBuildings, numInitialBuildings, model_))),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				var _p19 = _p15._0;
				if (_p19.ctor === 'Visible') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{paused: false}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{paused: true}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _elam03$elam03_github_io$Cityscape$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _elam03$elam03_github_io$Cityscape$KeyUp = function (a) {
	return {ctor: 'KeyUp', _0: a};
};
var _elam03$elam03_github_io$Cityscape$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _elam03$elam03_github_io$Cityscape$Size = function (a) {
	return {ctor: 'Size', _0: a};
};
var _elam03$elam03_github_io$Cityscape$init = function () {
	var cmd = A2(_elm_lang$core$Task$perform, _elam03$elam03_github_io$Cityscape$Size, _elm_lang$window$Window$size);
	var h = 200;
	var w = 300;
	var model = {
		x: 0,
		y: 0,
		dx: 0,
		dy: 0,
		keys: _elm_lang$core$Set$empty,
		t: 0,
		dt: 0,
		initialized: false,
		buildings: {ctor: '[]'},
		randomValues: _elm_lang$core$Array$fromList(
			{ctor: '[]'}),
		windowWidth: w,
		windowHeight: h,
		movementType: _elam03$elam03_github_io$Cityscape$TimeMove,
		sunset: {y: 0, h: 0},
		showInfo: false,
		trees: {ctor: '[]'},
		paused: false
	};
	return {ctor: '_Tuple2', _0: model, _1: cmd};
}();
var _elam03$elam03_github_io$Cityscape$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$page_visibility$PageVisibility$visibilityChanges(_elam03$elam03_github_io$Cityscape$VisibilityChange),
			_1: {
				ctor: '::',
				_0: _elm_lang$animation_frame$AnimationFrame$times(_elam03$elam03_github_io$Cityscape$Tick),
				_1: {
					ctor: '::',
					_0: _elm_lang$window$Window$resizes(_elam03$elam03_github_io$Cityscape$Size),
					_1: {
						ctor: '::',
						_0: _elm_lang$keyboard$Keyboard$downs(_elam03$elam03_github_io$Cityscape$KeyDown),
						_1: {
							ctor: '::',
							_0: _elm_lang$keyboard$Keyboard$ups(_elam03$elam03_github_io$Cityscape$KeyUp),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _elam03$elam03_github_io$Cityscape$None = {ctor: 'None'};

var _elm_lang$navigation$Native_Navigation = function() {


// FAKE NAVIGATION

function go(n)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		if (n !== 0)
		{
			history.go(n);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function pushState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.pushState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function replaceState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.replaceState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}


// REAL NAVIGATION

function reloadPage(skipCache)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		document.location.reload(skipCache);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function setLocation(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		try
		{
			window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			document.location.reload(false);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}


// GET LOCATION

function getLocation()
{
	var location = document.location;

	return {
		href: location.href,
		host: location.host,
		hostname: location.hostname,
		protocol: location.protocol,
		origin: location.origin,
		port_: location.port,
		pathname: location.pathname,
		search: location.search,
		hash: location.hash,
		username: location.username,
		password: location.password
	};
}


// DETECT IE11 PROBLEMS

function isInternetExplorer11()
{
	return window.navigator.userAgent.indexOf('Trident') !== -1;
}


return {
	go: go,
	setLocation: setLocation,
	reloadPage: reloadPage,
	pushState: pushState,
	replaceState: replaceState,
	getLocation: getLocation,
	isInternetExplorer11: isInternetExplorer11
};

}();

var _elm_lang$navigation$Navigation$replaceState = _elm_lang$navigation$Native_Navigation.replaceState;
var _elm_lang$navigation$Navigation$pushState = _elm_lang$navigation$Native_Navigation.pushState;
var _elm_lang$navigation$Navigation$go = _elm_lang$navigation$Native_Navigation.go;
var _elm_lang$navigation$Navigation$reloadPage = _elm_lang$navigation$Native_Navigation.reloadPage;
var _elm_lang$navigation$Navigation$setLocation = _elm_lang$navigation$Native_Navigation.setLocation;
var _elm_lang$navigation$Navigation_ops = _elm_lang$navigation$Navigation_ops || {};
_elm_lang$navigation$Navigation_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return task2;
			},
			task1);
	});
var _elm_lang$navigation$Navigation$notify = F3(
	function (router, subs, location) {
		var send = function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$core$Platform$sendToApp,
				router,
				_p2._0(location));
		};
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(_elm_lang$core$List$map, send, subs)),
			_elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'}));
	});
var _elm_lang$navigation$Navigation$cmdHelp = F3(
	function (router, subs, cmd) {
		var _p3 = cmd;
		switch (_p3.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$go(_p3._0);
			case 'New':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$pushState(_p3._0));
			case 'Modify':
				return A2(
					_elm_lang$core$Task$andThen,
					A2(_elm_lang$navigation$Navigation$notify, router, subs),
					_elm_lang$navigation$Navigation$replaceState(_p3._0));
			case 'Visit':
				return _elm_lang$navigation$Navigation$setLocation(_p3._0);
			default:
				return _elm_lang$navigation$Navigation$reloadPage(_p3._0);
		}
	});
var _elm_lang$navigation$Navigation$killPopWatcher = function (popWatcher) {
	var _p4 = popWatcher;
	if (_p4.ctor === 'Normal') {
		return _elm_lang$core$Process$kill(_p4._0);
	} else {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Process$kill(_p4._0),
			_elm_lang$core$Process$kill(_p4._1));
	}
};
var _elm_lang$navigation$Navigation$onSelfMsg = F3(
	function (router, location, state) {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			A3(_elm_lang$navigation$Navigation$notify, router, state.subs, location),
			_elm_lang$core$Task$succeed(state));
	});
var _elm_lang$navigation$Navigation$subscription = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$command = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$Location = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {href: a, host: b, hostname: c, protocol: d, origin: e, port_: f, pathname: g, search: h, hash: i, username: j, password: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$navigation$Navigation$State = F2(
	function (a, b) {
		return {subs: a, popWatcher: b};
	});
var _elm_lang$navigation$Navigation$init = _elm_lang$core$Task$succeed(
	A2(
		_elm_lang$navigation$Navigation$State,
		{ctor: '[]'},
		_elm_lang$core$Maybe$Nothing));
var _elm_lang$navigation$Navigation$Reload = function (a) {
	return {ctor: 'Reload', _0: a};
};
var _elm_lang$navigation$Navigation$reload = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(false));
var _elm_lang$navigation$Navigation$reloadAndSkipCache = _elm_lang$navigation$Navigation$command(
	_elm_lang$navigation$Navigation$Reload(true));
var _elm_lang$navigation$Navigation$Visit = function (a) {
	return {ctor: 'Visit', _0: a};
};
var _elm_lang$navigation$Navigation$load = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Visit(url));
};
var _elm_lang$navigation$Navigation$Modify = function (a) {
	return {ctor: 'Modify', _0: a};
};
var _elm_lang$navigation$Navigation$modifyUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Modify(url));
};
var _elm_lang$navigation$Navigation$New = function (a) {
	return {ctor: 'New', _0: a};
};
var _elm_lang$navigation$Navigation$newUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$New(url));
};
var _elm_lang$navigation$Navigation$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$navigation$Navigation$back = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(0 - n));
};
var _elm_lang$navigation$Navigation$forward = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(n));
};
var _elm_lang$navigation$Navigation$cmdMap = F2(
	function (_p5, myCmd) {
		var _p6 = myCmd;
		switch (_p6.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$Jump(_p6._0);
			case 'New':
				return _elm_lang$navigation$Navigation$New(_p6._0);
			case 'Modify':
				return _elm_lang$navigation$Navigation$Modify(_p6._0);
			case 'Visit':
				return _elm_lang$navigation$Navigation$Visit(_p6._0);
			default:
				return _elm_lang$navigation$Navigation$Reload(_p6._0);
		}
	});
var _elm_lang$navigation$Navigation$Monitor = function (a) {
	return {ctor: 'Monitor', _0: a};
};
var _elm_lang$navigation$Navigation$program = F2(
	function (locationToMessage, stuff) {
		var init = stuff.init(
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$program(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$programWithFlags = F2(
	function (locationToMessage, stuff) {
		var init = function (flags) {
			return A2(
				stuff.init,
				flags,
				_elm_lang$navigation$Native_Navigation.getLocation(
					{ctor: '_Tuple0'}));
		};
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				{
					ctor: '::',
					_0: _elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(locationToMessage)),
					_1: {
						ctor: '::',
						_0: stuff.subscriptions(model),
						_1: {ctor: '[]'}
					}
				});
		};
		return _elm_lang$html$Html$programWithFlags(
			{init: init, view: stuff.view, update: stuff.update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$subMap = F2(
	function (func, _p7) {
		var _p8 = _p7;
		return _elm_lang$navigation$Navigation$Monitor(
			function (_p9) {
				return func(
					_p8._0(_p9));
			});
	});
var _elm_lang$navigation$Navigation$InternetExplorer = F2(
	function (a, b) {
		return {ctor: 'InternetExplorer', _0: a, _1: b};
	});
var _elm_lang$navigation$Navigation$Normal = function (a) {
	return {ctor: 'Normal', _0: a};
};
var _elm_lang$navigation$Navigation$spawnPopWatcher = function (router) {
	var reportLocation = function (_p10) {
		return A2(
			_elm_lang$core$Platform$sendToSelf,
			router,
			_elm_lang$navigation$Native_Navigation.getLocation(
				{ctor: '_Tuple0'}));
	};
	return _elm_lang$navigation$Native_Navigation.isInternetExplorer11(
		{ctor: '_Tuple0'}) ? A3(
		_elm_lang$core$Task$map2,
		_elm_lang$navigation$Navigation$InternetExplorer,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)),
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'hashchange', _elm_lang$core$Json_Decode$value, reportLocation))) : A2(
		_elm_lang$core$Task$map,
		_elm_lang$navigation$Navigation$Normal,
		_elm_lang$core$Process$spawn(
			A3(_elm_lang$dom$Dom_LowLevel$onWindow, 'popstate', _elm_lang$core$Json_Decode$value, reportLocation)));
};
var _elm_lang$navigation$Navigation$onEffects = F4(
	function (router, cmds, subs, _p11) {
		var _p12 = _p11;
		var _p15 = _p12.popWatcher;
		var stepState = function () {
			var _p13 = {ctor: '_Tuple2', _0: subs, _1: _p15};
			_v6_2:
			do {
				if (_p13._0.ctor === '[]') {
					if (_p13._1.ctor === 'Just') {
						return A2(
							_elm_lang$navigation$Navigation_ops['&>'],
							_elm_lang$navigation$Navigation$killPopWatcher(_p13._1._0),
							_elm_lang$core$Task$succeed(
								A2(_elm_lang$navigation$Navigation$State, subs, _elm_lang$core$Maybe$Nothing)));
					} else {
						break _v6_2;
					}
				} else {
					if (_p13._1.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Task$map,
							function (_p14) {
								return A2(
									_elm_lang$navigation$Navigation$State,
									subs,
									_elm_lang$core$Maybe$Just(_p14));
							},
							_elm_lang$navigation$Navigation$spawnPopWatcher(router));
					} else {
						break _v6_2;
					}
				}
			} while(false);
			return _elm_lang$core$Task$succeed(
				A2(_elm_lang$navigation$Navigation$State, subs, _p15));
		}();
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					A2(_elm_lang$navigation$Navigation$cmdHelp, router, subs),
					cmds)),
			stepState);
	});
_elm_lang$core$Native_Platform.effectManagers['Navigation'] = {pkg: 'elm-lang/navigation', init: _elm_lang$navigation$Navigation$init, onEffects: _elm_lang$navigation$Navigation$onEffects, onSelfMsg: _elm_lang$navigation$Navigation$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$navigation$Navigation$cmdMap, subMap: _elm_lang$navigation$Navigation$subMap};

var _evancz$url_parser$UrlParser$toKeyValuePair = function (segment) {
	var _p0 = A2(_elm_lang$core$String$split, '=', segment);
	if (((_p0.ctor === '::') && (_p0._1.ctor === '::')) && (_p0._1._1.ctor === '[]')) {
		return A3(
			_elm_lang$core$Maybe$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_elm_lang$http$Http$decodeUri(_p0._0),
			_elm_lang$http$Http$decodeUri(_p0._1._0));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _evancz$url_parser$UrlParser$parseParams = function (queryString) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$filterMap,
			_evancz$url_parser$UrlParser$toKeyValuePair,
			A2(
				_elm_lang$core$String$split,
				'&',
				A2(_elm_lang$core$String$dropLeft, 1, queryString))));
};
var _evancz$url_parser$UrlParser$splitUrl = function (url) {
	var _p1 = A2(_elm_lang$core$String$split, '/', url);
	if ((_p1.ctor === '::') && (_p1._0 === '')) {
		return _p1._1;
	} else {
		return _p1;
	}
};
var _evancz$url_parser$UrlParser$parseHelp = function (states) {
	parseHelp:
	while (true) {
		var _p2 = states;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p4 = _p2._0;
			var _p3 = _p4.unvisited;
			if (_p3.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(_p4.value);
			} else {
				if ((_p3._0 === '') && (_p3._1.ctor === '[]')) {
					return _elm_lang$core$Maybe$Just(_p4.value);
				} else {
					var _v4 = _p2._1;
					states = _v4;
					continue parseHelp;
				}
			}
		}
	}
};
var _evancz$url_parser$UrlParser$parse = F3(
	function (_p5, url, params) {
		var _p6 = _p5;
		return _evancz$url_parser$UrlParser$parseHelp(
			_p6._0(
				{
					visited: {ctor: '[]'},
					unvisited: _evancz$url_parser$UrlParser$splitUrl(url),
					params: params,
					value: _elm_lang$core$Basics$identity
				}));
	});
var _evancz$url_parser$UrlParser$parseHash = F2(
	function (parser, location) {
		return A3(
			_evancz$url_parser$UrlParser$parse,
			parser,
			A2(_elm_lang$core$String$dropLeft, 1, location.hash),
			_evancz$url_parser$UrlParser$parseParams(location.search));
	});
var _evancz$url_parser$UrlParser$parsePath = F2(
	function (parser, location) {
		return A3(
			_evancz$url_parser$UrlParser$parse,
			parser,
			location.pathname,
			_evancz$url_parser$UrlParser$parseParams(location.search));
	});
var _evancz$url_parser$UrlParser$intParamHelp = function (maybeValue) {
	var _p7 = maybeValue;
	if (_p7.ctor === 'Nothing') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Result$toMaybe(
			_elm_lang$core$String$toInt(_p7._0));
	}
};
var _evancz$url_parser$UrlParser$mapHelp = F2(
	function (func, _p8) {
		var _p9 = _p8;
		return {
			visited: _p9.visited,
			unvisited: _p9.unvisited,
			params: _p9.params,
			value: func(_p9.value)
		};
	});
var _evancz$url_parser$UrlParser$State = F4(
	function (a, b, c, d) {
		return {visited: a, unvisited: b, params: c, value: d};
	});
var _evancz$url_parser$UrlParser$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _evancz$url_parser$UrlParser$s = function (str) {
	return _evancz$url_parser$UrlParser$Parser(
		function (_p10) {
			var _p11 = _p10;
			var _p12 = _p11.unvisited;
			if (_p12.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p13 = _p12._0;
				return _elm_lang$core$Native_Utils.eq(_p13, str) ? {
					ctor: '::',
					_0: A4(
						_evancz$url_parser$UrlParser$State,
						{ctor: '::', _0: _p13, _1: _p11.visited},
						_p12._1,
						_p11.params,
						_p11.value),
					_1: {ctor: '[]'}
				} : {ctor: '[]'};
			}
		});
};
var _evancz$url_parser$UrlParser$custom = F2(
	function (tipe, stringToSomething) {
		return _evancz$url_parser$UrlParser$Parser(
			function (_p14) {
				var _p15 = _p14;
				var _p16 = _p15.unvisited;
				if (_p16.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					var _p18 = _p16._0;
					var _p17 = stringToSomething(_p18);
					if (_p17.ctor === 'Ok') {
						return {
							ctor: '::',
							_0: A4(
								_evancz$url_parser$UrlParser$State,
								{ctor: '::', _0: _p18, _1: _p15.visited},
								_p16._1,
								_p15.params,
								_p15.value(_p17._0)),
							_1: {ctor: '[]'}
						};
					} else {
						return {ctor: '[]'};
					}
				}
			});
	});
var _evancz$url_parser$UrlParser$string = A2(_evancz$url_parser$UrlParser$custom, 'STRING', _elm_lang$core$Result$Ok);
var _evancz$url_parser$UrlParser$int = A2(_evancz$url_parser$UrlParser$custom, 'NUMBER', _elm_lang$core$String$toInt);
var _evancz$url_parser$UrlParser_ops = _evancz$url_parser$UrlParser_ops || {};
_evancz$url_parser$UrlParser_ops['</>'] = F2(
	function (_p20, _p19) {
		var _p21 = _p20;
		var _p22 = _p19;
		return _evancz$url_parser$UrlParser$Parser(
			function (state) {
				return A2(
					_elm_lang$core$List$concatMap,
					_p22._0,
					_p21._0(state));
			});
	});
var _evancz$url_parser$UrlParser$map = F2(
	function (subValue, _p23) {
		var _p24 = _p23;
		return _evancz$url_parser$UrlParser$Parser(
			function (_p25) {
				var _p26 = _p25;
				return A2(
					_elm_lang$core$List$map,
					_evancz$url_parser$UrlParser$mapHelp(_p26.value),
					_p24._0(
						{visited: _p26.visited, unvisited: _p26.unvisited, params: _p26.params, value: subValue}));
			});
	});
var _evancz$url_parser$UrlParser$oneOf = function (parsers) {
	return _evancz$url_parser$UrlParser$Parser(
		function (state) {
			return A2(
				_elm_lang$core$List$concatMap,
				function (_p27) {
					var _p28 = _p27;
					return _p28._0(state);
				},
				parsers);
		});
};
var _evancz$url_parser$UrlParser$top = _evancz$url_parser$UrlParser$Parser(
	function (state) {
		return {
			ctor: '::',
			_0: state,
			_1: {ctor: '[]'}
		};
	});
var _evancz$url_parser$UrlParser_ops = _evancz$url_parser$UrlParser_ops || {};
_evancz$url_parser$UrlParser_ops['<?>'] = F2(
	function (_p30, _p29) {
		var _p31 = _p30;
		var _p32 = _p29;
		return _evancz$url_parser$UrlParser$Parser(
			function (state) {
				return A2(
					_elm_lang$core$List$concatMap,
					_p32._0,
					_p31._0(state));
			});
	});
var _evancz$url_parser$UrlParser$QueryParser = function (a) {
	return {ctor: 'QueryParser', _0: a};
};
var _evancz$url_parser$UrlParser$customParam = F2(
	function (key, func) {
		return _evancz$url_parser$UrlParser$QueryParser(
			function (_p33) {
				var _p34 = _p33;
				var _p35 = _p34.params;
				return {
					ctor: '::',
					_0: A4(
						_evancz$url_parser$UrlParser$State,
						_p34.visited,
						_p34.unvisited,
						_p35,
						_p34.value(
							func(
								A2(_elm_lang$core$Dict$get, key, _p35)))),
					_1: {ctor: '[]'}
				};
			});
	});
var _evancz$url_parser$UrlParser$stringParam = function (name) {
	return A2(_evancz$url_parser$UrlParser$customParam, name, _elm_lang$core$Basics$identity);
};
var _evancz$url_parser$UrlParser$intParam = function (name) {
	return A2(_evancz$url_parser$UrlParser$customParam, name, _evancz$url_parser$UrlParser$intParamHelp);
};

var _elam03$elam03_github_io$ProjectList$classStyle = _elm_lang$html$Html_Attributes$class('projectlist');
var _elam03$elam03_github_io$ProjectList$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _elam03$elam03_github_io$ProjectList$viewProject = function (project) {
	var $break = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$br,
			{ctor: '[]'},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	};
	var previewsContent = A2(
		_elm_lang$core$List$map,
		function (path) {
			return A2(
				_elm_lang$html$Html$img,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$src(path),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('project-preview'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('inner-item'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'});
		},
		A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			project.previews));
	var titleContent = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h3,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(project.title),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	};
	var contentAttributes = {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'project-item', _1: true},
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	};
	var categoryContent = function () {
		var _p0 = project.category;
		if (_p0.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					contentAttributes,
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(_p0._0),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	}();
	var keywordsContent = A2(
		_elm_lang$core$List$map,
		function (keyword) {
			return A2(
				_elm_lang$html$Html$p,
				contentAttributes,
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(keyword),
					_1: {ctor: '[]'}
				});
		},
		A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			project.keywords));
	var descriptionContent = function () {
		var _p1 = project.description;
		if (_p1.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					contentAttributes,
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(_p1._0),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	}();
	var sourceUrlContent = function () {
		var _p2 = project.sourceUrl;
		if (_p2.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(_p2._0),
							_1: {ctor: '[]'}
						},
						contentAttributes),
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Source Link'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	}();
	var downloadUrlContent = function () {
		var _p3 = project.downloadUrl;
		if (_p3.ctor === 'Just') {
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$a,
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$href(_p3._0),
							_1: {ctor: '[]'}
						},
						contentAttributes),
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Download Link'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			};
		} else {
			return {ctor: '[]'};
		}
	}();
	var contentDiv = A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('project-container'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('inner-item'),
				_1: {ctor: '[]'}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			titleContent,
			A2(_elm_lang$core$Basics_ops['++'], descriptionContent, downloadUrlContent)));
	var content = A2(
		_elm_lang$core$Basics_ops['++'],
		previewsContent,
		{
			ctor: '::',
			_0: contentDiv,
			_1: {ctor: '[]'}
		});
	var attributes = {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'projectlist', _1: true},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'projectlist-item', _1: true},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'inner-container', _1: true},
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	};
	return A2(_elm_lang$html$Html$div, attributes, content);
};
var _elam03$elam03_github_io$ProjectList$view = function (model) {
	var projects = A2(
		_elm_lang$core$List$map,
		function (p) {
			return _elam03$elam03_github_io$ProjectList$viewProject(p);
		},
		model.projects);
	var attributes = {
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'projectlist', _1: true},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'projectlist-container', _1: true},
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	};
	var numCols = 3;
	return A2(_elm_lang$html$Html$div, attributes, projects);
};
var _elam03$elam03_github_io$ProjectList$errorProject = {
	title: 'error',
	category: _elm_lang$core$Maybe$Just('error'),
	keywords: _elm_lang$core$Maybe$Just(
		{
			ctor: '::',
			_0: 'error',
			_1: {ctor: '[]'}
		}),
	description: _elm_lang$core$Maybe$Just('error'),
	sourceUrl: _elm_lang$core$Maybe$Just('error'),
	downloadUrl: _elm_lang$core$Maybe$Just('error'),
	previews: _elm_lang$core$Maybe$Just(
		{
			ctor: '::',
			_0: 'error',
			_1: {
				ctor: '::',
				_0: 'error',
				_1: {ctor: '[]'}
			}
		})
};
var _elam03$elam03_github_io$ProjectList$errorProjectList = {
	projects: {
		ctor: '::',
		_0: _elam03$elam03_github_io$ProjectList$errorProject,
		_1: {ctor: '[]'}
	}
};
var _elam03$elam03_github_io$ProjectList_ops = _elam03$elam03_github_io$ProjectList_ops || {};
_elam03$elam03_github_io$ProjectList_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _elam03$elam03_github_io$ProjectList$ProjectList = function (a) {
	return {projects: a};
};
var _elam03$elam03_github_io$ProjectList$Project = F7(
	function (a, b, c, d, e, f, g) {
		return {title: a, category: b, keywords: c, description: d, sourceUrl: e, downloadUrl: f, previews: g};
	});
var _elam03$elam03_github_io$ProjectList$decodeData = A2(
	_elm_lang$core$Json_Decode$map,
	_elam03$elam03_github_io$ProjectList$ProjectList,
	A2(
		_elm_lang$core$Json_Decode$field,
		'projects',
		_elm_lang$core$Json_Decode$list(
			A8(
				_elm_lang$core$Json_Decode$map7,
				_elam03$elam03_github_io$ProjectList$Project,
				A2(_elm_lang$core$Json_Decode$field, 'title', _elm_lang$core$Json_Decode$string),
				_elm_lang$core$Json_Decode$maybe(
					A2(_elm_lang$core$Json_Decode$field, 'category', _elm_lang$core$Json_Decode$string)),
				_elm_lang$core$Json_Decode$maybe(
					A2(
						_elm_lang$core$Json_Decode$field,
						'keywords',
						_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))),
				_elm_lang$core$Json_Decode$maybe(
					A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string)),
				_elm_lang$core$Json_Decode$maybe(
					A2(_elm_lang$core$Json_Decode$field, 'sourceUrl', _elm_lang$core$Json_Decode$string)),
				_elm_lang$core$Json_Decode$maybe(
					A2(_elm_lang$core$Json_Decode$field, 'downloadUrl', _elm_lang$core$Json_Decode$string)),
				_elm_lang$core$Json_Decode$maybe(
					A2(
						_elm_lang$core$Json_Decode$field,
						'previews',
						_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)))))));
var _elam03$elam03_github_io$ProjectList$Model = F3(
	function (a, b, c) {
		return {file: a, assetPath: b, projects: c};
	});
var _elam03$elam03_github_io$ProjectList$update = F2(
	function (action, model) {
		var _p4 = action;
		if (_p4._0.ctor === 'Ok') {
			var addProjectAssetPath = function (project) {
				var previews_ = A2(
					_elm_lang$core$List$map,
					function (p) {
						return A2(_elm_lang$core$Basics_ops['++'], model.assetPath, p);
					},
					A2(
						_elm_lang$core$Maybe$withDefault,
						{ctor: '[]'},
						project.previews));
				return _elm_lang$core$Native_Utils.update(
					project,
					{
						previews: _elm_lang$core$Maybe$Just(previews_)
					});
			};
			var addProjectDescription = function (project) {
				var description = A2(_elm_lang$core$Maybe$withDefault, '', project.description);
				return (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(description),
					0) > 0) ? project : _elm_lang$core$Native_Utils.update(
					project,
					{
						description: _elm_lang$core$Maybe$Just('No Description available!')
					});
			};
			var projects = A2(
				_elm_lang$core$List$map,
				addProjectAssetPath,
				A2(_elm_lang$core$List$map, addProjectDescription, _p4._0._0.projects));
			return _elm_lang$core$List$isEmpty(projects) ? {
				ctor: '_Tuple2',
				_0: A3(_elam03$elam03_github_io$ProjectList$Model, model.file, 'failed', projects),
				_1: _elm_lang$core$Platform_Cmd$none
			} : {
				ctor: '_Tuple2',
				_0: A3(_elam03$elam03_github_io$ProjectList$Model, model.file, 'success', projects),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _elam03$elam03_github_io$ProjectList$Refresh = function (a) {
	return {ctor: 'Refresh', _0: a};
};
var _elam03$elam03_github_io$ProjectList$getProjectData = function (location) {
	return A2(
		_elm_lang$http$Http$send,
		_elam03$elam03_github_io$ProjectList$Refresh,
		A2(_elm_lang$http$Http$get, location, _elam03$elam03_github_io$ProjectList$decodeData));
};
var _elam03$elam03_github_io$ProjectList$init = F2(
	function (projectList, assetPath) {
		return {
			ctor: '_Tuple2',
			_0: A3(
				_elam03$elam03_github_io$ProjectList$Model,
				projectList,
				assetPath,
				{ctor: '[]'}),
			_1: _elam03$elam03_github_io$ProjectList$getProjectData(projectList)
		};
	});

var _elm_community$basics_extra$Basics_Extra$turnsPerRadian = 1 / _elm_lang$core$Basics$turns(1);
var _elm_community$basics_extra$Basics_Extra$inTurns = function (angle) {
	return angle * _elm_community$basics_extra$Basics_Extra$turnsPerRadian;
};
var _elm_community$basics_extra$Basics_Extra$inRadians = _elm_lang$core$Basics$identity;
var _elm_community$basics_extra$Basics_Extra$degreesPerRadian = 1 / _elm_lang$core$Basics$degrees(1);
var _elm_community$basics_extra$Basics_Extra$inDegrees = function (angle) {
	return angle * _elm_community$basics_extra$Basics_Extra$degreesPerRadian;
};
var _elm_community$basics_extra$Basics_Extra$fmod = F2(
	function (f, n) {
		var integer = _elm_lang$core$Basics$floor(f);
		return (_elm_lang$core$Basics$toFloat(
			A2(_elm_lang$core$Basics_ops['%'], integer, n)) + f) - _elm_lang$core$Basics$toFloat(integer);
	});
var _elm_community$basics_extra$Basics_Extra$maxSafeInteger = Math.pow(2, 53) - 1;
var _elm_community$basics_extra$Basics_Extra$minSafeInteger = 0 - _elm_community$basics_extra$Basics_Extra$maxSafeInteger;
var _elm_community$basics_extra$Basics_Extra$isSafeInteger = function (number) {
	return (_elm_lang$core$Native_Utils.cmp(_elm_community$basics_extra$Basics_Extra$minSafeInteger, number) < 1) && (_elm_lang$core$Native_Utils.cmp(_elm_community$basics_extra$Basics_Extra$maxSafeInteger, number) > -1);
};
var _elm_community$basics_extra$Basics_Extra$swap = function (_p0) {
	var _p1 = _p0;
	return {ctor: '_Tuple2', _0: _p1._1, _1: _p1._0};
};
var _elm_community$basics_extra$Basics_Extra_ops = _elm_community$basics_extra$Basics_Extra_ops || {};
_elm_community$basics_extra$Basics_Extra_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});

var _elam03$elam03_github_io$SummaryList$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _elam03$elam03_github_io$SummaryList$viewSummary = function (summary) {
	var attributes = _elm_lang$html$Html_Attributes$classList(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'summarylist', _1: true},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'summarylist-item', _1: true},
				_1: {ctor: '[]'}
			}
		});
	var contentsType = function () {
		var _p0 = summary.contentsType;
		if (_p0.ctor === 'Just') {
			return _elm_lang$html$Html$text(_p0._0);
		} else {
			return _elm_lang$html$Html$text('No type specified!');
		}
	}();
	var items = function () {
		var _p1 = summary.contentsType;
		if (_p1.ctor === 'Just') {
			if (A2(_elm_lang$core$String$contains, 'Sentences', _p1._0)) {
				var paragraph = A3(
					_elm_lang$core$List$foldl,
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						}),
					'',
					A2(_elm_lang$core$List$intersperse, ' ', summary.contents));
				return {
					ctor: '::',
					_0: _elm_lang$html$Html$text(paragraph),
					_1: {ctor: '[]'}
				};
			} else {
				return A2(
					_elm_lang$core$List$map,
					function (s) {
						return A2(
							_elm_lang$html$Html$li,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(s),
								_1: {ctor: '[]'}
							});
					},
					summary.contents);
			}
		} else {
			return A2(
				_elm_lang$core$List$map,
				function (s) {
					return A2(
						_elm_lang$html$Html$li,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(s),
							_1: {ctor: '[]'}
						});
				},
				summary.contents);
		}
	}();
	var contents = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h2,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(summary.title),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$ul,
				{ctor: '[]'},
				items),
			_1: {ctor: '[]'}
		}
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: attributes,
			_1: {ctor: '[]'}
		},
		contents);
};
var _elam03$elam03_github_io$SummaryList$view = function (model) {
	var attributes = _elm_lang$html$Html_Attributes$classList(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'summarylist', _1: true},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'summarylist-container', _1: true},
				_1: {ctor: '[]'}
			}
		});
	var items = A2(
		_elm_lang$core$List$map,
		function (s) {
			return _elam03$elam03_github_io$SummaryList$viewSummary(s);
		},
		model.summaryData.summaries);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: attributes,
			_1: {ctor: '[]'}
		},
		items);
};
var _elam03$elam03_github_io$SummaryList$viewFilter = F2(
	function (titleFilters, model) {
		var getContent = function (titleFilter) {
			return A2(
				_elm_lang$core$List$map,
				function (s) {
					return _elam03$elam03_github_io$SummaryList$viewSummary(s);
				},
				A2(
					_elm_lang$core$List$filter,
					function (summary) {
						return A2(_elm_lang$core$String$contains, titleFilter, summary.title);
					},
					model.summaryData.summaries));
		};
		var items = _elm_lang$core$List$concat(
			A2(
				_elm_lang$core$List$map,
				function (titleFilter) {
					return getContent(titleFilter);
				},
				titleFilters));
		var attributes = _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'summarylist', _1: true},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'summarylist-container', _1: true},
					_1: {ctor: '[]'}
				}
			});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: attributes,
				_1: {ctor: '[]'}
			},
			items);
	});
var _elam03$elam03_github_io$SummaryList$errorSummary = {
	title: 'error',
	contentsType: _elm_lang$core$Maybe$Just('contents type'),
	contents: {
		ctor: '::',
		_0: 'has',
		_1: {
			ctor: '::',
			_0: 'occurred',
			_1: {ctor: '[]'}
		}
	}
};
var _elam03$elam03_github_io$SummaryList$errorSummaryData = {
	summaries: {
		ctor: '::',
		_0: _elam03$elam03_github_io$SummaryList$errorSummary,
		_1: {ctor: '[]'}
	}
};
var _elam03$elam03_github_io$SummaryList_ops = _elam03$elam03_github_io$SummaryList_ops || {};
_elam03$elam03_github_io$SummaryList_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _elam03$elam03_github_io$SummaryList$Summary = F3(
	function (a, b, c) {
		return {title: a, contentsType: b, contents: c};
	});
var _elam03$elam03_github_io$SummaryList$SummaryData = function (a) {
	return {summaries: a};
};
var _elam03$elam03_github_io$SummaryList$decodeData = A2(
	_elm_lang$core$Json_Decode$map,
	_elam03$elam03_github_io$SummaryList$SummaryData,
	A2(
		_elm_lang$core$Json_Decode$field,
		'summaries',
		_elm_lang$core$Json_Decode$list(
			A4(
				_elm_lang$core$Json_Decode$map3,
				_elam03$elam03_github_io$SummaryList$Summary,
				A2(_elm_lang$core$Json_Decode$field, 'title', _elm_lang$core$Json_Decode$string),
				_elm_lang$core$Json_Decode$maybe(
					A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string)),
				A2(
					_elm_lang$core$Json_Decode$field,
					'contents',
					_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))))));
var _elam03$elam03_github_io$SummaryList$Model = F3(
	function (a, b, c) {
		return {file: a, summaryData: b, debug: c};
	});
var _elam03$elam03_github_io$SummaryList$update = F2(
	function (action, model) {
		var _p2 = action;
		if (_p2._0.ctor === 'Ok') {
			return {
				ctor: '_Tuple2',
				_0: A3(_elam03$elam03_github_io$SummaryList$Model, model.file, _p2._0._0, 'Refresh Achieved!'),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _elam03$elam03_github_io$SummaryList$Refresh = function (a) {
	return {ctor: 'Refresh', _0: a};
};
var _elam03$elam03_github_io$SummaryList$getData = function (location) {
	return A2(
		_elm_lang$http$Http$send,
		_elam03$elam03_github_io$SummaryList$Refresh,
		A2(_elm_lang$http$Http$get, location, _elam03$elam03_github_io$SummaryList$decodeData));
};
var _elam03$elam03_github_io$SummaryList$init = function (fileUrl) {
	return {
		ctor: '_Tuple2',
		_0: A3(_elam03$elam03_github_io$SummaryList$Model, fileUrl, _elam03$elam03_github_io$SummaryList$errorSummaryData, 'debug'),
		_1: _elam03$elam03_github_io$SummaryList$getData(fileUrl)
	};
};

var _jinjor$elm_html_parser$Escape$dict = _elm_lang$core$Dict$fromList(
	A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: '&Tab;', _1: ''},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: '&NewLine;', _1: '\n'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '&excl;', _1: '!'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '&quot;', _1: '\"'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&QUOT;', _1: '\"'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&num;', _1: '#'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&dollar;', _1: '$'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&percnt;', _1: '%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&amp;', _1: '&'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&AMP;', _1: '&'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&apos;', _1: '\''},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&lpar;', _1: '('},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&rpar;', _1: ')'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&ast;', _1: '*'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&midast;', _1: '*'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&plus;', _1: '+'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&comma;', _1: ','},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&period;', _1: '.'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&sol;', _1: '/'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&colon;', _1: ':'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&semi;', _1: ';'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&lt;', _1: '<'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&LT;', _1: '<'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&equals;', _1: '='},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&gt;', _1: '>'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&GT;', _1: '>'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&quest;', _1: '?'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&commat;', _1: '@'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&lsqb;', _1: '['},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&lbrack;', _1: '['},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&bsol;', _1: '\\'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&rsqb;', _1: ']'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&rbrack;', _1: ']'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Hat;', _1: '^'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '_&lowbar;', _1: ''},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&grave;', _1: '`'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&DiacriticalGrave;', _1: '`'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&lcub;', _1: '{'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&lbrace;', _1: '{'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&verbar;', _1: '|'},
																																										_1: {ctor: '[]'}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: '&vert;', _1: '|'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '&VerticalLine;', _1: '|'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '&rcub;', _1: '}'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&rbrace;', _1: '}'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&nbsp;', _1: ' '},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&NonBreakingSpace;', _1: ' '},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&iexcl;', _1: '¡'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&cent;', _1: '¢'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&pound;', _1: '£'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&curren;', _1: '¤'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&yen;', _1: '¥'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&brvbar;', _1: '¦'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&sect;', _1: '§'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&Dot;', _1: '¨'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&die;', _1: '¨'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&DoubleDot;', _1: '¨'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&uml;', _1: '¨'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&copy;', _1: '©'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&COPY;', _1: '©'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&ordf;', _1: 'ª'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&laquo;', _1: '«'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&not;', _1: '¬'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&shy;', _1: '­'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&reg;', _1: '®'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&circledR;', _1: '®'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&REG;', _1: '®'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&macr;', _1: '¯'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&OverBar;', _1: '¯'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&strns;', _1: '¯'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&deg;', _1: '°'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&plusmn;', _1: '±'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&pm;', _1: '±'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&PlusMinus;', _1: '±'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&sup2;', _1: '²'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&sup3;', _1: '³'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&acute;', _1: '´'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&DiacriticalAcute;', _1: '´'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&micro;', _1: 'µ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&para;', _1: '¶'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&middot;', _1: '·'},
																																											_1: {ctor: '[]'}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: '&centerdot;', _1: '·'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '&CenterDot;', _1: '·'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&cedil;', _1: '¸'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&Cedilla;', _1: '¸'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&sup1;', _1: '¹'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&ordm;', _1: 'º'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&raquo;', _1: '»'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&frac14;', _1: '¼'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&frac12;', _1: '½'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&half;', _1: '½'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&frac34;', _1: '¾'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&iquest;', _1: '¿'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&Agrave;', _1: 'À'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Aacute;', _1: 'Á'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&Acirc;', _1: 'Â'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Atilde;', _1: 'Ã'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&Auml;', _1: 'Ä'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Aring;', _1: 'Å'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&AElig;', _1: 'Æ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Ccedil;', _1: 'Ç'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&Egrave;', _1: 'È'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Eacute;', _1: 'É'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&Ecirc;', _1: 'Ê'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Euml;', _1: 'Ë'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&Igrave;', _1: 'Ì'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Iacute;', _1: 'Í'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Icirc;', _1: 'Î'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Iuml;', _1: 'Ï'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&ETH;', _1: 'Ð'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Ntilde;', _1: 'Ñ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Ograve;', _1: 'Ò'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Oacute;', _1: 'Ó'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Ocirc;', _1: 'Ô'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Otilde;', _1: 'Õ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Ouml;', _1: 'Ö'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&times;', _1: '×'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Oslash;', _1: 'Ø'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Ugrave;', _1: 'Ù'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Uacute;', _1: 'Ú'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Ucirc;', _1: 'Û'},
																																												_1: {ctor: '[]'}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: '&Uuml;', _1: 'Ü'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&Yacute;', _1: 'Ý'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&THORN;', _1: 'Þ'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&szlig;', _1: 'ß'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&agrave;', _1: 'à'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&aacute;', _1: 'á'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&acirc;', _1: 'â'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&atilde;', _1: 'ã'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&auml;', _1: 'ä'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&aring;', _1: 'å'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&aelig;', _1: 'æ'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&ccedil;', _1: 'ç'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&egrave;', _1: 'è'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&eacute;', _1: 'é'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&ecirc;', _1: 'ê'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&euml;', _1: 'ë'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&igrave;', _1: 'ì'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&iacute;', _1: 'í'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&icirc;', _1: 'î'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&iuml;', _1: 'ï'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&eth;', _1: 'ð'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&ntilde;', _1: 'ñ'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&ograve;', _1: 'ò'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&oacute;', _1: 'ó'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&ocirc;', _1: 'ô'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&otilde;', _1: 'õ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&ouml;', _1: 'ö'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&divide;', _1: '÷'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&div;', _1: '÷'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&oslash;', _1: 'ø'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ugrave;', _1: 'ù'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&uacute;', _1: 'ú'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&ucirc;', _1: 'û'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&uuml;', _1: 'ü'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&yacute;', _1: 'ý'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&thorn;', _1: 'þ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&yuml;', _1: 'ÿ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Amacr;', _1: 'Ā'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&amacr;', _1: 'ā'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Abreve;', _1: 'Ă'},
																																													_1: {ctor: '[]'}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '&abreve;', _1: 'ă'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&Aogon;', _1: 'Ą'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&aogon;', _1: 'ą'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&Cacute;', _1: 'Ć'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&cacute;', _1: 'ć'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&Ccirc;', _1: 'Ĉ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&ccirc;', _1: 'ĉ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&Cdot;', _1: 'Ċ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&cdot;', _1: 'ċ'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&Ccaron;', _1: 'Č'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&ccaron;', _1: 'č'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Dcaron;', _1: 'Ď'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&dcaron;', _1: 'ď'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Dstrok;', _1: 'Đ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&dstrok;', _1: 'đ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Emacr;', _1: 'Ē'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&emacr;', _1: 'ē'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Edot;', _1: 'Ė'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&edot;', _1: 'ė'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Eogon;', _1: 'Ę'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&eogon;', _1: 'ę'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Ecaron;', _1: 'Ě'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&ecaron;', _1: 'ě'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Gcirc;', _1: 'Ĝ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&gcirc;', _1: 'ĝ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Gbreve;', _1: 'Ğ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&gbreve;', _1: 'ğ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Gdot;', _1: 'Ġ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&gdot;', _1: 'ġ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Gcedil;', _1: 'Ģ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Hcirc;', _1: 'Ĥ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&hcirc;', _1: 'ĥ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Hstrok;', _1: 'Ħ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&hstrok;', _1: 'ħ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Itilde;', _1: 'Ĩ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&itilde;', _1: 'ĩ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Imacr;', _1: 'Ī'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&imacr;', _1: 'ī'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Iogon;', _1: 'Į'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&iogon;', _1: 'į'},
																																														_1: {ctor: '[]'}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '&Idot;', _1: 'İ'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&imath;', _1: 'ı'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&inodot;', _1: 'ı'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&IJlig;', _1: 'Ĳ'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&ijlig;', _1: 'ĳ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&Jcirc;', _1: 'Ĵ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&jcirc;', _1: 'ĵ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&Kcedil;', _1: 'Ķ'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&kcedil;', _1: 'ķ'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&kgreen;', _1: 'ĸ'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Lacute;', _1: 'Ĺ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&lacute;', _1: 'ĺ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Lcedil;', _1: 'Ļ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&lcedil;', _1: 'ļ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Lcaron;', _1: 'Ľ'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&lcaron;', _1: 'ľ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Lmidot;', _1: 'Ŀ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&lmidot;', _1: 'ŀ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Lstrok;', _1: 'Ł'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&lstrok;', _1: 'ł'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Nacute;', _1: 'Ń'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&nacute;', _1: 'ń'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Ncedil;', _1: 'Ņ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&ncedil;', _1: 'ņ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Ncaron;', _1: 'Ň'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&ncaron;', _1: 'ň'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&napos;', _1: 'ŉ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&ENG;', _1: 'Ŋ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&eng;', _1: 'ŋ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Omacr;', _1: 'Ō'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&omacr;', _1: 'ō'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Odblac;', _1: 'Ő'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&odblac;', _1: 'ő'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&OElig;', _1: 'Œ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&oelig;', _1: 'œ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Racute;', _1: 'Ŕ'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&racute;', _1: 'ŕ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Rcedil;', _1: 'Ŗ'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&rcedil;', _1: 'ŗ'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Rcaron;', _1: 'Ř'},
																																															_1: {ctor: '[]'}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							},
							A2(
								_elm_lang$core$Basics_ops['++'],
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: '&rcaron;', _1: 'ř'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&Sacute;', _1: 'Ś'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&sacute;', _1: 'ś'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&Scirc;', _1: 'Ŝ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&scirc;', _1: 'ŝ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&Scedil;', _1: 'Ş'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&scedil;', _1: 'ş'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&Scaron;', _1: 'Š'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&scaron;', _1: 'š'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Tcedil;', _1: 'Ţ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&tcedil;', _1: 'ţ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Tcaron;', _1: 'Ť'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&tcaron;', _1: 'ť'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Tstrok;', _1: 'Ŧ'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&tstrok;', _1: 'ŧ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Utilde;', _1: 'Ũ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&utilde;', _1: 'ũ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Umacr;', _1: 'Ū'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&umacr;', _1: 'ū'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Ubreve;', _1: 'Ŭ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&ubreve;', _1: 'ŭ'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Uring;', _1: 'Ů'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&uring;', _1: 'ů'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Udblac;', _1: 'Ű'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&udblac;', _1: 'ű'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Uogon;', _1: 'Ų'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&uogon;', _1: 'ų'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Wcirc;', _1: 'Ŵ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&wcirc;', _1: 'ŵ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Ycirc;', _1: 'Ŷ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&ycirc;', _1: 'ŷ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&Yuml;', _1: 'Ÿ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Zacute;', _1: 'Ź'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&zacute;', _1: 'ź'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Zdot;', _1: 'Ż'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&zdot;', _1: 'ż'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Zcaron;', _1: 'Ž'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&zcaron;', _1: 'ž'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&fnof;', _1: 'ƒ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&imped;', _1: 'Ƶ'},
																																																_1: {ctor: '[]'}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								},
								A2(
									_elm_lang$core$Basics_ops['++'],
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: '&gacute;', _1: 'ǵ'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&jmath;', _1: 'ȷ'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&circ;', _1: 'ˆ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&caron;', _1: 'ˇ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&Hacek;', _1: 'ˇ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&breve;', _1: '˘'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&Breve;', _1: '˘'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&dot;', _1: '˙'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&DiacriticalDot;', _1: '˙'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&ring;', _1: '˚'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&ogon;', _1: '˛'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&tilde;', _1: '˜'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&DiacriticalTilde;', _1: '˜'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&dblac;', _1: '˝'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&DiacriticalDoubleAcute;', _1: '˝'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&DownBreve;', _1: '̑'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&UnderBar;', _1: '̲'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&Alpha;', _1: 'Α'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Beta;', _1: 'Β'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&Gamma;', _1: 'Γ'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Delta;', _1: 'Δ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Epsilon;', _1: 'Ε'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Zeta;', _1: 'Ζ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&Eta;', _1: 'Η'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Theta;', _1: 'Θ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Iota;', _1: 'Ι'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Kappa;', _1: 'Κ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Lambda;', _1: 'Λ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Mu;', _1: 'Μ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Nu;', _1: 'Ν'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&Xi;', _1: 'Ξ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Omicron;', _1: 'Ο'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Pi;', _1: 'Π'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Rho;', _1: 'Ρ'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Sigma;', _1: 'Σ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Tau;', _1: 'Τ'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Upsilon;', _1: 'Υ'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Phi;', _1: 'Φ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&Chi;', _1: 'Χ'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&Psi;', _1: 'Ψ'},
																																																	_1: {ctor: '[]'}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									},
									A2(
										_elm_lang$core$Basics_ops['++'],
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: '&Omega;', _1: 'Ω'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&alpha;', _1: 'α'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&beta;', _1: 'β'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&gamma;', _1: 'γ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&delta;', _1: 'δ'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&epsiv;', _1: 'ε'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&varepsilon;', _1: 'ε'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&epsilon;', _1: 'ε'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&zeta;', _1: 'ζ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&eta;', _1: 'η'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&theta;', _1: 'θ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&iota;', _1: 'ι'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&kappa;', _1: 'κ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&lambda;', _1: 'λ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&mu;', _1: 'μ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&nu;', _1: 'ν'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&xi;', _1: 'ξ'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&omicron;', _1: 'ο'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&pi;', _1: 'π'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&rho;', _1: 'ρ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&sigmav;', _1: 'ς'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&varsigma;', _1: 'ς'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&sigmaf;', _1: 'ς'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&sigma;', _1: 'σ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&tau;', _1: 'τ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&upsi;', _1: 'υ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&upsilon;', _1: 'υ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&phi;', _1: 'φ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&phiv;', _1: 'φ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&varphi;', _1: 'φ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&chi;', _1: 'χ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&psi;', _1: 'ψ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&omega;', _1: 'ω'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&thetav;', _1: 'ϑ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&vartheta;', _1: 'ϑ'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&thetasym;', _1: 'ϑ'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Upsi;', _1: 'ϒ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&upsih;', _1: 'ϒ'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&straightphi;', _1: 'ϕ'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&piv;', _1: 'ϖ'},
																																																		_1: {ctor: '[]'}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										A2(
											_elm_lang$core$Basics_ops['++'],
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '&varpi;', _1: 'ϖ'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&Gammad;', _1: 'Ϝ'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&gammad;', _1: 'ϝ'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&digamma;', _1: 'ϝ'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&kappav;', _1: 'ϰ'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&varkappa;', _1: 'ϰ'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&rhov;', _1: 'ϱ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&varrho;', _1: 'ϱ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&epsi;', _1: 'ϵ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&straightepsilon;', _1: 'ϵ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&bepsi;', _1: '϶'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&backepsilon;', _1: '϶'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&IOcy;', _1: 'Ё'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&DJcy;', _1: 'Ђ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&GJcy;', _1: 'Ѓ'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&Jukcy;', _1: 'Є'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&DScy;', _1: 'Ѕ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&Iukcy;', _1: 'І'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&YIcy;', _1: 'Ї'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Jsercy;', _1: 'Ј'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&LJcy;', _1: 'Љ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&NJcy;', _1: 'Њ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&TSHcy;', _1: 'Ћ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&KJcy;', _1: 'Ќ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&Ubrcy;', _1: 'Ў'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&DZcy;', _1: 'Џ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Acy;', _1: 'А'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Bcy;', _1: 'Б'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&Vcy;', _1: 'В'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Gcy;', _1: 'Г'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Dcy;', _1: 'Д'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&IEcy;', _1: 'Е'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&ZHcy;', _1: 'Ж'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Zcy;', _1: 'З'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Icy;', _1: 'И'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Jcy;', _1: 'Й'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&Kcy;', _1: 'К'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&Lcy;', _1: 'Л'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Mcy;', _1: 'М'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&Ncy;', _1: 'Н'},
																																																			_1: {ctor: '[]'}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											},
											A2(
												_elm_lang$core$Basics_ops['++'],
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '&Ocy;', _1: 'О'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&Pcy;', _1: 'П'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&Rcy;', _1: 'Р'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&Scy;', _1: 'С'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&Tcy;', _1: 'Т'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Ucy;', _1: 'У'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&Fcy;', _1: 'Ф'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&KHcy;', _1: 'Х'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&TScy;', _1: 'Ц'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&CHcy;', _1: 'Ч'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&SHcy;', _1: 'Ш'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&SHCHcy;', _1: 'Щ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&HARDcy;', _1: 'Ъ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Ycy;', _1: 'Ы'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&SOFTcy;', _1: 'Ь'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Ecy;', _1: 'Э'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&YUcy;', _1: 'Ю'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&YAcy;', _1: 'Я'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&acy;', _1: 'а'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&bcy;', _1: 'б'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&vcy;', _1: 'в'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&gcy;', _1: 'г'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&dcy;', _1: 'д'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&iecy;', _1: 'е'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&zhcy;', _1: 'ж'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&zcy;', _1: 'з'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&icy;', _1: 'и'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&jcy;', _1: 'й'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&kcy;', _1: 'к'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&lcy;', _1: 'л'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&mcy;', _1: 'м'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&ncy;', _1: 'н'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ocy;', _1: 'о'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&pcy;', _1: 'п'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&rcy;', _1: 'р'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&scy;', _1: 'с'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&tcy;', _1: 'т'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&ucy;', _1: 'у'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&fcy;', _1: 'ф'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&khcy;', _1: 'х'},
																																																				_1: {ctor: '[]'}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												},
												A2(
													_elm_lang$core$Basics_ops['++'],
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '&tscy;', _1: 'ц'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&chcy;', _1: 'ч'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&shcy;', _1: 'ш'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&shchcy;', _1: 'щ'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&hardcy;', _1: 'ъ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&ycy;', _1: 'ы'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&softcy;', _1: 'ь'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&ecy;', _1: 'э'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&yucy;', _1: 'ю'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&yacy;', _1: 'я'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&iocy;', _1: 'ё'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&djcy;', _1: 'ђ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&gjcy;', _1: 'ѓ'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&jukcy;', _1: 'є'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&dscy;', _1: 'ѕ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&iukcy;', _1: 'і'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&yicy;', _1: 'ї'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&jsercy;', _1: 'ј'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&ljcy;', _1: 'љ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&njcy;', _1: 'њ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&tshcy;', _1: 'ћ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&kjcy;', _1: 'ќ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ubrcy;', _1: 'ў'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&dzcy;', _1: 'џ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&ensp;', _1: ' '},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&emsp;', _1: ' '},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&emsp13;', _1: ' '},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&emsp14;', _1: ' '},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&numsp;', _1: ' '},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&puncsp;', _1: ' '},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&thinsp;', _1: ' '},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ThinSpace;', _1: ' '},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&hairsp;', _1: ' '},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&VeryThinSpace;', _1: ' '},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&ZeroWidthSpace;', _1: '​'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&NegativeVeryThinSpace;', _1: '​'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&NegativeThinSpace;', _1: '​'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&NegativeMediumSpace;', _1: '​'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&NegativeThickSpace;', _1: '​'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&zwnj;', _1: '‌'},
																																																					_1: {ctor: '[]'}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													},
													A2(
														_elm_lang$core$Basics_ops['++'],
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: '&zwj;', _1: '‍'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&lrm;', _1: '‎'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&rlm;', _1: '‏'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&hyphen;', _1: '‐'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&dash;', _1: '‐'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&ndash;', _1: '–'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&mdash;', _1: '—'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&horbar;', _1: '―'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&Verbar;', _1: '‖'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Vert;', _1: '‖'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&lsquo;', _1: '‘'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&OpenCurlyQuote;', _1: '‘'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&rsquo;', _1: '’'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&rsquor;', _1: '’'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&CloseCurlyQuote;', _1: '’'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&lsquor;', _1: '‚'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&sbquo;', _1: '‚'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&ldquo;', _1: '“'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&OpenCurlyDoubleQuote;', _1: '“'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&rdquo;', _1: '”'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&rdquor;', _1: '”'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&CloseCurlyDoubleQuote;', _1: '”'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&ldquor;', _1: '„'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&bdquo;', _1: '„'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&dagger;', _1: '†'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&Dagger;', _1: '‡'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&ddagger;', _1: '‡'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&bull;', _1: '•'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&bullet;', _1: '•'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&nldr;', _1: '‥'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&hellip;', _1: '…'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&mldr;', _1: '…'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&permil;', _1: '‰'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&pertenk;', _1: '‱'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&prime;', _1: '′'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Prime;', _1: '″'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&tprime;', _1: '‴'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&bprime;', _1: '‵'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&backprime;', _1: '‵'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&lsaquo;', _1: '‹'},
																																																						_1: {ctor: '[]'}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														},
														A2(
															_elm_lang$core$Basics_ops['++'],
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: '&rsaquo;', _1: '›'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&oline;', _1: '‾'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&caret;', _1: '⁁'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&hybull;', _1: '⁃'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&frasl;', _1: '⁄'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&bsemi;', _1: '⁏'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&qprime;', _1: '⁗'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&MediumSpace;', _1: ' '},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&NoBreak;', _1: '⁠'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&ApplyFunction;', _1: '⁡'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&af;', _1: '⁡'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&InvisibleTimes;', _1: '⁢'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&it;', _1: '⁢'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&InvisibleComma;', _1: '⁣'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&ic;', _1: '⁣'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&euro;', _1: '€'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&tdot;', _1: '⃛'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&TripleDot;', _1: '⃛'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&DotDot;', _1: '⃜'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Copf;', _1: 'ℂ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&complexes;', _1: 'ℂ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&incare;', _1: '℅'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&gscr;', _1: 'ℊ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&hamilt;', _1: 'ℋ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&HilbertSpace;', _1: 'ℋ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Hscr;', _1: 'ℋ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Hfr;', _1: 'ℌ'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Poincareplane;', _1: 'ℌ'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&quaternions;', _1: 'ℍ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Hopf;', _1: 'ℍ'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&planckh;', _1: 'ℎ'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&planck;', _1: 'ℏ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&hbar;', _1: 'ℏ'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&plankv;', _1: 'ℏ'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&hslash;', _1: 'ℏ'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&Iscr;', _1: 'ℐ'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&imagline;', _1: 'ℐ'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&image;', _1: 'ℑ'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Im;', _1: 'ℑ'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&imagpart;', _1: 'ℑ'},
																																																							_1: {ctor: '[]'}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															},
															A2(
																_elm_lang$core$Basics_ops['++'],
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: '&Ifr;', _1: 'ℑ'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Lscr;', _1: 'ℒ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&lagran;', _1: 'ℒ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Laplacetrf;', _1: 'ℒ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&ell;', _1: 'ℓ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&Nopf;', _1: 'ℕ'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&naturals;', _1: 'ℕ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&numero;', _1: '№'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&copysr;', _1: '℗'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&weierp;', _1: '℘'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&wp;', _1: '℘'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&Popf;', _1: 'ℙ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&primes;', _1: 'ℙ'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&rationals;', _1: 'ℚ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Qopf;', _1: 'ℚ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Rscr;', _1: 'ℛ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&realine;', _1: 'ℛ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&real;', _1: 'ℜ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Re;', _1: 'ℜ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&realpart;', _1: 'ℜ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Rfr;', _1: 'ℜ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&reals;', _1: 'ℝ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Ropf;', _1: 'ℝ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&rx;', _1: '℞'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&trade;', _1: '™'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&TRADE;', _1: '™'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&integers;', _1: 'ℤ'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Zopf;', _1: 'ℤ'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ohm;', _1: 'Ω'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&mho;', _1: '℧'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Zfr;', _1: 'ℨ'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&zeetrf;', _1: 'ℨ'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&iiota;', _1: '℩'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&angst;', _1: 'Å'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&bernou;', _1: 'ℬ'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&Bernoullis;', _1: 'ℬ'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Bscr;', _1: 'ℬ'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Cfr;', _1: 'ℭ'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&Cayleys;', _1: 'ℭ'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&escr;', _1: 'ℯ'},
																																																								_1: {ctor: '[]'}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																},
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: '&Escr;', _1: 'ℰ'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&expectation;', _1: 'ℰ'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Fscr;', _1: 'ℱ'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&Fouriertrf;', _1: 'ℱ'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&phmmat;', _1: 'ℳ'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&Mellintrf;', _1: 'ℳ'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Mscr;', _1: 'ℳ'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&order;', _1: 'ℴ'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&orderof;', _1: 'ℴ'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&oscr;', _1: 'ℴ'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&alefsym;', _1: 'ℵ'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&aleph;', _1: 'ℵ'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&beth;', _1: 'ℶ'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&gimel;', _1: 'ℷ'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&daleth;', _1: 'ℸ'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&CapitalDifferentialD;', _1: 'ⅅ'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&DD;', _1: 'ⅅ'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&DifferentialD;', _1: 'ⅆ'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&dd;', _1: 'ⅆ'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&ExponentialE;', _1: 'ⅇ'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&exponentiale;', _1: 'ⅇ'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&ee;', _1: 'ⅇ'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&ImaginaryI;', _1: 'ⅈ'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&ii;', _1: 'ⅈ'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&frac13;', _1: '⅓'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&frac23;', _1: '⅔'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&frac15;', _1: '⅕'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&frac25;', _1: '⅖'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&frac35;', _1: '⅗'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&frac45;', _1: '⅘'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&frac16;', _1: '⅙'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&frac56;', _1: '⅚'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&frac18;', _1: '⅛'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&frac38;', _1: '⅜'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&frac58;', _1: '⅝'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&frac78;', _1: '⅞'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&larr;', _1: '←'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&leftarrow;', _1: '←'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&LeftArrow;', _1: '←'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&slarr;', _1: '←'},
																																																									_1: {ctor: '[]'}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	},
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		{
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: '&ShortLeftArrow;', _1: '←'},
																			_1: {
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&uarr;', _1: '↑'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&uparrow;', _1: '↑'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&UpArrow;', _1: '↑'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&ShortUpArrow;', _1: '↑'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&rarr;', _1: '→'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&rightarrow;', _1: '→'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&RightArrow;', _1: '→'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&srarr;', _1: '→'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&ShortRightArrow;', _1: '→'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&darr;', _1: '↓'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&downarrow;', _1: '↓'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&DownArrow;', _1: '↓'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&ShortDownArrow;', _1: '↓'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&harr;', _1: '↔'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&leftrightarrow;', _1: '↔'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&LeftRightArrow;', _1: '↔'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&varr;', _1: '↕'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&updownarrow;', _1: '↕'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&UpDownArrow;', _1: '↕'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&nwarr;', _1: '↖'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&UpperLeftArrow;', _1: '↖'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&nwarrow;', _1: '↖'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&nearr;', _1: '↗'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&UpperRightArrow;', _1: '↗'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&nearrow;', _1: '↗'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&searr;', _1: '↘'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&searrow;', _1: '↘'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&LowerRightArrow;', _1: '↘'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&swarr;', _1: '↙'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&swarrow;', _1: '↙'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&LowerLeftArrow;', _1: '↙'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&nlarr;', _1: '↚'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&nleftarrow;', _1: '↚'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&nrarr;', _1: '↛'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&nrightarrow;', _1: '↛'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&rarrw;', _1: '↝'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&rightsquigarrow;', _1: '↝'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&Larr;', _1: '↞'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&twoheadleftarrow;', _1: '↞'},
																																																										_1: {ctor: '[]'}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		},
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			{
																				ctor: '::',
																				_0: {ctor: '_Tuple2', _0: '&Uarr;', _1: '↟'},
																				_1: {
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&Rarr;', _1: '↠'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&twoheadrightarrow;', _1: '↠'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&Darr;', _1: '↡'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&larrtl;', _1: '↢'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&leftarrowtail;', _1: '↢'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&rarrtl;', _1: '↣'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&rightarrowtail;', _1: '↣'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&LeftTeeArrow;', _1: '↤'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&mapstoleft;', _1: '↤'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&UpTeeArrow;', _1: '↥'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&mapstoup;', _1: '↥'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&map;', _1: '↦'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&RightTeeArrow;', _1: '↦'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&mapsto;', _1: '↦'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&DownTeeArrow;', _1: '↧'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&mapstodown;', _1: '↧'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&larrhk;', _1: '↩'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&hookleftarrow;', _1: '↩'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&rarrhk;', _1: '↪'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&hookrightarrow;', _1: '↪'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&larrlp;', _1: '↫'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&looparrowleft;', _1: '↫'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&rarrlp;', _1: '↬'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&looparrowright;', _1: '↬'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&harrw;', _1: '↭'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&leftrightsquigarrow;', _1: '↭'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&nharr;', _1: '↮'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&nleftrightarrow;', _1: '↮'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&lsh;', _1: '↰'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Lsh;', _1: '↰'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&rsh;', _1: '↱'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&Rsh;', _1: '↱'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&ldsh;', _1: '↲'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&rdsh;', _1: '↳'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&crarr;', _1: '↵'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&cularr;', _1: '↶'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&curvearrowleft;', _1: '↶'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&curarr;', _1: '↷'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&curvearrowright;', _1: '↷'},
																																																											_1: {ctor: '[]'}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			},
																			A2(
																				_elm_lang$core$Basics_ops['++'],
																				{
																					ctor: '::',
																					_0: {ctor: '_Tuple2', _0: '&olarr;', _1: '↺'},
																					_1: {
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&circlearrowleft;', _1: '↺'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&orarr;', _1: '↻'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&circlearrowright;', _1: '↻'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&lharu;', _1: '↼'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&LeftVector;', _1: '↼'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&leftharpoonup;', _1: '↼'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&lhard;', _1: '↽'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&leftharpoondown;', _1: '↽'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&DownLeftVector;', _1: '↽'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&uharr;', _1: '↾'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&upharpoonright;', _1: '↾'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&RightUpVector;', _1: '↾'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&uharl;', _1: '↿'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&upharpoonleft;', _1: '↿'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&LeftUpVector;', _1: '↿'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&rharu;', _1: '⇀'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&RightVector;', _1: '⇀'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&rightharpoonup;', _1: '⇀'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&rhard;', _1: '⇁'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&rightharpoondown;', _1: '⇁'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&DownRightVector;', _1: '⇁'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&dharr;', _1: '⇂'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&RightDownVector;', _1: '⇂'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&downharpoonright;', _1: '⇂'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&dharl;', _1: '⇃'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&LeftDownVector;', _1: '⇃'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&downharpoonleft;', _1: '⇃'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&rlarr;', _1: '⇄'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&rightleftarrows;', _1: '⇄'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&RightArrowLeftArrow;', _1: '⇄'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&udarr;', _1: '⇅'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&UpArrowDownArrow;', _1: '⇅'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&lrarr;', _1: '⇆'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&leftrightarrows;', _1: '⇆'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&LeftArrowRightArrow;', _1: '⇆'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&llarr;', _1: '⇇'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&leftleftarrows;', _1: '⇇'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&uuarr;', _1: '⇈'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&upuparrows;', _1: '⇈'},
																																																												_1: {ctor: '[]'}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				},
																				A2(
																					_elm_lang$core$Basics_ops['++'],
																					{
																						ctor: '::',
																						_0: {ctor: '_Tuple2', _0: '&rrarr;', _1: '⇉'},
																						_1: {
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&rightrightarrows;', _1: '⇉'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&ddarr;', _1: '⇊'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&downdownarrows;', _1: '⇊'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&lrhar;', _1: '⇋'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&ReverseEquilibrium;', _1: '⇋'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&leftrightharpoons;', _1: '⇋'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&rlhar;', _1: '⇌'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&rightleftharpoons;', _1: '⇌'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&Equilibrium;', _1: '⇌'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&nlArr;', _1: '⇍'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&nLeftarrow;', _1: '⇍'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&nhArr;', _1: '⇎'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&nLeftrightarrow;', _1: '⇎'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&nrArr;', _1: '⇏'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&nRightarrow;', _1: '⇏'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&lArr;', _1: '⇐'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Leftarrow;', _1: '⇐'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&DoubleLeftArrow;', _1: '⇐'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&uArr;', _1: '⇑'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Uparrow;', _1: '⇑'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&DoubleUpArrow;', _1: '⇑'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&rArr;', _1: '⇒'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Rightarrow;', _1: '⇒'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Implies;', _1: '⇒'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&DoubleRightArrow;', _1: '⇒'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&dArr;', _1: '⇓'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&Downarrow;', _1: '⇓'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&DoubleDownArrow;', _1: '⇓'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&hArr;', _1: '⇔'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&Leftrightarrow;', _1: '⇔'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&DoubleLeftRightArrow;', _1: '⇔'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&iff;', _1: '⇔'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&vArr;', _1: '⇕'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&Updownarrow;', _1: '⇕'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&DoubleUpDownArrow;', _1: '⇕'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nwArr;', _1: '⇖'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&neArr;', _1: '⇗'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&seArr;', _1: '⇘'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&swArr;', _1: '⇙'},
																																																													_1: {ctor: '[]'}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					},
																					A2(
																						_elm_lang$core$Basics_ops['++'],
																						{
																							ctor: '::',
																							_0: {ctor: '_Tuple2', _0: '&lAarr;', _1: '⇚'},
																							_1: {
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&Lleftarrow;', _1: '⇚'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&rAarr;', _1: '⇛'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&Rrightarrow;', _1: '⇛'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&zigrarr;', _1: '⇝'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&larrb;', _1: '⇤'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&LeftArrowBar;', _1: '⇤'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&rarrb;', _1: '⇥'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&RightArrowBar;', _1: '⇥'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&duarr;', _1: '⇵'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&DownArrowUpArrow;', _1: '⇵'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&loarr;', _1: '⇽'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&roarr;', _1: '⇾'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&hoarr;', _1: '⇿'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&forall;', _1: '∀'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&ForAll;', _1: '∀'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&comp;', _1: '∁'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&complement;', _1: '∁'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&part;', _1: '∂'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&PartialD;', _1: '∂'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&exist;', _1: '∃'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Exists;', _1: '∃'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&nexist;', _1: '∄'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&NotExists;', _1: '∄'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&nexists;', _1: '∄'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&empty;', _1: '∅'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&emptyset;', _1: '∅'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&emptyv;', _1: '∅'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&varnothing;', _1: '∅'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&nabla;', _1: '∇'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Del;', _1: '∇'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&isin;', _1: '∈'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&isinv;', _1: '∈'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&Element;', _1: '∈'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&in;', _1: '∈'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&notin;', _1: '∉'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&NotElement;', _1: '∉'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&notinva;', _1: '∉'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&niv;', _1: '∋'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&ReverseElement;', _1: '∋'},
																																																														_1: {ctor: '[]'}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						},
																						A2(
																							_elm_lang$core$Basics_ops['++'],
																							{
																								ctor: '::',
																								_0: {ctor: '_Tuple2', _0: '&ni;', _1: '∋'},
																								_1: {
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&SuchThat;', _1: '∋'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&notni;', _1: '∌'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&notniva;', _1: '∌'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&NotReverseElement;', _1: '∌'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&prod;', _1: '∏'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Product;', _1: '∏'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&coprod;', _1: '∐'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Coproduct;', _1: '∐'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&sum;', _1: '∑'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&Sum;', _1: '∑'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&minus;', _1: '−'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&mnplus;', _1: '∓'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&mp;', _1: '∓'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&MinusPlus;', _1: '∓'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&plusdo;', _1: '∔'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&dotplus;', _1: '∔'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&setmn;', _1: '∖'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&setminus;', _1: '∖'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Backslash;', _1: '∖'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&ssetmn;', _1: '∖'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&smallsetminus;', _1: '∖'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&lowast;', _1: '∗'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&compfn;', _1: '∘'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&SmallCircle;', _1: '∘'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&radic;', _1: '√'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Sqrt;', _1: '√'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&prop;', _1: '∝'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&propto;', _1: '∝'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Proportional;', _1: '∝'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&vprop;', _1: '∝'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&varpropto;', _1: '∝'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&infin;', _1: '∞'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&angrt;', _1: '∟'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&ang;', _1: '∠'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&angle;', _1: '∠'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&angmsd;', _1: '∡'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&measuredangle;', _1: '∡'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&angsph;', _1: '∢'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&mid;', _1: '∣'},
																																																															_1: {ctor: '[]'}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							},
																							A2(
																								_elm_lang$core$Basics_ops['++'],
																								{
																									ctor: '::',
																									_0: {ctor: '_Tuple2', _0: '&VerticalBar;', _1: '∣'},
																									_1: {
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&smid;', _1: '∣'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&shortmid;', _1: '∣'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&nmid;', _1: '∤'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&NotVerticalBar;', _1: '∤'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&nsmid;', _1: '∤'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&nshortmid;', _1: '∤'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&par;', _1: '∥'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&parallel;', _1: '∥'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&DoubleVerticalBar;', _1: '∥'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&spar;', _1: '∥'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&shortparallel;', _1: '∥'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&npar;', _1: '∦'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&nparallel;', _1: '∦'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&NotDoubleVerticalBar;', _1: '∦'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&nspar;', _1: '∦'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&nshortparallel;', _1: '∦'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&and;', _1: '∧'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&wedge;', _1: '∧'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&or;', _1: '∨'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&vee;', _1: '∨'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&cap;', _1: '∩'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&cup;', _1: '∪'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&int;', _1: '∫'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&Integral;', _1: '∫'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Int;', _1: '∬'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&tint;', _1: '∭'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&iiint;', _1: '∭'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&conint;', _1: '∮'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&oint;', _1: '∮'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&ContourIntegral;', _1: '∮'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&Conint;', _1: '∯'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&DoubleContourIntegral;', _1: '∯'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&Cconint;', _1: '∰'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&cwint;', _1: '∱'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&cwconint;', _1: '∲'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&ClockwiseContourIntegral;', _1: '∲'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&awconint;', _1: '∳'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&CounterClockwiseContourIntegral;', _1: '∳'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&there4;', _1: '∴'},
																																																																_1: {ctor: '[]'}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								},
																								A2(
																									_elm_lang$core$Basics_ops['++'],
																									{
																										ctor: '::',
																										_0: {ctor: '_Tuple2', _0: '&therefore;', _1: '∴'},
																										_1: {
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&Therefore;', _1: '∴'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&becaus;', _1: '∵'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&because;', _1: '∵'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&Because;', _1: '∵'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&ratio;', _1: '∶'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&Colon;', _1: '∷'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&Proportion;', _1: '∷'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&minusd;', _1: '∸'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&dotminus;', _1: '∸'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&mDDot;', _1: '∺'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&homtht;', _1: '∻'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&sim;', _1: '∼'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&Tilde;', _1: '∼'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&thksim;', _1: '∼'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&thicksim;', _1: '∼'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&bsim;', _1: '∽'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&backsim;', _1: '∽'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&ac;', _1: '∾'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&mstpos;', _1: '∾'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&acd;', _1: '∿'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&wreath;', _1: '≀'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&VerticalTilde;', _1: '≀'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&wr;', _1: '≀'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&nsim;', _1: '≁'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&NotTilde;', _1: '≁'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&esim;', _1: '≂'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&EqualTilde;', _1: '≂'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&eqsim;', _1: '≂'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&sime;', _1: '≃'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&TildeEqual;', _1: '≃'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&simeq;', _1: '≃'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nsime;', _1: '≄'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&nsimeq;', _1: '≄'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&NotTildeEqual;', _1: '≄'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&cong;', _1: '≅'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&TildeFullEqual;', _1: '≅'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&simne;', _1: '≆'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&ncong;', _1: '≇'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&NotTildeFullEqual;', _1: '≇'},
																																																																	_1: {ctor: '[]'}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									},
																									A2(
																										_elm_lang$core$Basics_ops['++'],
																										{
																											ctor: '::',
																											_0: {ctor: '_Tuple2', _0: '&asymp;', _1: '≈'},
																											_1: {
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&ap;', _1: '≈'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&TildeTilde;', _1: '≈'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&approx;', _1: '≈'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&thkap;', _1: '≈'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&thickapprox;', _1: '≈'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&nap;', _1: '≉'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&NotTildeTilde;', _1: '≉'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&napprox;', _1: '≉'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ape;', _1: '≊'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&approxeq;', _1: '≊'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&apid;', _1: '≋'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&bcong;', _1: '≌'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&backcong;', _1: '≌'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&asympeq;', _1: '≍'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&CupCap;', _1: '≍'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&bump;', _1: '≎'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&HumpDownHump;', _1: '≎'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&Bumpeq;', _1: '≎'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&bumpe;', _1: '≏'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&HumpEqual;', _1: '≏'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&bumpeq;', _1: '≏'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&esdot;', _1: '≐'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&DotEqual;', _1: '≐'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&doteq;', _1: '≐'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&eDot;', _1: '≑'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&doteqdot;', _1: '≑'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&efDot;', _1: '≒'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&fallingdotseq;', _1: '≒'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&erDot;', _1: '≓'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&risingdotseq;', _1: '≓'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&colone;', _1: '≔'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&coloneq;', _1: '≔'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&Assign;', _1: '≔'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&ecolon;', _1: '≕'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&eqcolon;', _1: '≕'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&ecir;', _1: '≖'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&eqcirc;', _1: '≖'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&cire;', _1: '≗'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&circeq;', _1: '≗'},
																																																																		_1: {ctor: '[]'}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										},
																										A2(
																											_elm_lang$core$Basics_ops['++'],
																											{
																												ctor: '::',
																												_0: {ctor: '_Tuple2', _0: '&wedgeq;', _1: '≙'},
																												_1: {
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&veeeq;', _1: '≚'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&trie;', _1: '≜'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&triangleq;', _1: '≜'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&equest;', _1: '≟'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&questeq;', _1: '≟'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&ne;', _1: '≠'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&NotEqual;', _1: '≠'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&equiv;', _1: '≡'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&Congruent;', _1: '≡'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&nequiv;', _1: '≢'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&NotCongruent;', _1: '≢'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&le;', _1: '≤'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&leq;', _1: '≤'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&ge;', _1: '≥'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&GreaterEqual;', _1: '≥'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&geq;', _1: '≥'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&lE;', _1: '≦'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&LessFullEqual;', _1: '≦'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&leqq;', _1: '≦'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&gE;', _1: '≧'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&GreaterFullEqual;', _1: '≧'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&geqq;', _1: '≧'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&lnE;', _1: '≨'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&lneqq;', _1: '≨'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&gnE;', _1: '≩'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&gneqq;', _1: '≩'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&Lt;', _1: '≪'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&NestedLessLess;', _1: '≪'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&ll;', _1: '≪'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&Gt;', _1: '≫'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&NestedGreaterGreater;', _1: '≫'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&gg;', _1: '≫'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&twixt;', _1: '≬'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&between;', _1: '≬'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&NotCupCap;', _1: '≭'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&nlt;', _1: '≮'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&NotLess;', _1: '≮'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&nless;', _1: '≮'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&ngt;', _1: '≯'},
																																																																			_1: {ctor: '[]'}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											},
																											A2(
																												_elm_lang$core$Basics_ops['++'],
																												{
																													ctor: '::',
																													_0: {ctor: '_Tuple2', _0: '&NotGreater;', _1: '≯'},
																													_1: {
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&ngtr;', _1: '≯'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&nle;', _1: '≰'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&NotLessEqual;', _1: '≰'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&nleq;', _1: '≰'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&nge;', _1: '≱'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&NotGreaterEqual;', _1: '≱'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ngeq;', _1: '≱'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&lsim;', _1: '≲'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&LessTilde;', _1: '≲'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&lesssim;', _1: '≲'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&gsim;', _1: '≳'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&gtrsim;', _1: '≳'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&GreaterTilde;', _1: '≳'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&nlsim;', _1: '≴'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&NotLessTilde;', _1: '≴'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ngsim;', _1: '≵'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&NotGreaterTilde;', _1: '≵'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&lg;', _1: '≶'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&lessgtr;', _1: '≶'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&LessGreater;', _1: '≶'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&gl;', _1: '≷'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&gtrless;', _1: '≷'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&GreaterLess;', _1: '≷'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&ntlg;', _1: '≸'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&NotLessGreater;', _1: '≸'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&ntgl;', _1: '≹'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&NotGreaterLess;', _1: '≹'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&pr;', _1: '≺'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&Precedes;', _1: '≺'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&prec;', _1: '≺'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&sc;', _1: '≻'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&Succeeds;', _1: '≻'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&succ;', _1: '≻'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&prcue;', _1: '≼'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&PrecedesSlantEqual;', _1: '≼'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&preccurlyeq;', _1: '≼'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&sccue;', _1: '≽'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&SucceedsSlantEqual;', _1: '≽'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&succcurlyeq;', _1: '≽'},
																																																																				_1: {ctor: '[]'}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												},
																												A2(
																													_elm_lang$core$Basics_ops['++'],
																													{
																														ctor: '::',
																														_0: {ctor: '_Tuple2', _0: '&prsim;', _1: '≾'},
																														_1: {
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&precsim;', _1: '≾'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&PrecedesTilde;', _1: '≾'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&scsim;', _1: '≿'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&succsim;', _1: '≿'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&SucceedsTilde;', _1: '≿'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&npr;', _1: '⊀'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&nprec;', _1: '⊀'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&NotPrecedes;', _1: '⊀'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&nsc;', _1: '⊁'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&nsucc;', _1: '⊁'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&NotSucceeds;', _1: '⊁'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&sub;', _1: '⊂'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&subset;', _1: '⊂'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&sup;', _1: '⊃'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&supset;', _1: '⊃'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Superset;', _1: '⊃'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&nsub;', _1: '⊄'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&nsup;', _1: '⊅'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&sube;', _1: '⊆'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&SubsetEqual;', _1: '⊆'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&subseteq;', _1: '⊆'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&supe;', _1: '⊇'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&supseteq;', _1: '⊇'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&SupersetEqual;', _1: '⊇'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&nsube;', _1: '⊈'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&nsubseteq;', _1: '⊈'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&NotSubsetEqual;', _1: '⊈'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nsupe;', _1: '⊉'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&nsupseteq;', _1: '⊉'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&NotSupersetEqual;', _1: '⊉'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&subne;', _1: '⊊'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&subsetneq;', _1: '⊊'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&supne;', _1: '⊋'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&supsetneq;', _1: '⊋'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&cupdot;', _1: '⊍'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&uplus;', _1: '⊎'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&UnionPlus;', _1: '⊎'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&sqsub;', _1: '⊏'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&SquareSubset;', _1: '⊏'},
																																																																					_1: {ctor: '[]'}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													},
																													A2(
																														_elm_lang$core$Basics_ops['++'],
																														{
																															ctor: '::',
																															_0: {ctor: '_Tuple2', _0: '&sqsubset;', _1: '⊏'},
																															_1: {
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&sqsup;', _1: '⊐'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&SquareSuperset;', _1: '⊐'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&sqsupset;', _1: '⊐'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&sqsube;', _1: '⊑'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&SquareSubsetEqual;', _1: '⊑'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&sqsubseteq;', _1: '⊑'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&sqsupe;', _1: '⊒'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&SquareSupersetEqual;', _1: '⊒'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&sqsupseteq;', _1: '⊒'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&sqcap;', _1: '⊓'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&SquareIntersection;', _1: '⊓'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&sqcup;', _1: '⊔'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&SquareUnion;', _1: '⊔'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&oplus;', _1: '⊕'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&CirclePlus;', _1: '⊕'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&ominus;', _1: '⊖'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&CircleMinus;', _1: '⊖'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&otimes;', _1: '⊗'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&CircleTimes;', _1: '⊗'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&osol;', _1: '⊘'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&odot;', _1: '⊙'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&CircleDot;', _1: '⊙'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&ocir;', _1: '⊚'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&circledcirc;', _1: '⊚'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&oast;', _1: '⊛'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&circledast;', _1: '⊛'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&odash;', _1: '⊝'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&circleddash;', _1: '⊝'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&plusb;', _1: '⊞'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&boxplus;', _1: '⊞'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&minusb;', _1: '⊟'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&boxminus;', _1: '⊟'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&timesb;', _1: '⊠'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&boxtimes;', _1: '⊠'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&sdotb;', _1: '⊡'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&dotsquare;', _1: '⊡'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&vdash;', _1: '⊢'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&RightTee;', _1: '⊢'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&dashv;', _1: '⊣'},
																																																																						_1: {ctor: '[]'}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														},
																														A2(
																															_elm_lang$core$Basics_ops['++'],
																															{
																																ctor: '::',
																																_0: {ctor: '_Tuple2', _0: '&LeftTee;', _1: '⊣'},
																																_1: {
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&top;', _1: '⊤'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&DownTee;', _1: '⊤'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&bottom;', _1: '⊥'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&bot;', _1: '⊥'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&perp;', _1: '⊥'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&UpTee;', _1: '⊥'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&models;', _1: '⊧'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&vDash;', _1: '⊨'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&DoubleRightTee;', _1: '⊨'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Vdash;', _1: '⊩'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&Vvdash;', _1: '⊪'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&VDash;', _1: '⊫'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&nvdash;', _1: '⊬'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&nvDash;', _1: '⊭'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&nVdash;', _1: '⊮'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&nVDash;', _1: '⊯'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&prurel;', _1: '⊰'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&vltri;', _1: '⊲'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&vartriangleleft;', _1: '⊲'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&LeftTriangle;', _1: '⊲'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&vrtri;', _1: '⊳'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&vartriangleright;', _1: '⊳'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&RightTriangle;', _1: '⊳'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&ltrie;', _1: '⊴'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&trianglelefteq;', _1: '⊴'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&LeftTriangleEqual;', _1: '⊴'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&rtrie;', _1: '⊵'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&trianglerighteq;', _1: '⊵'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&RightTriangleEqual;', _1: '⊵'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&origof;', _1: '⊶'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&imof;', _1: '⊷'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&mumap;', _1: '⊸'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&multimap;', _1: '⊸'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&hercon;', _1: '⊹'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&intcal;', _1: '⊺'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&intercal;', _1: '⊺'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&veebar;', _1: '⊻'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&barvee;', _1: '⊽'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&angrtvb;', _1: '⊾'},
																																																																							_1: {ctor: '[]'}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															},
																															A2(
																																_elm_lang$core$Basics_ops['++'],
																																{
																																	ctor: '::',
																																	_0: {ctor: '_Tuple2', _0: '&lrtri;', _1: '⊿'},
																																	_1: {
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&xwedge;', _1: '⋀'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&Wedge;', _1: '⋀'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&bigwedge;', _1: '⋀'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&xvee;', _1: '⋁'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&Vee;', _1: '⋁'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&bigvee;', _1: '⋁'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&xcap;', _1: '⋂'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Intersection;', _1: '⋂'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&bigcap;', _1: '⋂'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&xcup;', _1: '⋃'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&Union;', _1: '⋃'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&bigcup;', _1: '⋃'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&diam;', _1: '⋄'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&diamond;', _1: '⋄'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&Diamond;', _1: '⋄'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&sdot;', _1: '⋅'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&sstarf;', _1: '⋆'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&Star;', _1: '⋆'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&divonx;', _1: '⋇'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&divideontimes;', _1: '⋇'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&bowtie;', _1: '⋈'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&ltimes;', _1: '⋉'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&rtimes;', _1: '⋊'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&lthree;', _1: '⋋'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&leftthreetimes;', _1: '⋋'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&rthree;', _1: '⋌'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&rightthreetimes;', _1: '⋌'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&bsime;', _1: '⋍'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&backsimeq;', _1: '⋍'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&cuvee;', _1: '⋎'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&curlyvee;', _1: '⋎'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&cuwed;', _1: '⋏'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&curlywedge;', _1: '⋏'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&Sub;', _1: '⋐'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&Subset;', _1: '⋐'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&Sup;', _1: '⋑'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&Supset;', _1: '⋑'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&Cap;', _1: '⋒'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&Cup;', _1: '⋓'},
																																																																								_1: {ctor: '[]'}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																},
																																A2(
																																	_elm_lang$core$Basics_ops['++'],
																																	{
																																		ctor: '::',
																																		_0: {ctor: '_Tuple2', _0: '&fork;', _1: '⋔'},
																																		_1: {
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&pitchfork;', _1: '⋔'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&epar;', _1: '⋕'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&ltdot;', _1: '⋖'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&lessdot;', _1: '⋖'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&gtdot;', _1: '⋗'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&gtrdot;', _1: '⋗'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&Ll;', _1: '⋘'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&Gg;', _1: '⋙'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&ggg;', _1: '⋙'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&leg;', _1: '⋚'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&LessEqualGreater;', _1: '⋚'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&lesseqgtr;', _1: '⋚'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&gel;', _1: '⋛'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&gtreqless;', _1: '⋛'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&GreaterEqualLess;', _1: '⋛'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&cuepr;', _1: '⋞'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&curlyeqprec;', _1: '⋞'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&cuesc;', _1: '⋟'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&curlyeqsucc;', _1: '⋟'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&nprcue;', _1: '⋠'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&NotPrecedesSlantEqual;', _1: '⋠'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&nsccue;', _1: '⋡'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&NotSucceedsSlantEqual;', _1: '⋡'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nsqsube;', _1: '⋢'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&NotSquareSubsetEqual;', _1: '⋢'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&nsqsupe;', _1: '⋣'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&NotSquareSupersetEqual;', _1: '⋣'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&lnsim;', _1: '⋦'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&gnsim;', _1: '⋧'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&prnsim;', _1: '⋨'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&precnsim;', _1: '⋨'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&scnsim;', _1: '⋩'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&succnsim;', _1: '⋩'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&nltri;', _1: '⋪'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&ntriangleleft;', _1: '⋪'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&NotLeftTriangle;', _1: '⋪'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&nrtri;', _1: '⋫'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&ntriangleright;', _1: '⋫'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&NotRightTriangle;', _1: '⋫'},
																																																																									_1: {ctor: '[]'}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	},
																																	A2(
																																		_elm_lang$core$Basics_ops['++'],
																																		{
																																			ctor: '::',
																																			_0: {ctor: '_Tuple2', _0: '&nltrie;', _1: '⋬'},
																																			_1: {
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&ntrianglelefteq;', _1: '⋬'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&NotLeftTriangleEqual;', _1: '⋬'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&nrtrie;', _1: '⋭'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&ntrianglerighteq;', _1: '⋭'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&NotRightTriangleEqual;', _1: '⋭'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&vellip;', _1: '⋮'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&ctdot;', _1: '⋯'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&utdot;', _1: '⋰'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&dtdot;', _1: '⋱'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&disin;', _1: '⋲'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&isinsv;', _1: '⋳'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&isins;', _1: '⋴'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&isindot;', _1: '⋵'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&notinvc;', _1: '⋶'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&notinvb;', _1: '⋷'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&isinE;', _1: '⋹'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&nisd;', _1: '⋺'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&xnis;', _1: '⋻'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&nis;', _1: '⋼'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&notnivc;', _1: '⋽'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&notnivb;', _1: '⋾'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&barwed;', _1: '⌅'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&barwedge;', _1: '⌅'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&Barwed;', _1: '⌆'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&doublebarwedge;', _1: '⌆'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&lceil;', _1: '⌈'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&LeftCeiling;', _1: '⌈'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&rceil;', _1: '⌉'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&RightCeiling;', _1: '⌉'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&lfloor;', _1: '⌊'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&LeftFloor;', _1: '⌊'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&rfloor;', _1: '⌋'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&RightFloor;', _1: '⌋'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&drcrop;', _1: '⌌'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&dlcrop;', _1: '⌍'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&urcrop;', _1: '⌎'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&ulcrop;', _1: '⌏'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&bnot;', _1: '⌐'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&profline;', _1: '⌒'},
																																																																										_1: {ctor: '[]'}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		},
																																		A2(
																																			_elm_lang$core$Basics_ops['++'],
																																			{
																																				ctor: '::',
																																				_0: {ctor: '_Tuple2', _0: '&profsurf;', _1: '⌓'},
																																				_1: {
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&telrec;', _1: '⌕'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&target;', _1: '⌖'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&ulcorn;', _1: '⌜'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&ulcorner;', _1: '⌜'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&urcorn;', _1: '⌝'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&urcorner;', _1: '⌝'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&dlcorn;', _1: '⌞'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&llcorner;', _1: '⌞'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&drcorn;', _1: '⌟'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&lrcorner;', _1: '⌟'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&frown;', _1: '⌢'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&sfrown;', _1: '⌢'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&smile;', _1: '⌣'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&ssmile;', _1: '⌣'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&cylcty;', _1: '⌭'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&profalar;', _1: '⌮'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&topbot;', _1: '⌶'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&ovbar;', _1: '⌽'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&solbar;', _1: '⌿'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&angzarr;', _1: '⍼'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&lmoust;', _1: '⎰'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&lmoustache;', _1: '⎰'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&rmoust;', _1: '⎱'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&rmoustache;', _1: '⎱'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&tbrk;', _1: '⎴'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&OverBracket;', _1: '⎴'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&bbrk;', _1: '⎵'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&UnderBracket;', _1: '⎵'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&bbrktbrk;', _1: '⎶'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&OverParenthesis;', _1: '⏜'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&UnderParenthesis;', _1: '⏝'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&OverBrace;', _1: '⏞'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&UnderBrace;', _1: '⏟'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&trpezium;', _1: '⏢'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&elinters;', _1: '⏧'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&blank;', _1: '␣'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&oS;', _1: 'Ⓢ'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&circledS;', _1: 'Ⓢ'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&boxh;', _1: '─'},
																																																																											_1: {ctor: '[]'}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			},
																																			A2(
																																				_elm_lang$core$Basics_ops['++'],
																																				{
																																					ctor: '::',
																																					_0: {ctor: '_Tuple2', _0: '&HorizontalLine;', _1: '─'},
																																					_1: {
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&boxv;', _1: '│'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&boxdr;', _1: '┌'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&boxdl;', _1: '┐'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&boxur;', _1: '└'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&boxul;', _1: '┘'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&boxvr;', _1: '├'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&boxvl;', _1: '┤'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&boxhd;', _1: '┬'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&boxhu;', _1: '┴'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&boxvh;', _1: '┼'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&boxH;', _1: '═'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&boxV;', _1: '║'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&boxdR;', _1: '╒'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&boxDr;', _1: '╓'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&boxDR;', _1: '╔'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&boxdL;', _1: '╕'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&boxDl;', _1: '╖'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&boxDL;', _1: '╗'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&boxuR;', _1: '╘'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&boxUr;', _1: '╙'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&boxUR;', _1: '╚'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&boxuL;', _1: '╛'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&boxUl;', _1: '╜'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&boxUL;', _1: '╝'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&boxvR;', _1: '╞'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&boxVr;', _1: '╟'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&boxVR;', _1: '╠'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&boxvL;', _1: '╡'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&boxVl;', _1: '╢'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&boxVL;', _1: '╣'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&boxHd;', _1: '╤'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&boxhD;', _1: '╥'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&boxHD;', _1: '╦'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&boxHu;', _1: '╧'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&boxhU;', _1: '╨'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&boxHU;', _1: '╩'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&boxvH;', _1: '╪'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&boxVh;', _1: '╫'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&boxVH;', _1: '╬'},
																																																																												_1: {ctor: '[]'}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				},
																																				A2(
																																					_elm_lang$core$Basics_ops['++'],
																																					{
																																						ctor: '::',
																																						_0: {ctor: '_Tuple2', _0: '&uhblk;', _1: '▀'},
																																						_1: {
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&lhblk;', _1: '▄'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&block;', _1: '█'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&blk14;', _1: '░'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&blk12;', _1: '▒'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&blk34;', _1: '▓'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&squ;', _1: '□'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&square;', _1: '□'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Square;', _1: '□'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&squf;', _1: '▪'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&squarf;', _1: '▪'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&blacksquare;', _1: '▪'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&FilledVerySmallSquare;', _1: '▪'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&EmptyVerySmallSquare;', _1: '▫'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&rect;', _1: '▭'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&marker;', _1: '▮'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&fltns;', _1: '▱'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&xutri;', _1: '△'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&bigtriangleup;', _1: '△'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&utrif;', _1: '▴'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&blacktriangle;', _1: '▴'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&utri;', _1: '▵'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&triangle;', _1: '▵'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&rtrif;', _1: '▸'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&blacktriangleright;', _1: '▸'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&rtri;', _1: '▹'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&triangleright;', _1: '▹'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&xdtri;', _1: '▽'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&bigtriangledown;', _1: '▽'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&dtrif;', _1: '▾'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&blacktriangledown;', _1: '▾'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&dtri;', _1: '▿'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&triangledown;', _1: '▿'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&ltrif;', _1: '◂'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&blacktriangleleft;', _1: '◂'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&ltri;', _1: '◃'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&triangleleft;', _1: '◃'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&loz;', _1: '◊'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&lozenge;', _1: '◊'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&cir;', _1: '○'},
																																																																													_1: {ctor: '[]'}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					},
																																					A2(
																																						_elm_lang$core$Basics_ops['++'],
																																						{
																																							ctor: '::',
																																							_0: {ctor: '_Tuple2', _0: '&tridot;', _1: '◬'},
																																							_1: {
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&xcirc;', _1: '◯'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&bigcirc;', _1: '◯'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&ultri;', _1: '◸'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&urtri;', _1: '◹'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&lltri;', _1: '◺'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&EmptySmallSquare;', _1: '◻'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&FilledSmallSquare;', _1: '◼'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&starf;', _1: '★'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&bigstar;', _1: '★'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&star;', _1: '☆'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&phone;', _1: '☎'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&female;', _1: '♀'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&male;', _1: '♂'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&spades;', _1: '♠'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&spadesuit;', _1: '♠'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&clubs;', _1: '♣'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&clubsuit;', _1: '♣'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&hearts;', _1: '♥'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&heartsuit;', _1: '♥'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&diams;', _1: '♦'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&diamondsuit;', _1: '♦'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&sung;', _1: '♪'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&flat;', _1: '♭'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&natur;', _1: '♮'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&natural;', _1: '♮'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&sharp;', _1: '♯'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&check;', _1: '✓'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&checkmark;', _1: '✓'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&cross;', _1: '✗'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&malt;', _1: '✠'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&maltese;', _1: '✠'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&sext;', _1: '✶'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&VerticalSeparator;', _1: '❘'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&lbbrk;', _1: '❲'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&rbbrk;', _1: '❳'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&lobrk;', _1: '⟦'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&LeftDoubleBracket;', _1: '⟦'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&robrk;', _1: '⟧'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&RightDoubleBracket;', _1: '⟧'},
																																																																														_1: {ctor: '[]'}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						},
																																						A2(
																																							_elm_lang$core$Basics_ops['++'],
																																							{
																																								ctor: '::',
																																								_0: {ctor: '_Tuple2', _0: '&lang;', _1: '⟨'},
																																								_1: {
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&LeftAngleBracket;', _1: '⟨'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&langle;', _1: '⟨'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&rang;', _1: '⟩'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&RightAngleBracket;', _1: '⟩'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&rangle;', _1: '⟩'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&Lang;', _1: '⟪'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Rang;', _1: '⟫'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&loang;', _1: '⟬'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&roang;', _1: '⟭'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&xlarr;', _1: '⟵'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&longleftarrow;', _1: '⟵'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&LongLeftArrow;', _1: '⟵'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&xrarr;', _1: '⟶'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&longrightarrow;', _1: '⟶'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&LongRightArrow;', _1: '⟶'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&xharr;', _1: '⟷'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&longleftrightarrow;', _1: '⟷'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&LongLeftRightArrow;', _1: '⟷'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&xlArr;', _1: '⟸'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&Longleftarrow;', _1: '⟸'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&DoubleLongLeftArrow;', _1: '⟸'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&xrArr;', _1: '⟹'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&Longrightarrow;', _1: '⟹'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&DoubleLongRightArrow;', _1: '⟹'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&xhArr;', _1: '⟺'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&Longleftrightarrow;', _1: '⟺'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&DoubleLongLeftRightArrow;', _1: '⟺'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&xmap;', _1: '⟼'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&longmapsto;', _1: '⟼'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&dzigrarr;', _1: '⟿'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&nvlArr;', _1: '⤂'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&nvrArr;', _1: '⤃'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&nvHarr;', _1: '⤄'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&Map;', _1: '⤅'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&lbarr;', _1: '⤌'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&rbarr;', _1: '⤍'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&bkarow;', _1: '⤍'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&lBarr;', _1: '⤎'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&rBarr;', _1: '⤏'},
																																																																															_1: {ctor: '[]'}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							},
																																							A2(
																																								_elm_lang$core$Basics_ops['++'],
																																								{
																																									ctor: '::',
																																									_0: {ctor: '_Tuple2', _0: '&dbkarow;', _1: '⤏'},
																																									_1: {
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&RBarr;', _1: '⤐'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&drbkarow;', _1: '⤐'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&DDotrahd;', _1: '⤑'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&UpArrowBar;', _1: '⤒'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&DownArrowBar;', _1: '⤓'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&Rarrtl;', _1: '⤖'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&latail;', _1: '⤙'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&ratail;', _1: '⤚'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&lAtail;', _1: '⤛'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&rAtail;', _1: '⤜'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&larrfs;', _1: '⤝'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&rarrfs;', _1: '⤞'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&larrbfs;', _1: '⤟'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&rarrbfs;', _1: '⤠'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&nwarhk;', _1: '⤣'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&nearhk;', _1: '⤤'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&searhk;', _1: '⤥'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&hksearow;', _1: '⤥'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&swarhk;', _1: '⤦'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&hkswarow;', _1: '⤦'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&nwnear;', _1: '⤧'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&nesear;', _1: '⤨'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&toea;', _1: '⤨'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&seswar;', _1: '⤩'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&tosa;', _1: '⤩'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&swnwar;', _1: '⤪'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&rarrc;', _1: '⤳'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&cudarrr;', _1: '⤵'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&ldca;', _1: '⤶'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&rdca;', _1: '⤷'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&cudarrl;', _1: '⤸'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&larrpl;', _1: '⤹'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&curarrm;', _1: '⤼'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&cularrp;', _1: '⤽'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&rarrpl;', _1: '⥅'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&harrcir;', _1: '⥈'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&Uarrocir;', _1: '⥉'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&lurdshar;', _1: '⥊'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&ldrushar;', _1: '⥋'},
																																																																																_1: {ctor: '[]'}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								},
																																								A2(
																																									_elm_lang$core$Basics_ops['++'],
																																									{
																																										ctor: '::',
																																										_0: {ctor: '_Tuple2', _0: '&LeftRightVector;', _1: '⥎'},
																																										_1: {
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&RightUpDownVector;', _1: '⥏'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&DownLeftRightVector;', _1: '⥐'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&LeftUpDownVector;', _1: '⥑'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&LeftVectorBar;', _1: '⥒'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&RightVectorBar;', _1: '⥓'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&RightUpVectorBar;', _1: '⥔'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&RightDownVectorBar;', _1: '⥕'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&DownLeftVectorBar;', _1: '⥖'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&DownRightVectorBar;', _1: '⥗'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&LeftUpVectorBar;', _1: '⥘'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&LeftDownVectorBar;', _1: '⥙'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&LeftTeeVector;', _1: '⥚'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&RightTeeVector;', _1: '⥛'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&RightUpTeeVector;', _1: '⥜'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&RightDownTeeVector;', _1: '⥝'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&DownLeftTeeVector;', _1: '⥞'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&DownRightTeeVector;', _1: '⥟'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&LeftUpTeeVector;', _1: '⥠'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&LeftDownTeeVector;', _1: '⥡'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&lHar;', _1: '⥢'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&uHar;', _1: '⥣'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&rHar;', _1: '⥤'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&dHar;', _1: '⥥'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&luruhar;', _1: '⥦'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&ldrdhar;', _1: '⥧'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&ruluhar;', _1: '⥨'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&rdldhar;', _1: '⥩'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&lharul;', _1: '⥪'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&llhard;', _1: '⥫'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&rharul;', _1: '⥬'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&lrhard;', _1: '⥭'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&udhar;', _1: '⥮'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&UpEquilibrium;', _1: '⥮'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&duhar;', _1: '⥯'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&ReverseUpEquilibrium;', _1: '⥯'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&RoundImplies;', _1: '⥰'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&erarr;', _1: '⥱'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&simrarr;', _1: '⥲'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&larrsim;', _1: '⥳'},
																																																																																	_1: {ctor: '[]'}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									},
																																									A2(
																																										_elm_lang$core$Basics_ops['++'],
																																										{
																																											ctor: '::',
																																											_0: {ctor: '_Tuple2', _0: '&rarrsim;', _1: '⥴'},
																																											_1: {
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&rarrap;', _1: '⥵'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&ltlarr;', _1: '⥶'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&gtrarr;', _1: '⥸'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&subrarr;', _1: '⥹'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&suplarr;', _1: '⥻'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&lfisht;', _1: '⥼'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&rfisht;', _1: '⥽'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&ufisht;', _1: '⥾'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&dfisht;', _1: '⥿'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&lopar;', _1: '⦅'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&ropar;', _1: '⦆'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&lbrke;', _1: '⦋'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&rbrke;', _1: '⦌'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&lbrkslu;', _1: '⦍'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&rbrksld;', _1: '⦎'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&lbrksld;', _1: '⦏'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&rbrkslu;', _1: '⦐'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&langd;', _1: '⦑'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&rangd;', _1: '⦒'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&lparlt;', _1: '⦓'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&rpargt;', _1: '⦔'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&gtlPar;', _1: '⦕'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&ltrPar;', _1: '⦖'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&vzigzag;', _1: '⦚'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&vangrt;', _1: '⦜'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&angrtvbd;', _1: '⦝'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&ange;', _1: '⦤'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&range;', _1: '⦥'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&dwangle;', _1: '⦦'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&uwangle;', _1: '⦧'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&angmsdaa;', _1: '⦨'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&angmsdab;', _1: '⦩'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&angmsdac;', _1: '⦪'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&angmsdad;', _1: '⦫'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&angmsdae;', _1: '⦬'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&angmsdaf;', _1: '⦭'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&angmsdag;', _1: '⦮'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&angmsdah;', _1: '⦯'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&bemptyv;', _1: '⦰'},
																																																																																		_1: {ctor: '[]'}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										},
																																										A2(
																																											_elm_lang$core$Basics_ops['++'],
																																											{
																																												ctor: '::',
																																												_0: {ctor: '_Tuple2', _0: '&demptyv;', _1: '⦱'},
																																												_1: {
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&cemptyv;', _1: '⦲'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&raemptyv;', _1: '⦳'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&laemptyv;', _1: '⦴'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&ohbar;', _1: '⦵'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&omid;', _1: '⦶'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&opar;', _1: '⦷'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&operp;', _1: '⦹'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&olcross;', _1: '⦻'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&odsold;', _1: '⦼'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&olcir;', _1: '⦾'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&ofcir;', _1: '⦿'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&olt;', _1: '⧀'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&ogt;', _1: '⧁'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&cirscir;', _1: '⧂'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&cirE;', _1: '⧃'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&solb;', _1: '⧄'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&bsolb;', _1: '⧅'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&boxbox;', _1: '⧉'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&trisb;', _1: '⧍'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&rtriltri;', _1: '⧎'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&LeftTriangleBar;', _1: '⧏'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&RightTriangleBar;', _1: '⧐'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&race;', _1: '⧚'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&iinfin;', _1: '⧜'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&infintie;', _1: '⧝'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&nvinfin;', _1: '⧞'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&eparsl;', _1: '⧣'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&smeparsl;', _1: '⧤'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&eqvparsl;', _1: '⧥'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&lozf;', _1: '⧫'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&blacklozenge;', _1: '⧫'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&RuleDelayed;', _1: '⧴'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&dsol;', _1: '⧶'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&xodot;', _1: '⨀'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&bigodot;', _1: '⨀'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&xoplus;', _1: '⨁'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&bigoplus;', _1: '⨁'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&xotime;', _1: '⨂'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&bigotimes;', _1: '⨂'},
																																																																																			_1: {ctor: '[]'}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											},
																																											A2(
																																												_elm_lang$core$Basics_ops['++'],
																																												{
																																													ctor: '::',
																																													_0: {ctor: '_Tuple2', _0: '&xuplus;', _1: '⨄'},
																																													_1: {
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&biguplus;', _1: '⨄'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&xsqcup;', _1: '⨆'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&bigsqcup;', _1: '⨆'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&qint;', _1: '⨌'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&iiiint;', _1: '⨌'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&fpartint;', _1: '⨍'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&cirfnint;', _1: '⨐'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&awint;', _1: '⨑'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&rppolint;', _1: '⨒'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&scpolint;', _1: '⨓'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&npolint;', _1: '⨔'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&pointint;', _1: '⨕'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&quatint;', _1: '⨖'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&intlarhk;', _1: '⨗'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&pluscir;', _1: '⨢'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&plusacir;', _1: '⨣'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&simplus;', _1: '⨤'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&plusdu;', _1: '⨥'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&plussim;', _1: '⨦'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&plustwo;', _1: '⨧'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&mcomma;', _1: '⨩'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&minusdu;', _1: '⨪'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&loplus;', _1: '⨭'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&roplus;', _1: '⨮'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&Cross;', _1: '⨯'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&timesd;', _1: '⨰'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&timesbar;', _1: '⨱'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&smashp;', _1: '⨳'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&lotimes;', _1: '⨴'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&rotimes;', _1: '⨵'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&otimesas;', _1: '⨶'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&Otimes;', _1: '⨷'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&odiv;', _1: '⨸'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&triplus;', _1: '⨹'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&triminus;', _1: '⨺'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&tritime;', _1: '⨻'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&iprod;', _1: '⨼'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&intprod;', _1: '⨼'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&amalg;', _1: '⨿'},
																																																																																				_1: {ctor: '[]'}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												},
																																												A2(
																																													_elm_lang$core$Basics_ops['++'],
																																													{
																																														ctor: '::',
																																														_0: {ctor: '_Tuple2', _0: '&capdot;', _1: '⩀'},
																																														_1: {
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&ncup;', _1: '⩂'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&ncap;', _1: '⩃'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&capand;', _1: '⩄'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&cupor;', _1: '⩅'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&cupcap;', _1: '⩆'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&capcup;', _1: '⩇'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&cupbrcap;', _1: '⩈'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&capbrcup;', _1: '⩉'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&cupcup;', _1: '⩊'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&capcap;', _1: '⩋'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&ccups;', _1: '⩌'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&ccaps;', _1: '⩍'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&ccupssm;', _1: '⩐'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&And;', _1: '⩓'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&Or;', _1: '⩔'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&andand;', _1: '⩕'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&oror;', _1: '⩖'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&orslope;', _1: '⩗'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&andslope;', _1: '⩘'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&andv;', _1: '⩚'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&orv;', _1: '⩛'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&andd;', _1: '⩜'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&ord;', _1: '⩝'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&wedbar;', _1: '⩟'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&sdote;', _1: '⩦'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&simdot;', _1: '⩪'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&congdot;', _1: '⩭'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&easter;', _1: '⩮'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&apacir;', _1: '⩯'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&apE;', _1: '⩰'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&eplus;', _1: '⩱'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&pluse;', _1: '⩲'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&Esim;', _1: '⩳'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&Colone;', _1: '⩴'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&Equal;', _1: '⩵'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&eDDot;', _1: '⩷'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&ddotseq;', _1: '⩷'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&equivDD;', _1: '⩸'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&ltcir;', _1: '⩹'},
																																																																																					_1: {ctor: '[]'}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													},
																																													A2(
																																														_elm_lang$core$Basics_ops['++'],
																																														{
																																															ctor: '::',
																																															_0: {ctor: '_Tuple2', _0: '&gtcir;', _1: '⩺'},
																																															_1: {
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&ltquest;', _1: '⩻'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&gtquest;', _1: '⩼'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&les;', _1: '⩽'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&LessSlantEqual;', _1: '⩽'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&leqslant;', _1: '⩽'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&ges;', _1: '⩾'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&GreaterSlantEqual;', _1: '⩾'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&geqslant;', _1: '⩾'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&lesdot;', _1: '⩿'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&gesdot;', _1: '⪀'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&lesdoto;', _1: '⪁'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&gesdoto;', _1: '⪂'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&lesdotor;', _1: '⪃'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&gesdotol;', _1: '⪄'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&lap;', _1: '⪅'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&lessapprox;', _1: '⪅'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&gap;', _1: '⪆'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&gtrapprox;', _1: '⪆'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&lne;', _1: '⪇'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&lneq;', _1: '⪇'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&gne;', _1: '⪈'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&gneq;', _1: '⪈'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&lnap;', _1: '⪉'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&lnapprox;', _1: '⪉'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&gnap;', _1: '⪊'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&gnapprox;', _1: '⪊'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&lEg;', _1: '⪋'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&lesseqqgtr;', _1: '⪋'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&gEl;', _1: '⪌'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&gtreqqless;', _1: '⪌'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&lsime;', _1: '⪍'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&gsime;', _1: '⪎'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&lsimg;', _1: '⪏'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&gsiml;', _1: '⪐'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&lgE;', _1: '⪑'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&glE;', _1: '⪒'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&lesges;', _1: '⪓'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&gesles;', _1: '⪔'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&els;', _1: '⪕'},
																																																																																						_1: {ctor: '[]'}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														},
																																														A2(
																																															_elm_lang$core$Basics_ops['++'],
																																															{
																																																ctor: '::',
																																																_0: {ctor: '_Tuple2', _0: '&eqslantless;', _1: '⪕'},
																																																_1: {
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&egs;', _1: '⪖'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&eqslantgtr;', _1: '⪖'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&elsdot;', _1: '⪗'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&egsdot;', _1: '⪘'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&el;', _1: '⪙'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&eg;', _1: '⪚'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&siml;', _1: '⪝'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&simg;', _1: '⪞'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&simlE;', _1: '⪟'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&simgE;', _1: '⪠'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&LessLess;', _1: '⪡'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&GreaterGreater;', _1: '⪢'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&glj;', _1: '⪤'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&gla;', _1: '⪥'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&ltcc;', _1: '⪦'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&gtcc;', _1: '⪧'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&lescc;', _1: '⪨'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&gescc;', _1: '⪩'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&smt;', _1: '⪪'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&lat;', _1: '⪫'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&smte;', _1: '⪬'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&late;', _1: '⪭'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&bumpE;', _1: '⪮'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&pre;', _1: '⪯'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&preceq;', _1: '⪯'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&PrecedesEqual;', _1: '⪯'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&sce;', _1: '⪰'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&succeq;', _1: '⪰'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&SucceedsEqual;', _1: '⪰'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&prE;', _1: '⪳'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&scE;', _1: '⪴'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&prnE;', _1: '⪵'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&precneqq;', _1: '⪵'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&scnE;', _1: '⪶'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&succneqq;', _1: '⪶'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&prap;', _1: '⪷'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&precapprox;', _1: '⪷'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&scap;', _1: '⪸'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&succapprox;', _1: '⪸'},
																																																																																							_1: {ctor: '[]'}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															},
																																															A2(
																																																_elm_lang$core$Basics_ops['++'],
																																																{
																																																	ctor: '::',
																																																	_0: {ctor: '_Tuple2', _0: '&prnap;', _1: '⪹'},
																																																	_1: {
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&precnapprox;', _1: '⪹'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&scnap;', _1: '⪺'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&succnapprox;', _1: '⪺'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Pr;', _1: '⪻'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Sc;', _1: '⪼'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&subdot;', _1: '⪽'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&supdot;', _1: '⪾'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&subplus;', _1: '⪿'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&supplus;', _1: '⫀'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&submult;', _1: '⫁'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&supmult;', _1: '⫂'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&subedot;', _1: '⫃'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&supedot;', _1: '⫄'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&subE;', _1: '⫅'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&subseteqq;', _1: '⫅'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&supE;', _1: '⫆'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&supseteqq;', _1: '⫆'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&subsim;', _1: '⫇'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&supsim;', _1: '⫈'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&subnE;', _1: '⫋'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&subsetneqq;', _1: '⫋'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&supnE;', _1: '⫌'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&supsetneqq;', _1: '⫌'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&csub;', _1: '⫏'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&csup;', _1: '⫐'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&csube;', _1: '⫑'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&csupe;', _1: '⫒'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&subsup;', _1: '⫓'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&supsub;', _1: '⫔'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&subsub;', _1: '⫕'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&supsup;', _1: '⫖'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&suphsub;', _1: '⫗'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&supdsub;', _1: '⫘'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&forkv;', _1: '⫙'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&topfork;', _1: '⫚'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&mlcp;', _1: '⫛'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&Dashv;', _1: '⫤'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&DoubleLeftTee;', _1: '⫤'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: '&Vdashl;', _1: '⫦'},
																																																																																								_1: {ctor: '[]'}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																},
																																																A2(
																																																	_elm_lang$core$Basics_ops['++'],
																																																	{
																																																		ctor: '::',
																																																		_0: {ctor: '_Tuple2', _0: '&Barv;', _1: '⫧'},
																																																		_1: {
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&vBar;', _1: '⫨'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&vBarv;', _1: '⫩'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Vbar;', _1: '⫫'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Not;', _1: '⫬'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&bNot;', _1: '⫭'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&rnmid;', _1: '⫮'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&cirmid;', _1: '⫯'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&midcir;', _1: '⫰'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&topcir;', _1: '⫱'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&nhpar;', _1: '⫲'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&parsim;', _1: '⫳'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&parsl;', _1: '⫽'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&fflig;', _1: 'ﬀ'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&filig;', _1: 'ﬁ'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&fllig;', _1: 'ﬂ'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&ffilig;', _1: 'ﬃ'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&ffllig;', _1: 'ﬄ'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&Ascr;', _1: '𝒜'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&Cscr;', _1: '𝒞'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&Dscr;', _1: '𝒟'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&Gscr;', _1: '𝒢'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&Jscr;', _1: '𝒥'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&Kscr;', _1: '𝒦'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&Nscr;', _1: '𝒩'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&Oscr;', _1: '𝒪'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&Pscr;', _1: '𝒫'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&Qscr;', _1: '𝒬'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&Sscr;', _1: '𝒮'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&Tscr;', _1: '𝒯'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&Uscr;', _1: '𝒰'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&Vscr;', _1: '𝒱'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&Wscr;', _1: '𝒲'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&Xscr;', _1: '𝒳'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&Yscr;', _1: '𝒴'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&Zscr;', _1: '𝒵'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&ascr;', _1: '𝒶'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&bscr;', _1: '𝒷'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: '&cscr;', _1: '𝒸'},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: '&dscr;', _1: '𝒹'},
																																																																																									_1: {ctor: '[]'}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	},
																																																	A2(
																																																		_elm_lang$core$Basics_ops['++'],
																																																		{
																																																			ctor: '::',
																																																			_0: {ctor: '_Tuple2', _0: '&fscr;', _1: '𝒻'},
																																																			_1: {
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&hscr;', _1: '𝒽'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&iscr;', _1: '𝒾'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&jscr;', _1: '𝒿'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&kscr;', _1: '𝓀'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&lscr;', _1: '𝓁'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&mscr;', _1: '𝓂'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&nscr;', _1: '𝓃'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&pscr;', _1: '𝓅'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&qscr;', _1: '𝓆'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&rscr;', _1: '𝓇'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&sscr;', _1: '𝓈'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&tscr;', _1: '𝓉'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&uscr;', _1: '𝓊'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&vscr;', _1: '𝓋'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&wscr;', _1: '𝓌'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&xscr;', _1: '𝓍'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&yscr;', _1: '𝓎'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&zscr;', _1: '𝓏'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&Afr;', _1: '𝔄'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&Bfr;', _1: '𝔅'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&Dfr;', _1: '𝔇'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&Efr;', _1: '𝔈'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&Ffr;', _1: '𝔉'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&Gfr;', _1: '𝔊'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&Jfr;', _1: '𝔍'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&Kfr;', _1: '𝔎'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&Lfr;', _1: '𝔏'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&Mfr;', _1: '𝔐'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&Nfr;', _1: '𝔑'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&Ofr;', _1: '𝔒'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&Pfr;', _1: '𝔓'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&Qfr;', _1: '𝔔'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&Sfr;', _1: '𝔖'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&Tfr;', _1: '𝔗'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&Ufr;', _1: '𝔘'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&Vfr;', _1: '𝔙'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: '&Wfr;', _1: '𝔚'},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: '&Xfr;', _1: '𝔛'},
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: {ctor: '_Tuple2', _0: '&Yfr;', _1: '𝔜'},
																																																																																										_1: {ctor: '[]'}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		},
																																																		A2(
																																																			_elm_lang$core$Basics_ops['++'],
																																																			{
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&afr;', _1: '𝔞'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&bfr;', _1: '𝔟'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&cfr;', _1: '𝔠'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&dfr;', _1: '𝔡'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&efr;', _1: '𝔢'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&ffr;', _1: '𝔣'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&gfr;', _1: '𝔤'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&hfr;', _1: '𝔥'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&ifr;', _1: '𝔦'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&jfr;', _1: '𝔧'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&kfr;', _1: '𝔨'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&lfr;', _1: '𝔩'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&mfr;', _1: '𝔪'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&nfr;', _1: '𝔫'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&ofr;', _1: '𝔬'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&pfr;', _1: '𝔭'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&qfr;', _1: '𝔮'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&rfr;', _1: '𝔯'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&sfr;', _1: '𝔰'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&tfr;', _1: '𝔱'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&ufr;', _1: '𝔲'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&vfr;', _1: '𝔳'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&wfr;', _1: '𝔴'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&xfr;', _1: '𝔵'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&yfr;', _1: '𝔶'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&zfr;', _1: '𝔷'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&Aopf;', _1: '𝔸'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&Bopf;', _1: '𝔹'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&Dopf;', _1: '𝔻'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&Eopf;', _1: '𝔼'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&Fopf;', _1: '𝔽'},
																																																																																		_1: {
																																																																																			ctor: '::',
																																																																																			_0: {ctor: '_Tuple2', _0: '&Gopf;', _1: '𝔾'},
																																																																																			_1: {
																																																																																				ctor: '::',
																																																																																				_0: {ctor: '_Tuple2', _0: '&Iopf;', _1: '𝕀'},
																																																																																				_1: {
																																																																																					ctor: '::',
																																																																																					_0: {ctor: '_Tuple2', _0: '&Jopf;', _1: '𝕁'},
																																																																																					_1: {
																																																																																						ctor: '::',
																																																																																						_0: {ctor: '_Tuple2', _0: '&Kopf;', _1: '𝕂'},
																																																																																						_1: {
																																																																																							ctor: '::',
																																																																																							_0: {ctor: '_Tuple2', _0: '&Lopf;', _1: '𝕃'},
																																																																																							_1: {
																																																																																								ctor: '::',
																																																																																								_0: {ctor: '_Tuple2', _0: '&Mopf;', _1: '𝕄'},
																																																																																								_1: {
																																																																																									ctor: '::',
																																																																																									_0: {ctor: '_Tuple2', _0: '&Oopf;', _1: '𝕆'},
																																																																																									_1: {
																																																																																										ctor: '::',
																																																																																										_0: {ctor: '_Tuple2', _0: '&Sopf;', _1: '𝕊'},
																																																																																										_1: {
																																																																																											ctor: '::',
																																																																																											_0: {ctor: '_Tuple2', _0: '&Topf;', _1: '𝕋'},
																																																																																											_1: {ctor: '[]'}
																																																																																										}
																																																																																									}
																																																																																								}
																																																																																							}
																																																																																						}
																																																																																					}
																																																																																				}
																																																																																			}
																																																																																		}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			},
																																																			{
																																																				ctor: '::',
																																																				_0: {ctor: '_Tuple2', _0: '&Uopf;', _1: '𝕌'},
																																																				_1: {
																																																					ctor: '::',
																																																					_0: {ctor: '_Tuple2', _0: '&Vopf;', _1: '𝕍'},
																																																					_1: {
																																																						ctor: '::',
																																																						_0: {ctor: '_Tuple2', _0: '&Wopf;', _1: '𝕎'},
																																																						_1: {
																																																							ctor: '::',
																																																							_0: {ctor: '_Tuple2', _0: '&Xopf;', _1: '𝕏'},
																																																							_1: {
																																																								ctor: '::',
																																																								_0: {ctor: '_Tuple2', _0: '&Yopf;', _1: '𝕐'},
																																																								_1: {
																																																									ctor: '::',
																																																									_0: {ctor: '_Tuple2', _0: '&aopf;', _1: '𝕒'},
																																																									_1: {
																																																										ctor: '::',
																																																										_0: {ctor: '_Tuple2', _0: '&bopf;', _1: '𝕓'},
																																																										_1: {
																																																											ctor: '::',
																																																											_0: {ctor: '_Tuple2', _0: '&copf;', _1: '𝕔'},
																																																											_1: {
																																																												ctor: '::',
																																																												_0: {ctor: '_Tuple2', _0: '&dopf;', _1: '𝕕'},
																																																												_1: {
																																																													ctor: '::',
																																																													_0: {ctor: '_Tuple2', _0: '&eopf;', _1: '𝕖'},
																																																													_1: {
																																																														ctor: '::',
																																																														_0: {ctor: '_Tuple2', _0: '&fopf;', _1: '𝕗'},
																																																														_1: {
																																																															ctor: '::',
																																																															_0: {ctor: '_Tuple2', _0: '&gopf;', _1: '𝕘'},
																																																															_1: {
																																																																ctor: '::',
																																																																_0: {ctor: '_Tuple2', _0: '&hopf;', _1: '𝕙'},
																																																																_1: {
																																																																	ctor: '::',
																																																																	_0: {ctor: '_Tuple2', _0: '&iopf;', _1: '𝕚'},
																																																																	_1: {
																																																																		ctor: '::',
																																																																		_0: {ctor: '_Tuple2', _0: '&jopf;', _1: '𝕛'},
																																																																		_1: {
																																																																			ctor: '::',
																																																																			_0: {ctor: '_Tuple2', _0: '&kopf;', _1: '𝕜'},
																																																																			_1: {
																																																																				ctor: '::',
																																																																				_0: {ctor: '_Tuple2', _0: '&lopf;', _1: '𝕝'},
																																																																				_1: {
																																																																					ctor: '::',
																																																																					_0: {ctor: '_Tuple2', _0: '&mopf;', _1: '𝕞'},
																																																																					_1: {
																																																																						ctor: '::',
																																																																						_0: {ctor: '_Tuple2', _0: '&nopf;', _1: '𝕟'},
																																																																						_1: {
																																																																							ctor: '::',
																																																																							_0: {ctor: '_Tuple2', _0: '&oopf;', _1: '𝕠'},
																																																																							_1: {
																																																																								ctor: '::',
																																																																								_0: {ctor: '_Tuple2', _0: '&popf;', _1: '𝕡'},
																																																																								_1: {
																																																																									ctor: '::',
																																																																									_0: {ctor: '_Tuple2', _0: '&qopf;', _1: '𝕢'},
																																																																									_1: {
																																																																										ctor: '::',
																																																																										_0: {ctor: '_Tuple2', _0: '&ropf;', _1: '𝕣'},
																																																																										_1: {
																																																																											ctor: '::',
																																																																											_0: {ctor: '_Tuple2', _0: '&sopf;', _1: '𝕤'},
																																																																											_1: {
																																																																												ctor: '::',
																																																																												_0: {ctor: '_Tuple2', _0: '&topf;', _1: '𝕥'},
																																																																												_1: {
																																																																													ctor: '::',
																																																																													_0: {ctor: '_Tuple2', _0: '&uopf;', _1: '𝕦'},
																																																																													_1: {
																																																																														ctor: '::',
																																																																														_0: {ctor: '_Tuple2', _0: '&vopf;', _1: '𝕧'},
																																																																														_1: {
																																																																															ctor: '::',
																																																																															_0: {ctor: '_Tuple2', _0: '&wopf;', _1: '𝕨'},
																																																																															_1: {
																																																																																ctor: '::',
																																																																																_0: {ctor: '_Tuple2', _0: '&xopf;', _1: '𝕩'},
																																																																																_1: {
																																																																																	ctor: '::',
																																																																																	_0: {ctor: '_Tuple2', _0: '&yopf;', _1: '𝕪'},
																																																																																	_1: {
																																																																																		ctor: '::',
																																																																																		_0: {ctor: '_Tuple2', _0: '&zopf;', _1: '𝕫'},
																																																																																		_1: {ctor: '[]'}
																																																																																	}
																																																																																}
																																																																															}
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			})))))))))))))))))))))))))))))))))))))))))))))))))));

var _rtfeldman$hex$Hex$toString = function (num) {
	return _elm_lang$core$String$fromList(
		(_elm_lang$core$Native_Utils.cmp(num, 0) < 0) ? {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('-'),
			_1: A2(
				_rtfeldman$hex$Hex$unsafePositiveToDigits,
				{ctor: '[]'},
				_elm_lang$core$Basics$negate(num))
		} : A2(
			_rtfeldman$hex$Hex$unsafePositiveToDigits,
			{ctor: '[]'},
			num));
};
var _rtfeldman$hex$Hex$unsafePositiveToDigits = F2(
	function (digits, num) {
		unsafePositiveToDigits:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(num, 16) < 0) {
				return {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(num),
					_1: digits
				};
			} else {
				var _v0 = {
					ctor: '::',
					_0: _rtfeldman$hex$Hex$unsafeToDigit(
						A2(_elm_lang$core$Basics_ops['%'], num, 16)),
					_1: digits
				},
					_v1 = (num / 16) | 0;
				digits = _v0;
				num = _v1;
				continue unsafePositiveToDigits;
			}
		}
	});
var _rtfeldman$hex$Hex$unsafeToDigit = function (num) {
	var _p0 = num;
	switch (_p0) {
		case 0:
			return _elm_lang$core$Native_Utils.chr('0');
		case 1:
			return _elm_lang$core$Native_Utils.chr('1');
		case 2:
			return _elm_lang$core$Native_Utils.chr('2');
		case 3:
			return _elm_lang$core$Native_Utils.chr('3');
		case 4:
			return _elm_lang$core$Native_Utils.chr('4');
		case 5:
			return _elm_lang$core$Native_Utils.chr('5');
		case 6:
			return _elm_lang$core$Native_Utils.chr('6');
		case 7:
			return _elm_lang$core$Native_Utils.chr('7');
		case 8:
			return _elm_lang$core$Native_Utils.chr('8');
		case 9:
			return _elm_lang$core$Native_Utils.chr('9');
		case 10:
			return _elm_lang$core$Native_Utils.chr('a');
		case 11:
			return _elm_lang$core$Native_Utils.chr('b');
		case 12:
			return _elm_lang$core$Native_Utils.chr('c');
		case 13:
			return _elm_lang$core$Native_Utils.chr('d');
		case 14:
			return _elm_lang$core$Native_Utils.chr('e');
		case 15:
			return _elm_lang$core$Native_Utils.chr('f');
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Hex',
				{
					start: {line: 138, column: 5},
					end: {line: 188, column: 84}
				},
				_p0)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Tried to convert ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_rtfeldman$hex$Hex$toString(num),
						' to hexadecimal.')));
	}
};
var _rtfeldman$hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		var _p2 = chars;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Result$Ok(accumulated);
		} else {
			var recurse = function (additional) {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					position - 1,
					_p2._1,
					accumulated + (additional * Math.pow(16, position)));
			};
			var _p3 = _p2._0;
			switch (_p3.valueOf()) {
				case '0':
					return recurse(0);
				case '1':
					return recurse(1);
				case '2':
					return recurse(2);
				case '3':
					return recurse(3);
				case '4':
					return recurse(4);
				case '5':
					return recurse(5);
				case '6':
					return recurse(6);
				case '7':
					return recurse(7);
				case '8':
					return recurse(8);
				case '9':
					return recurse(9);
				case 'a':
					return recurse(10);
				case 'b':
					return recurse(11);
				case 'c':
					return recurse(12);
				case 'd':
					return recurse(13);
				case 'e':
					return recurse(14);
				case 'f':
					return recurse(15);
				default:
					return _elm_lang$core$Result$Err(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p3),
							' is not a valid hexadecimal character.'));
			}
		}
	});
var _rtfeldman$hex$Hex$fromString = function (str) {
	if (_elm_lang$core$String$isEmpty(str)) {
		return _elm_lang$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var formatError = function (err) {
			return A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: _elm_lang$core$Basics$toString(str),
					_1: {
						ctor: '::',
						_0: 'is not a valid hexadecimal string because',
						_1: {
							ctor: '::',
							_0: err,
							_1: {ctor: '[]'}
						}
					}
				});
		};
		var result = function () {
			if (A2(_elm_lang$core$String$startsWith, '-', str)) {
				var list = A2(
					_elm_lang$core$Maybe$withDefault,
					{ctor: '[]'},
					_elm_lang$core$List$tail(
						_elm_lang$core$String$toList(str)));
				return A2(
					_elm_lang$core$Result$map,
					_elm_lang$core$Basics$negate,
					A3(
						_rtfeldman$hex$Hex$fromStringHelp,
						_elm_lang$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					_rtfeldman$hex$Hex$fromStringHelp,
					_elm_lang$core$String$length(str) - 1,
					_elm_lang$core$String$toList(str),
					0);
			}
		}();
		return A2(_elm_lang$core$Result$mapError, formatError, result);
	}
};

var _jinjor$elm_html_parser$HtmlParser$attributeValueEntityString = function (quote) {
	return _Bogdanp$elm_combine$Combine$regex(
		A2(
			_elm_lang$core$Basics_ops['++'],
			'[^<&',
			A2(_elm_lang$core$Basics_ops['++'], quote, ']*')));
};
var _jinjor$elm_html_parser$HtmlParser$textNodeNonEntityString = _Bogdanp$elm_combine$Combine$regex('[^<&]*');
var _jinjor$elm_html_parser$HtmlParser$entityStringDec = A2(
	_Bogdanp$elm_combine$Combine_ops['<$>'],
	function (num) {
		return A2(
			_elm_lang$core$Result$withDefault,
			num,
			A2(
				_elm_lang$core$Result$map,
				function (_p0) {
					return _elm_lang$core$String$fromList(
						_elm_lang$core$List$singleton(
							_elm_lang$core$Char$fromCode(_p0)));
				},
				_elm_lang$core$String$toInt(
					A2(
						_elm_lang$core$String$dropRight,
						1,
						A2(_elm_lang$core$String$dropLeft, 2, num)))));
	},
	_Bogdanp$elm_combine$Combine$regex('&#[1-9]*[0-9]+;'));
var _jinjor$elm_html_parser$HtmlParser$entityStringHex = A2(
	_Bogdanp$elm_combine$Combine_ops['<$>'],
	function (num) {
		return A2(
			_elm_lang$core$Result$withDefault,
			num,
			A2(
				_elm_lang$core$Result$map,
				function (_p1) {
					return _elm_lang$core$String$fromList(
						_elm_lang$core$List$singleton(
							_elm_lang$core$Char$fromCode(_p1)));
				},
				_rtfeldman$hex$Hex$fromString(
					_elm_lang$core$String$toLower(
						A2(
							_elm_lang$core$String$dropRight,
							1,
							A2(_elm_lang$core$String$dropLeft, 3, num))))));
	},
	_Bogdanp$elm_combine$Combine$regex('&#x[0-9A-F]+;'));
var _jinjor$elm_html_parser$HtmlParser$entityString = A2(
	_Bogdanp$elm_combine$Combine_ops['<$>'],
	function (code) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			code,
			A2(_elm_lang$core$Dict$get, code, _jinjor$elm_html_parser$Escape$dict));
	},
	_Bogdanp$elm_combine$Combine$regex('&[0-9a-zA-Z]+;'));
var _jinjor$elm_html_parser$HtmlParser$attributeString = function (quote) {
	return A2(
		_Bogdanp$elm_combine$Combine_ops['<$>'],
		function (list) {
			return A2(_elm_lang$core$String$join, '', list);
		},
		_Bogdanp$elm_combine$Combine$many(
			A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				_jinjor$elm_html_parser$HtmlParser$entityString,
				A2(
					_Bogdanp$elm_combine$Combine_ops['<|>'],
					_jinjor$elm_html_parser$HtmlParser$entityStringHex,
					A2(
						_Bogdanp$elm_combine$Combine_ops['<|>'],
						_jinjor$elm_html_parser$HtmlParser$entityStringDec,
						A2(
							_Bogdanp$elm_combine$Combine_ops['<|>'],
							_Bogdanp$elm_combine$Combine$string('&'),
							_jinjor$elm_html_parser$HtmlParser$attributeValueEntityString(quote)))))));
};
var _jinjor$elm_html_parser$HtmlParser$textNodeString = A2(
	_Bogdanp$elm_combine$Combine_ops['<$>'],
	function (list) {
		return A2(_elm_lang$core$String$join, '', list);
	},
	_Bogdanp$elm_combine$Combine$many(
		A2(
			_Bogdanp$elm_combine$Combine_ops['<|>'],
			_jinjor$elm_html_parser$HtmlParser$entityString,
			A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				_jinjor$elm_html_parser$HtmlParser$entityStringHex,
				A2(
					_Bogdanp$elm_combine$Combine_ops['<|>'],
					_jinjor$elm_html_parser$HtmlParser$entityStringDec,
					A2(
						_Bogdanp$elm_combine$Combine_ops['<|>'],
						_Bogdanp$elm_combine$Combine$string('&'),
						_jinjor$elm_html_parser$HtmlParser$textNodeNonEntityString))))));
var _jinjor$elm_html_parser$HtmlParser$ngSetForP = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'address',
		_1: {
			ctor: '::',
			_0: 'article',
			_1: {
				ctor: '::',
				_0: 'aside',
				_1: {
					ctor: '::',
					_0: 'blockquote',
					_1: {
						ctor: '::',
						_0: 'details',
						_1: {
							ctor: '::',
							_0: 'div',
							_1: {
								ctor: '::',
								_0: 'dl',
								_1: {
									ctor: '::',
									_0: 'fieldset',
									_1: {
										ctor: '::',
										_0: 'figcaption',
										_1: {
											ctor: '::',
											_0: 'figure',
											_1: {
												ctor: '::',
												_0: 'footer',
												_1: {
													ctor: '::',
													_0: 'form',
													_1: {
														ctor: '::',
														_0: 'h1',
														_1: {
															ctor: '::',
															_0: 'h2',
															_1: {
																ctor: '::',
																_0: 'h3',
																_1: {
																	ctor: '::',
																	_0: 'h4',
																	_1: {
																		ctor: '::',
																		_0: 'h5',
																		_1: {
																			ctor: '::',
																			_0: 'h6',
																			_1: {
																				ctor: '::',
																				_0: 'header',
																				_1: {
																					ctor: '::',
																					_0: 'hgroup',
																					_1: {
																						ctor: '::',
																						_0: 'hr',
																						_1: {
																							ctor: '::',
																							_0: 'main',
																							_1: {
																								ctor: '::',
																								_0: 'menu',
																								_1: {
																									ctor: '::',
																									_0: 'nav',
																									_1: {
																										ctor: '::',
																										_0: 'ol',
																										_1: {
																											ctor: '::',
																											_0: 'p',
																											_1: {
																												ctor: '::',
																												_0: 'pre',
																												_1: {
																													ctor: '::',
																													_0: 'section',
																													_1: {
																														ctor: '::',
																														_0: 'table',
																														_1: {
																															ctor: '::',
																															_0: 'ul',
																															_1: {ctor: '[]'}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _jinjor$elm_html_parser$HtmlParser$isInvalidNest = F2(
	function (tagName, childTagName) {
		return (_elm_lang$core$Native_Utils.eq(tagName, 'head') && _elm_lang$core$Native_Utils.eq(childTagName, 'body')) || ((_elm_lang$core$Native_Utils.eq(tagName, 'li') && _elm_lang$core$Native_Utils.eq(childTagName, 'li')) || ((_elm_lang$core$Native_Utils.eq(tagName, 'dt') && (_elm_lang$core$Native_Utils.eq(childTagName, 'dt') || _elm_lang$core$Native_Utils.eq(childTagName, 'dd'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'dd') && (_elm_lang$core$Native_Utils.eq(childTagName, 'dt') || _elm_lang$core$Native_Utils.eq(childTagName, 'dd'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'p') && A2(_elm_lang$core$Set$member, childTagName, _jinjor$elm_html_parser$HtmlParser$ngSetForP)) || ((_elm_lang$core$Native_Utils.eq(tagName, 'rt') && (_elm_lang$core$Native_Utils.eq(childTagName, 'rt') || _elm_lang$core$Native_Utils.eq(childTagName, 'rp'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'rp') && (_elm_lang$core$Native_Utils.eq(childTagName, 'rt') || _elm_lang$core$Native_Utils.eq(childTagName, 'rp'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'optgroup') && _elm_lang$core$Native_Utils.eq(childTagName, 'optgroup')) || ((_elm_lang$core$Native_Utils.eq(tagName, 'option') && (_elm_lang$core$Native_Utils.eq(childTagName, 'option') || _elm_lang$core$Native_Utils.eq(childTagName, 'optgroup'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'colgroup') && (!_elm_lang$core$Native_Utils.eq(childTagName, 'col'))) || (_elm_lang$core$Native_Utils.eq(tagName, 'caption') || ((_elm_lang$core$Native_Utils.eq(tagName, 'thead') && (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || _elm_lang$core$Native_Utils.eq(childTagName, 'tfoot'))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'tbody') && (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tfoot') || _elm_lang$core$Native_Utils.eq(childTagName, 'table')))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'tfoot') && _elm_lang$core$Native_Utils.eq(childTagName, 'table')) || ((_elm_lang$core$Native_Utils.eq(tagName, 'tr') && (_elm_lang$core$Native_Utils.eq(childTagName, 'tr') || (_elm_lang$core$Native_Utils.eq(childTagName, 'thead') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || _elm_lang$core$Native_Utils.eq(childTagName, 'tfoot'))))) || ((_elm_lang$core$Native_Utils.eq(tagName, 'td') && (_elm_lang$core$Native_Utils.eq(childTagName, 'td') || (_elm_lang$core$Native_Utils.eq(childTagName, 'th') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tr') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || _elm_lang$core$Native_Utils.eq(childTagName, 'tfoot')))))) || (_elm_lang$core$Native_Utils.eq(tagName, 'th') && (_elm_lang$core$Native_Utils.eq(childTagName, 'td') || (_elm_lang$core$Native_Utils.eq(childTagName, 'th') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tr') || (_elm_lang$core$Native_Utils.eq(childTagName, 'tbody') || _elm_lang$core$Native_Utils.eq(childTagName, 'tfoot')))))))))))))))))))));
	});
var _jinjor$elm_html_parser$HtmlParser$optionalEndTag = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'li',
		_1: {
			ctor: '::',
			_0: 'dt',
			_1: {
				ctor: '::',
				_0: 'dd',
				_1: {
					ctor: '::',
					_0: 'p',
					_1: {
						ctor: '::',
						_0: 'rt',
						_1: {
							ctor: '::',
							_0: 'rp',
							_1: {
								ctor: '::',
								_0: 'optgroup',
								_1: {
									ctor: '::',
									_0: 'option',
									_1: {
										ctor: '::',
										_0: 'colgroup',
										_1: {
											ctor: '::',
											_0: 'caption',
											_1: {
												ctor: '::',
												_0: 'thead',
												_1: {
													ctor: '::',
													_0: 'tbody',
													_1: {
														ctor: '::',
														_0: 'tfoot',
														_1: {
															ctor: '::',
															_0: 'tr',
															_1: {
																ctor: '::',
																_0: 'td',
																_1: {
																	ctor: '::',
																	_0: 'th',
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _jinjor$elm_html_parser$HtmlParser$startTagOnly = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'br',
		_1: {
			ctor: '::',
			_0: 'img',
			_1: {
				ctor: '::',
				_0: 'hr',
				_1: {
					ctor: '::',
					_0: 'meta',
					_1: {
						ctor: '::',
						_0: 'input',
						_1: {
							ctor: '::',
							_0: 'embed',
							_1: {
								ctor: '::',
								_0: 'area',
								_1: {
									ctor: '::',
									_0: 'base',
									_1: {
										ctor: '::',
										_0: 'col',
										_1: {
											ctor: '::',
											_0: 'keygen',
											_1: {
												ctor: '::',
												_0: 'link',
												_1: {
													ctor: '::',
													_0: 'param',
													_1: {
														ctor: '::',
														_0: 'source',
														_1: {
															ctor: '::',
															_0: 'command',
															_1: {
																ctor: '::',
																_0: 'link',
																_1: {
																	ctor: '::',
																	_0: 'track',
																	_1: {
																		ctor: '::',
																		_0: 'wbr',
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _jinjor$elm_html_parser$HtmlParser$attributeBareValue = _Bogdanp$elm_combine$Combine$regex('[^ `\"\'<>=\n\r\t]+');
var _jinjor$elm_html_parser$HtmlParser$attributeQuotedValue = A2(
	_Bogdanp$elm_combine$Combine_ops['<|>'],
	A3(
		_Bogdanp$elm_combine$Combine$between,
		_Bogdanp$elm_combine$Combine$string('\"'),
		_Bogdanp$elm_combine$Combine$string('\"'),
		_jinjor$elm_html_parser$HtmlParser$attributeString('\"')),
	A3(
		_Bogdanp$elm_combine$Combine$between,
		_Bogdanp$elm_combine$Combine$string('\''),
		_Bogdanp$elm_combine$Combine$string('\''),
		_jinjor$elm_html_parser$HtmlParser$attributeString('\'')));
var _jinjor$elm_html_parser$HtmlParser$attributeValue = A2(_Bogdanp$elm_combine$Combine_ops['<|>'], _jinjor$elm_html_parser$HtmlParser$attributeQuotedValue, _jinjor$elm_html_parser$HtmlParser$attributeBareValue);
var _jinjor$elm_html_parser$HtmlParser$attributeName = A2(
	_Bogdanp$elm_combine$Combine$map,
	_elm_lang$core$String$toLower,
	_Bogdanp$elm_combine$Combine$regex('[a-zA-Z][a-zA-Z0-9:\\-]*'));
var _jinjor$elm_html_parser$HtmlParser$tagName = A2(
	_Bogdanp$elm_combine$Combine$map,
	_elm_lang$core$String$toLower,
	_Bogdanp$elm_combine$Combine$regex('[a-zA-Z][a-zA-Z0-9\\-]*'));
var _jinjor$elm_html_parser$HtmlParser$spaces1 = _Bogdanp$elm_combine$Combine$regex('[ \t\r\n]+');
var _jinjor$elm_html_parser$HtmlParser$spaces = _Bogdanp$elm_combine$Combine$regex('[ \t\r\n]*');
var _jinjor$elm_html_parser$HtmlParser$spaced = function (p) {
	return A3(_Bogdanp$elm_combine$Combine$between, _jinjor$elm_html_parser$HtmlParser$spaces, _jinjor$elm_html_parser$HtmlParser$spaces, p);
};
var _jinjor$elm_html_parser$HtmlParser$attributeNameValuePair = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<$>'],
			F3(
				function (name, _p2, value) {
					return {ctor: '_Tuple2', _0: name, _1: value};
				}),
			_jinjor$elm_html_parser$HtmlParser$attributeName),
		A3(
			_Bogdanp$elm_combine$Combine$between,
			_jinjor$elm_html_parser$HtmlParser$spaces,
			_jinjor$elm_html_parser$HtmlParser$spaces,
			_Bogdanp$elm_combine$Combine$string('='))),
	_jinjor$elm_html_parser$HtmlParser$attributeValue);
var _jinjor$elm_html_parser$HtmlParser$attribute = A2(
	_Bogdanp$elm_combine$Combine_ops['<|>'],
	_jinjor$elm_html_parser$HtmlParser$attributeNameValuePair,
	A2(
		_Bogdanp$elm_combine$Combine$map,
		A2(
			_elm_lang$core$Basics$flip,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			''),
		_jinjor$elm_html_parser$HtmlParser$attributeName));
var _jinjor$elm_html_parser$HtmlParser$startTag = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<*>'],
			A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				F4(
					function (_p4, tagName, attrs, _p3) {
						return {ctor: '_Tuple2', _0: tagName, _1: attrs};
					}),
				_Bogdanp$elm_combine$Combine$string('<')),
			_jinjor$elm_html_parser$HtmlParser$tagName),
		A3(
			_Bogdanp$elm_combine$Combine$between,
			_jinjor$elm_html_parser$HtmlParser$spaces,
			_jinjor$elm_html_parser$HtmlParser$spaces,
			A2(_Bogdanp$elm_combine$Combine$sepBy, _jinjor$elm_html_parser$HtmlParser$spaces, _jinjor$elm_html_parser$HtmlParser$attribute))),
	_Bogdanp$elm_combine$Combine$string('>'));
var _jinjor$elm_html_parser$HtmlParser$generalEndTag = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<*>'],
		A2(
			_Bogdanp$elm_combine$Combine_ops['<*>'],
			A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				F4(
					function (_p7, tagName, _p6, _p5) {
						return tagName;
					}),
				_Bogdanp$elm_combine$Combine$string('</')),
			_jinjor$elm_html_parser$HtmlParser$tagName),
		_jinjor$elm_html_parser$HtmlParser$spaces),
	_Bogdanp$elm_combine$Combine$string('>'));
var _jinjor$elm_html_parser$HtmlParser$endTag = function (tagName) {
	return A2(
		_Bogdanp$elm_combine$Combine$andThen,
		function (endTagName) {
			return _elm_lang$core$Native_Utils.eq(tagName, endTagName) ? _Bogdanp$elm_combine$Combine$succeed(
				{ctor: '_Tuple0'}) : _Bogdanp$elm_combine$Combine$fail('');
		},
		_jinjor$elm_html_parser$HtmlParser$generalEndTag);
};
var _jinjor$elm_html_parser$HtmlParser$singleTag = _Bogdanp$elm_combine$Combine$lazy(
	function (_p8) {
		return A2(
			_Bogdanp$elm_combine$Combine_ops['<*>'],
			A2(
				_Bogdanp$elm_combine$Combine_ops['<*>'],
				A2(
					_Bogdanp$elm_combine$Combine_ops['<*>'],
					A2(
						_Bogdanp$elm_combine$Combine_ops['<$>'],
						F4(
							function (_p10, tagName, attrs, _p9) {
								return {ctor: '_Tuple2', _0: tagName, _1: attrs};
							}),
						_Bogdanp$elm_combine$Combine$string('<')),
					_jinjor$elm_html_parser$HtmlParser$tagName),
				A3(
					_Bogdanp$elm_combine$Combine$between,
					_jinjor$elm_html_parser$HtmlParser$spaces,
					_jinjor$elm_html_parser$HtmlParser$spaces,
					A2(_Bogdanp$elm_combine$Combine$sepBy, _jinjor$elm_html_parser$HtmlParser$spaces, _jinjor$elm_html_parser$HtmlParser$attribute))),
			_Bogdanp$elm_combine$Combine$string('/>'));
	});
var _jinjor$elm_html_parser$HtmlParser$Comment = function (a) {
	return {ctor: 'Comment', _0: a};
};
var _jinjor$elm_html_parser$HtmlParser$untilCommentEnd = A2(
	_Bogdanp$elm_combine$Combine$map,
	_jinjor$elm_html_parser$HtmlParser$Comment,
	A2(
		_Bogdanp$elm_combine$Combine$map,
		_elm_lang$core$String$fromList,
		A2(
			_Bogdanp$elm_combine$Combine$manyTill,
			_Bogdanp$elm_combine$Combine_Char$anyChar,
			_Bogdanp$elm_combine$Combine$string('-->'))));
var _jinjor$elm_html_parser$HtmlParser$commentNode = A2(
	_Bogdanp$elm_combine$Combine_ops['*>'],
	_Bogdanp$elm_combine$Combine$string('<!--'),
	_jinjor$elm_html_parser$HtmlParser$untilCommentEnd);
var _jinjor$elm_html_parser$HtmlParser$Element = F3(
	function (a, b, c) {
		return {ctor: 'Element', _0: a, _1: b, _2: c};
	});
var _jinjor$elm_html_parser$HtmlParser$doctypeNode = A2(
	_Bogdanp$elm_combine$Combine$map,
	function (_p11) {
		return A3(
			_jinjor$elm_html_parser$HtmlParser$Element,
			'!DOCTYPE',
			{ctor: '[]'},
			{ctor: '[]'});
	},
	_Bogdanp$elm_combine$Combine$regex('<!DOCTYPE [^>]*>'));
var _jinjor$elm_html_parser$HtmlParser$singleNode = A2(
	_Bogdanp$elm_combine$Combine$map,
	function (_p12) {
		var _p13 = _p12;
		return A3(
			_jinjor$elm_html_parser$HtmlParser$Element,
			_p13._0,
			_p13._1,
			{ctor: '[]'});
	},
	_jinjor$elm_html_parser$HtmlParser$singleTag);
var _jinjor$elm_html_parser$HtmlParser$Text = function (a) {
	return {ctor: 'Text', _0: a};
};
var _jinjor$elm_html_parser$HtmlParser$textNode = A2(_Bogdanp$elm_combine$Combine$map, _jinjor$elm_html_parser$HtmlParser$Text, _jinjor$elm_html_parser$HtmlParser$textNodeString);
var _jinjor$elm_html_parser$HtmlParser$untilScriptEnd = function (tagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p14) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<$>'],
				function (_p15) {
					var _p16 = _p15;
					var _p18 = _p16._0;
					var _p17 = _p16._1;
					return _elm_lang$core$Native_Utils.eq(_p18, '') ? _p17 : {
						ctor: '::',
						_0: _jinjor$elm_html_parser$HtmlParser$Text(_p18),
						_1: _p17
					};
				},
				_jinjor$elm_html_parser$HtmlParser$untilScriptEndHelp(tagName));
		});
};
var _jinjor$elm_html_parser$HtmlParser$untilScriptEndHelp = function (tagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p19) {
			return A2(
				_Bogdanp$elm_combine$Combine$andThen,
				function (s) {
					return A2(
						_Bogdanp$elm_combine$Combine_ops['<|>'],
						A2(
							_Bogdanp$elm_combine$Combine_ops['<*>'],
							A2(
								_Bogdanp$elm_combine$Combine_ops['<*>'],
								A2(
									_Bogdanp$elm_combine$Combine_ops['<$>'],
									F3(
										function (_p20, comment, rest) {
											return {
												ctor: '_Tuple2',
												_0: s,
												_1: {ctor: '::', _0: comment, _1: rest}
											};
										}),
									_Bogdanp$elm_combine$Combine$string('<!--')),
								_jinjor$elm_html_parser$HtmlParser$untilCommentEnd),
							_jinjor$elm_html_parser$HtmlParser$untilScriptEnd(tagName)),
						A2(
							_Bogdanp$elm_combine$Combine_ops['<|>'],
							A2(
								_Bogdanp$elm_combine$Combine_ops['<$>'],
								function (_p21) {
									return {
										ctor: '_Tuple2',
										_0: s,
										_1: {ctor: '[]'}
									};
								},
								_jinjor$elm_html_parser$HtmlParser$endTag(tagName)),
							A2(
								_Bogdanp$elm_combine$Combine_ops['<*>'],
								A2(
									_Bogdanp$elm_combine$Combine_ops['<$>'],
									F2(
										function (lt, _p22) {
											var _p23 = _p22;
											return {
												ctor: '_Tuple2',
												_0: A2(
													_elm_lang$core$Basics_ops['++'],
													s,
													A2(_elm_lang$core$Basics_ops['++'], lt, _p23._0)),
												_1: _p23._1
											};
										}),
									_Bogdanp$elm_combine$Combine$string('<')),
								_jinjor$elm_html_parser$HtmlParser$untilScriptEndHelp(tagName))));
				},
				_Bogdanp$elm_combine$Combine$regex('[^<]*'));
		});
};
var _jinjor$elm_html_parser$HtmlParser$normalNode = function (parentTagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p24) {
			return A2(
				_Bogdanp$elm_combine$Combine$andThen,
				function (_p25) {
					var _p26 = _p25;
					var _p28 = _p26._0;
					var _p27 = _p26._1;
					return (_elm_lang$core$Native_Utils.eq(_p28, 'script') || _elm_lang$core$Native_Utils.eq(_p28, 'style')) ? A2(
						_Bogdanp$elm_combine$Combine_ops['<$>'],
						function (children) {
							return A3(_jinjor$elm_html_parser$HtmlParser$Element, _p28, _p27, children);
						},
						_jinjor$elm_html_parser$HtmlParser$untilScriptEnd(_p28)) : (A2(_jinjor$elm_html_parser$HtmlParser$isInvalidNest, parentTagName, _p28) ? _Bogdanp$elm_combine$Combine$fail('') : (A2(_elm_lang$core$Set$member, _p28, _jinjor$elm_html_parser$HtmlParser$startTagOnly) ? _Bogdanp$elm_combine$Combine$succeed(
						A3(
							_jinjor$elm_html_parser$HtmlParser$Element,
							_p28,
							_p27,
							{ctor: '[]'})) : A2(
						_Bogdanp$elm_combine$Combine_ops['<$>'],
						function (children) {
							return A3(_jinjor$elm_html_parser$HtmlParser$Element, _p28, _p27, children);
						},
						_jinjor$elm_html_parser$HtmlParser$untilEndTag(_p28))));
				},
				_jinjor$elm_html_parser$HtmlParser$startTag);
		});
};
var _jinjor$elm_html_parser$HtmlParser$untilEndTag = function (tagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p29) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<*>'],
				A2(
					_Bogdanp$elm_combine$Combine_ops['<$>'],
					F2(
						function (children1, children2) {
							return A2(_elm_lang$core$Basics_ops['++'], children1, children2);
						}),
					_Bogdanp$elm_combine$Combine$many(
						_jinjor$elm_html_parser$HtmlParser$node(tagName))),
				A2(
					_Bogdanp$elm_combine$Combine$optional,
					{ctor: '[]'},
					A2(
						_Bogdanp$elm_combine$Combine$andThen,
						function (endTagName) {
							return _elm_lang$core$Native_Utils.eq(tagName, endTagName) ? _Bogdanp$elm_combine$Combine$succeed(
								{ctor: '[]'}) : _jinjor$elm_html_parser$HtmlParser$untilEndTag(tagName);
						},
						_jinjor$elm_html_parser$HtmlParser$generalEndTag)));
		});
};
var _jinjor$elm_html_parser$HtmlParser$node = function (parentTagName) {
	return _Bogdanp$elm_combine$Combine$lazy(
		function (_p30) {
			return A2(
				_Bogdanp$elm_combine$Combine_ops['<|>'],
				_jinjor$elm_html_parser$HtmlParser$doctypeNode,
				A2(
					_Bogdanp$elm_combine$Combine_ops['<|>'],
					_jinjor$elm_html_parser$HtmlParser$singleNode,
					A2(
						_Bogdanp$elm_combine$Combine_ops['<|>'],
						_jinjor$elm_html_parser$HtmlParser$normalNode(parentTagName),
						A2(_Bogdanp$elm_combine$Combine_ops['<|>'], _jinjor$elm_html_parser$HtmlParser$commentNode, _jinjor$elm_html_parser$HtmlParser$textNode))));
		});
};
var _jinjor$elm_html_parser$HtmlParser$nodesAndEnd = A2(
	_Bogdanp$elm_combine$Combine_ops['<*>'],
	A2(
		_Bogdanp$elm_combine$Combine_ops['<$>'],
		F2(
			function (nodes, _p31) {
				return nodes;
			}),
		_jinjor$elm_html_parser$HtmlParser$untilEndTag('')),
	_Bogdanp$elm_combine$Combine$end);
var _jinjor$elm_html_parser$HtmlParser$parse = function (s) {
	var _p32 = A2(_Bogdanp$elm_combine$Combine$parse, _jinjor$elm_html_parser$HtmlParser$nodesAndEnd, s);
	if (_p32.ctor === 'Ok') {
		return _p32._0._2;
	} else {
		return {ctor: '[]'};
	}
};

var _jinjor$elm_html_parser$HtmlParser_Util$toSvgAttribute = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1._1;
	var _p2 = _p1._0;
	return A2(_elm_lang$core$String$startsWith, 'xlink:', _p2) ? A3(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/1999/xlink', _p2, _p3) : (A2(_elm_lang$core$String$startsWith, 'xml:', _p2) ? A3(_elm_lang$virtual_dom$VirtualDom$attributeNS, 'http://www.w3.org/XML/1998/namespace', _p2, _p3) : A2(_elm_lang$virtual_dom$VirtualDom$attribute, _p2, _p3));
};
var _jinjor$elm_html_parser$HtmlParser_Util$toVirtualDomSvg = function (nodes) {
	return A2(_elm_lang$core$List$map, _jinjor$elm_html_parser$HtmlParser_Util$toVirtualDomSvgEach, nodes);
};
var _jinjor$elm_html_parser$HtmlParser_Util$toVirtualDomSvgEach = function (node) {
	var _p4 = node;
	switch (_p4.ctor) {
		case 'Element':
			return A3(
				_elm_lang$svg$Svg$node,
				_p4._0,
				A2(_elm_lang$core$List$map, _jinjor$elm_html_parser$HtmlParser_Util$toSvgAttribute, _p4._1),
				_jinjor$elm_html_parser$HtmlParser_Util$toVirtualDomSvg(_p4._2));
		case 'Text':
			return _elm_lang$html$Html$text(_p4._0);
		default:
			return _elm_lang$html$Html$text('');
	}
};
var _jinjor$elm_html_parser$HtmlParser_Util$toAttribute = function (_p5) {
	var _p6 = _p5;
	return A2(_elm_lang$html$Html_Attributes$attribute, _p6._0, _p6._1);
};
var _jinjor$elm_html_parser$HtmlParser_Util$toVirtualDom = function (nodes) {
	return A2(_elm_lang$core$List$map, _jinjor$elm_html_parser$HtmlParser_Util$toVirtualDomEach, nodes);
};
var _jinjor$elm_html_parser$HtmlParser_Util$toVirtualDomEach = function (node) {
	var _p7 = node;
	switch (_p7.ctor) {
		case 'Element':
			var _p8 = _p7._0;
			return _elm_lang$core$Native_Utils.eq(_p8, 'svg') ? _jinjor$elm_html_parser$HtmlParser_Util$toVirtualDomSvgEach(node) : A3(
				_elm_lang$html$Html$node,
				_p8,
				A2(_elm_lang$core$List$map, _jinjor$elm_html_parser$HtmlParser_Util$toAttribute, _p7._1),
				_jinjor$elm_html_parser$HtmlParser_Util$toVirtualDom(_p7._2));
		case 'Text':
			return _elm_lang$html$Html$text(_p7._0);
		default:
			return _elm_lang$html$Html$text('');
	}
};
var _jinjor$elm_html_parser$HtmlParser_Util$textContent = function (nodes) {
	return A2(
		_elm_lang$core$String$join,
		'',
		A2(_elm_lang$core$List$map, _jinjor$elm_html_parser$HtmlParser_Util$textContentEach, nodes));
};
var _jinjor$elm_html_parser$HtmlParser_Util$textContentEach = function (node) {
	var _p9 = node;
	switch (_p9.ctor) {
		case 'Element':
			return _jinjor$elm_html_parser$HtmlParser_Util$textContent(_p9._2);
		case 'Text':
			return _p9._0;
		default:
			return '';
	}
};
var _jinjor$elm_html_parser$HtmlParser_Util$getValue = F2(
	function (targetName, attrs) {
		getValue:
		while (true) {
			var _p10 = attrs;
			if (_p10.ctor === '[]') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_elm_lang$core$Native_Utils.eq(_p10._0._0, targetName)) {
					return _elm_lang$core$Maybe$Just(_p10._0._1);
				} else {
					var _v6 = targetName,
						_v7 = _p10._1;
					targetName = _v6;
					attrs = _v7;
					continue getValue;
				}
			}
		}
	});
var _jinjor$elm_html_parser$HtmlParser_Util$getId = function (attrs) {
	return A2(_jinjor$elm_html_parser$HtmlParser_Util$getValue, 'id', attrs);
};
var _jinjor$elm_html_parser$HtmlParser_Util$getClassList = function (attrs) {
	var _p11 = A2(_jinjor$elm_html_parser$HtmlParser_Util$getValue, 'class', attrs);
	if (_p11.ctor === 'Nothing') {
		return {ctor: '[]'};
	} else {
		return _elm_lang$core$String$words(_p11._0);
	}
};
var _jinjor$elm_html_parser$HtmlParser_Util$filterMapElements = F2(
	function (f, nodes) {
		return A2(
			_elm_lang$core$List$filterMap,
			function (node) {
				var _p12 = node;
				if (_p12.ctor === 'Element') {
					return A3(f, _p12._0, _p12._1, _p12._2);
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			},
			nodes);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$filterElements = F2(
	function (f, nodes) {
		return A2(
			_elm_lang$core$List$filter,
			function (node) {
				var _p13 = node;
				if (_p13.ctor === 'Element') {
					return A3(f, _p13._0, _p13._1, _p13._2);
				} else {
					return false;
				}
			},
			nodes);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$mapElements = F2(
	function (f, nodes) {
		return A2(
			_elm_lang$core$List$filterMap,
			function (node) {
				var _p14 = node;
				if (_p14.ctor === 'Element') {
					return _elm_lang$core$Maybe$Just(
						A3(f, _p14._0, _p14._1, _p14._2));
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			},
			nodes);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$foldlWithBreak = F3(
	function (f, b, list) {
		foldlWithBreak:
		while (true) {
			var _p15 = list;
			if (_p15.ctor === '[]') {
				return b;
			} else {
				var _p16 = A2(f, _p15._0, b);
				if (_p16._1 === true) {
					return _p16._0;
				} else {
					var _v14 = f,
						_v15 = _p16._0,
						_v16 = _p15._1;
					f = _v14;
					b = _v15;
					list = _v16;
					continue foldlWithBreak;
				}
			}
		}
	});
var _jinjor$elm_html_parser$HtmlParser_Util$findElements = F2(
	function (match, nodes) {
		var f = F2(
			function (node, results) {
				var _p17 = node;
				if (_p17.ctor === 'Element') {
					var _p18 = _p17._2;
					return A2(match, _p17._0, _p17._1) ? A2(
						_elm_lang$core$Basics_ops['++'],
						results,
						{
							ctor: '::',
							_0: node,
							_1: A2(_jinjor$elm_html_parser$HtmlParser_Util$findElements, match, _p18)
						}) : A2(
						_elm_lang$core$Basics_ops['++'],
						results,
						A2(_jinjor$elm_html_parser$HtmlParser_Util$findElements, match, _p18));
				} else {
					return results;
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			f,
			{ctor: '[]'},
			nodes);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$findElement = F2(
	function (match, nodes) {
		var f = F2(
			function (node, _p19) {
				var _p20 = node;
				if (_p20.ctor === 'Element') {
					if (A2(match, _p20._0, _p20._1)) {
						return {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: node,
								_1: {ctor: '[]'}
							},
							_1: true
						};
					} else {
						var _p21 = A2(_jinjor$elm_html_parser$HtmlParser_Util$findElement, match, _p20._2);
						if (_p21.ctor === '[]') {
							return {
								ctor: '_Tuple2',
								_0: {ctor: '[]'},
								_1: false
							};
						} else {
							return {ctor: '_Tuple2', _0: _p21, _1: true};
						}
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: false
					};
				}
			});
		return A3(
			_jinjor$elm_html_parser$HtmlParser_Util$foldlWithBreak,
			f,
			{ctor: '[]'},
			nodes);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$updateListDict = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			function (v) {
				var _p22 = v;
				if (_p22.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(
						{ctor: '::', _0: value, _1: _p22._0});
				} else {
					return _elm_lang$core$Maybe$Just(
						{
							ctor: '::',
							_0: value,
							_1: {ctor: '[]'}
						});
				}
			},
			dict);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$mergeListDict = F2(
	function (d1, d2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k2, v2, d1) {
					return A3(
						_elm_lang$core$Dict$update,
						k2,
						function (v1) {
							var _p23 = v1;
							if (_p23.ctor === 'Just') {
								return _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], _p23._0, v2));
							} else {
								return _elm_lang$core$Maybe$Just(v2);
							}
						},
						d1);
				}),
			d1,
			d2);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$updateClassDict = F3(
	function (node, $class, dict) {
		return A3(_jinjor$elm_html_parser$HtmlParser_Util$updateListDict, $class, node, dict);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$updateTagDict = F3(
	function (node, tagName, dict) {
		return A3(_jinjor$elm_html_parser$HtmlParser_Util$updateListDict, tagName, node, dict);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$updateIdDict = F3(
	function (node, id, dict) {
		return A3(_jinjor$elm_html_parser$HtmlParser_Util$updateListDict, id, node, dict);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$createClassDict = function (nodes) {
	var f = F2(
		function (node, dict) {
			var _p24 = node;
			if (_p24.ctor === 'Element') {
				return A3(
					_elm_lang$core$List$foldl,
					_jinjor$elm_html_parser$HtmlParser_Util$updateClassDict(node),
					A2(
						_jinjor$elm_html_parser$HtmlParser_Util$mergeListDict,
						_jinjor$elm_html_parser$HtmlParser_Util$createClassDict(_p24._2),
						dict),
					_jinjor$elm_html_parser$HtmlParser_Util$getClassList(_p24._1));
			} else {
				return dict;
			}
		});
	return A3(_elm_lang$core$List$foldr, f, _elm_lang$core$Dict$empty, nodes);
};
var _jinjor$elm_html_parser$HtmlParser_Util$createTagDict = function (nodes) {
	var f = F2(
		function (node, dict) {
			var _p25 = node;
			if (_p25.ctor === 'Element') {
				return A3(
					_jinjor$elm_html_parser$HtmlParser_Util$updateTagDict,
					node,
					_p25._0,
					A2(
						_jinjor$elm_html_parser$HtmlParser_Util$mergeListDict,
						_jinjor$elm_html_parser$HtmlParser_Util$createTagDict(_p25._2),
						dict));
			} else {
				return dict;
			}
		});
	return A3(_elm_lang$core$List$foldr, f, _elm_lang$core$Dict$empty, nodes);
};
var _jinjor$elm_html_parser$HtmlParser_Util$createIdDict = function (nodes) {
	var f = F2(
		function (node, dict) {
			var _p26 = node;
			if (_p26.ctor === 'Element') {
				return function () {
					var _p27 = A2(_jinjor$elm_html_parser$HtmlParser_Util$getValue, 'id', _p26._1);
					if (_p27.ctor === 'Just') {
						return A2(_jinjor$elm_html_parser$HtmlParser_Util$updateIdDict, node, _p27._0);
					} else {
						return _elm_lang$core$Basics$identity;
					}
				}()(
					A2(
						_jinjor$elm_html_parser$HtmlParser_Util$mergeListDict,
						_jinjor$elm_html_parser$HtmlParser_Util$createIdDict(_p26._2),
						dict));
			} else {
				return dict;
			}
		});
	return A3(_elm_lang$core$List$foldl, f, _elm_lang$core$Dict$empty, nodes);
};
var _jinjor$elm_html_parser$HtmlParser_Util$matchesToClass = F2(
	function (targetClassNames, attrs) {
		return A2(
			_elm_lang$core$List$all,
			A2(
				_elm_lang$core$Basics$flip,
				_elm_lang$core$List$member,
				_jinjor$elm_html_parser$HtmlParser_Util$getClassList(attrs)),
			targetClassNames);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$matchesToId = F2(
	function (targetId, attrs) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_jinjor$elm_html_parser$HtmlParser_Util$getValue, 'id', attrs),
			_elm_lang$core$Maybe$Just(targetId));
	});
var _jinjor$elm_html_parser$HtmlParser_Util$getElementsByClassName = F2(
	function (targetClassNames, nodes) {
		return A2(
			_jinjor$elm_html_parser$HtmlParser_Util$findElements,
			F2(
				function (_p28, attrs) {
					return A2(_jinjor$elm_html_parser$HtmlParser_Util$matchesToClass, targetClassNames, attrs);
				}),
			nodes);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$getElementsByTagName = F2(
	function (tagName, nodes) {
		var targetTagName = _elm_lang$core$String$toLower(tagName);
		var match = F2(
			function (tagName, _p29) {
				return _elm_lang$core$Native_Utils.eq(tagName, targetTagName);
			});
		return A2(_jinjor$elm_html_parser$HtmlParser_Util$findElements, match, nodes);
	});
var _jinjor$elm_html_parser$HtmlParser_Util$getElementById = F2(
	function (targetId, nodes) {
		return A2(
			_jinjor$elm_html_parser$HtmlParser_Util$findElement,
			F2(
				function (_p30, attrs) {
					return A2(_jinjor$elm_html_parser$HtmlParser_Util$matchesToId, targetId, attrs);
				}),
			nodes);
	});

var _elam03$elam03_github_io$NewsApi$newNewsData = _elm_lang$core$Native_Platform.incomingPort('newNewsData', _elm_lang$core$Json_Decode$value);
var _elam03$elam03_github_io$NewsApi$NewsData = F7(
	function (a, b, c, d, e, f, g) {
		return {author: a, title: b, description: c, url: d, urlToImage: e, publishedAt: f, channel: g};
	});

var _elam03$elam03_github_io$RandomQuotes$decodeSatoriNewsApi = A8(
	_elm_lang$core$Json_Decode$map7,
	_elam03$elam03_github_io$NewsApi$NewsData,
	A2(
		_elm_lang$core$Json_Decode$field,
		'author',
		_elm_lang$core$Json_Decode$maybe(_elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode$field, 'title', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'description', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'url', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'urlToImage', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'publishedAt', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'channel', _elm_lang$core$Json_Decode$string));
var _elam03$elam03_github_io$RandomQuotes$decodeQuoteOnDesignUrl = _elm_lang$core$Json_Decode$list(
	A2(_elm_lang$core$Json_Decode$field, 'content', _elm_lang$core$Json_Decode$string));
var _elam03$elam03_github_io$RandomQuotes$decodeRonSwansonUrl = _elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string);
var _elam03$elam03_github_io$RandomQuotes$Model = F4(
	function (a, b, c, d) {
		return {numQuotesToDisplay: a, quotes: b, newsDataList: c, timeForNextQuote: d};
	});
var _elam03$elam03_github_io$RandomQuotes$init = function (numQuotesToDisplay) {
	return {
		ctor: '_Tuple2',
		_0: A4(
			_elam03$elam03_github_io$RandomQuotes$Model,
			10,
			{ctor: '[]'},
			{ctor: '[]'},
			0),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _elam03$elam03_github_io$RandomQuotes$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _elam03$elam03_github_io$RandomQuotes$NewNewsData = function (a) {
	return {ctor: 'NewNewsData', _0: a};
};
var _elam03$elam03_github_io$RandomQuotes$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$animation_frame$AnimationFrame$times(_elam03$elam03_github_io$RandomQuotes$Tick),
			_1: {
				ctor: '::',
				_0: _elam03$elam03_github_io$NewsApi$newNewsData(
					function (_p0) {
						return _elam03$elam03_github_io$RandomQuotes$NewNewsData(
							A2(_elm_lang$core$Json_Decode$decodeValue, _elam03$elam03_github_io$RandomQuotes$decodeSatoriNewsApi, _p0));
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _elam03$elam03_github_io$RandomQuotes$NewQuoteOnDesign = function (a) {
	return {ctor: 'NewQuoteOnDesign', _0: a};
};
var _elam03$elam03_github_io$RandomQuotes$getAnotherQuoteOnDesign = function (numQuotesToGet) {
	var url = A2(
		_elm_lang$core$Basics_ops['++'],
		'http://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=',
		_elm_lang$core$Basics$toString(numQuotesToGet));
	return A2(
		_elm_lang$http$Http$send,
		_elam03$elam03_github_io$RandomQuotes$NewQuoteOnDesign,
		A2(_elm_lang$http$Http$get, url, _elam03$elam03_github_io$RandomQuotes$decodeQuoteOnDesignUrl));
};
var _elam03$elam03_github_io$RandomQuotes$NewQuoteRonSwanson = function (a) {
	return {ctor: 'NewQuoteRonSwanson', _0: a};
};
var _elam03$elam03_github_io$RandomQuotes$getAnotherRonSwansonQuote = function (numQuotesToGet) {
	var url = (_elm_lang$core$Native_Utils.cmp(numQuotesToGet, 1) > 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		'http://ron-swanson-quotes.herokuapp.com/v2/quotes/',
		_elm_lang$core$Basics$toString(numQuotesToGet)) : 'http://ron-swanson-quotes.herokuapp.com/v2/quotes';
	return A2(
		_elm_lang$http$Http$send,
		_elam03$elam03_github_io$RandomQuotes$NewQuoteRonSwanson,
		A2(_elm_lang$http$Http$get, url, _elam03$elam03_github_io$RandomQuotes$decodeRonSwansonUrl));
};
var _elam03$elam03_github_io$RandomQuotes$update = F2(
	function (action, model) {
		var _p1 = action;
		switch (_p1.ctor) {
			case 'Tick':
				var _p2 = _p1._0;
				return (_elm_lang$core$Native_Utils.cmp(_p2, model.timeForNextQuote) > 0) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{timeForNextQuote: _p2 + 5000}),
					_1: _elam03$elam03_github_io$RandomQuotes$getAnotherRonSwansonQuote(1)
				} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'GetAnotherRonSwansonQuote':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elam03$elam03_github_io$RandomQuotes$getAnotherRonSwansonQuote(_p1._0)
				};
			case 'NewQuoteRonSwanson':
				if (_p1._0.ctor === 'Ok') {
					var newQuotesAppended = A2(
						_elm_lang$core$List$map,
						function (quote) {
							return A2(_elm_lang$core$Basics_ops['++'], quote, ' - Ron Swanson');
						},
						_p1._0._0);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								quotes: A2(_elm_lang$core$Basics_ops['++'], model.quotes, newQuotesAppended)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'GetAnotherQuoteOnDesign':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elam03$elam03_github_io$RandomQuotes$getAnotherQuoteOnDesign(_p1._0)
				};
			case 'NewQuoteOnDesign':
				if (_p1._0.ctor === 'Ok') {
					var newParsedQuotes = A2(
						_elm_lang$core$List$map,
						function (quote) {
							return _jinjor$elm_html_parser$HtmlParser_Util$textContent(
								_jinjor$elm_html_parser$HtmlParser$parse(quote));
						},
						_p1._0._0);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								quotes: A2(_elm_lang$core$Basics_ops['++'], model.quotes, newParsedQuotes)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				if (_p1._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								newsDataList: A2(
									_elm_lang$core$Basics_ops['++'],
									model.newsDataList,
									{
										ctor: '::',
										_0: _p1._0._0,
										_1: {ctor: '[]'}
									})
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
		}
	});
var _elam03$elam03_github_io$RandomQuotes$GetAnotherQuoteOnDesign = function (a) {
	return {ctor: 'GetAnotherQuoteOnDesign', _0: a};
};
var _elam03$elam03_github_io$RandomQuotes$GetAnotherRonSwansonQuote = function (a) {
	return {ctor: 'GetAnotherRonSwansonQuote', _0: a};
};
var _elam03$elam03_github_io$RandomQuotes$view = function (model) {
	var newsFeed = function () {
		var newsDataToDiv = function (newsData) {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							newsData.title,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' - ',
								A2(_elm_lang$core$Maybe$withDefault, 'source unknown', newsData.author)))),
					_1: {ctor: '[]'}
				});
		};
		return A2(
			_elm_lang$core$List$take,
			model.numQuotesToDisplay,
			_elm_lang$core$List$reverse(
				A2(_elm_lang$core$List$map, newsDataToDiv, model.newsDataList)));
	}();
	var quotes = A2(
		_elm_lang$core$List$take,
		model.numQuotesToDisplay,
		_elm_lang$core$List$reverse(
			A2(
				_elm_lang$core$List$map,
				function (quote) {
					return A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(quote),
							_1: {ctor: '[]'}
						});
				},
				model.quotes)));
	var allThings = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					_elam03$elam03_github_io$RandomQuotes$GetAnotherRonSwansonQuote(1)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Manual Quote Add (RS)'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$hr,
				{ctor: '[]'},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							_elam03$elam03_github_io$RandomQuotes$GetAnotherQuoteOnDesign(1)),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Manual Quote Add (QoD)'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$hr,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							quotes),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$hr,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									newsFeed),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$hr,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		allThings);
};

var _elam03$elam03_github_io$Main$toHash = function (page) {
	var _p0 = page;
	switch (_p0.ctor) {
		case 'Home':
			return '#home';
		case 'Skills':
			return '#skills';
		case 'Projects':
			return '#projects';
		case 'Blog':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'#blog/',
				_elm_lang$core$Basics$toString(_p0._0));
		default:
			return '#quotebanner';
	}
};
var _elam03$elam03_github_io$Main$urlUpdate = F2(
	function (result, model) {
		var _p1 = result;
		if (_p1.ctor === 'Err') {
			return {
				ctor: '_Tuple2',
				_0: model,
				_1: _elm_lang$navigation$Navigation$modifyUrl(
					_elam03$elam03_github_io$Main$toHash(model.page))
			};
		} else {
			var _p2 = _p1._0;
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						page: _p2,
						debug: _elam03$elam03_github_io$Main$toHash(_p2)
					}),
				{ctor: '[]'});
		}
	});
var _elam03$elam03_github_io$Main_ops = _elam03$elam03_github_io$Main_ops || {};
_elam03$elam03_github_io$Main_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _elam03$elam03_github_io$Main$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {cityscape: a, projectList: b, summaryList: c, blogList: d, randomQuotes: e, debug: f, page: g};
	});
var _elam03$elam03_github_io$Main$UrlChange = function (a) {
	return {ctor: 'UrlChange', _0: a};
};
var _elam03$elam03_github_io$Main$GotoNavBar = function (a) {
	return {ctor: 'GotoNavBar', _0: a};
};
var _elam03$elam03_github_io$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _elam03$elam03_github_io$Main$RandomQuotesMsgs = function (a) {
	return {ctor: 'RandomQuotesMsgs', _0: a};
};
var _elam03$elam03_github_io$Main$BlogListMsgs = function (a) {
	return {ctor: 'BlogListMsgs', _0: a};
};
var _elam03$elam03_github_io$Main$SummaryListMsgs = function (a) {
	return {ctor: 'SummaryListMsgs', _0: a};
};
var _elam03$elam03_github_io$Main$ProjectListMsgs = function (a) {
	return {ctor: 'ProjectListMsgs', _0: a};
};
var _elam03$elam03_github_io$Main$CityscapeMsgs = function (a) {
	return {ctor: 'CityscapeMsgs', _0: a};
};
var _elam03$elam03_github_io$Main$update = F2(
	function (action, model) {
		var _p3 = action;
		switch (_p3.ctor) {
			case 'CityscapeMsgs':
				var _p4 = A2(_elam03$elam03_github_io$Cityscape$update, _p3._0, model.cityscape);
				var cityscape = _p4._0;
				var cmds = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{cityscape: cityscape}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$CityscapeMsgs, cmds)
				};
			case 'ProjectListMsgs':
				var _p5 = A2(_elam03$elam03_github_io$ProjectList$update, _p3._0, model.projectList);
				var projectList = _p5._0;
				var cmds = _p5._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{projectList: projectList}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$ProjectListMsgs, cmds)
				};
			case 'SummaryListMsgs':
				var _p6 = A2(_elam03$elam03_github_io$SummaryList$update, _p3._0, model.summaryList);
				var summaryList = _p6._0;
				var cmds = _p6._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{summaryList: summaryList}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$SummaryListMsgs, cmds)
				};
			case 'BlogListMsgs':
				var _p7 = A2(_elam03$elam03_github_io$BlogList$update, _p3._0, model.blogList);
				var blogList = _p7._0;
				var cmds = _p7._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{blogList: blogList}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$BlogListMsgs, cmds)
				};
			case 'RandomQuotesMsgs':
				var _p8 = A2(_elam03$elam03_github_io$RandomQuotes$update, _p3._0, model.randomQuotes);
				var randomQuotes = _p8._0;
				var cmds = _p8._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{randomQuotes: randomQuotes}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$RandomQuotesMsgs, cmds)
				};
			case 'Tick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							debug: _elm_lang$core$Basics$toString(_p3._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'GotoNavBar':
				var _p9 = _p3._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{page: _p9}),
					{
						ctor: '::',
						_0: _elm_lang$navigation$Navigation$newUrl(
							_elam03$elam03_github_io$Main$toHash(_p9)),
						_1: {ctor: '[]'}
					});
			case 'UrlChange':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _elam03$elam03_github_io$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Platform_Sub$map,
				function (a) {
					return _elam03$elam03_github_io$Main$CityscapeMsgs(a);
				},
				_elam03$elam03_github_io$Cityscape$subscriptions(model.cityscape)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Platform_Sub$map,
					function (a) {
						return _elam03$elam03_github_io$Main$ProjectListMsgs(a);
					},
					_elam03$elam03_github_io$ProjectList$subscriptions(model.projectList)),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Platform_Sub$map,
						function (a) {
							return _elam03$elam03_github_io$Main$SummaryListMsgs(a);
						},
						_elam03$elam03_github_io$SummaryList$subscriptions(model.summaryList)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Platform_Sub$map,
							function (a) {
								return _elam03$elam03_github_io$Main$BlogListMsgs(a);
							},
							_elam03$elam03_github_io$BlogList$subscriptions(model.blogList)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Platform_Sub$map,
								function (a) {
									return _elam03$elam03_github_io$Main$RandomQuotesMsgs(a);
								},
								_elam03$elam03_github_io$RandomQuotes$subscriptions(model.randomQuotes)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _elam03$elam03_github_io$Main$NoOp = {ctor: 'NoOp'};
var _elam03$elam03_github_io$Main$QuoteBanner = {ctor: 'QuoteBanner'};
var _elam03$elam03_github_io$Main$Blog = function (a) {
	return {ctor: 'Blog', _0: a};
};
var _elam03$elam03_github_io$Main$Projects = {ctor: 'Projects'};
var _elam03$elam03_github_io$Main$init = function (location) {
	var _p10 = _elam03$elam03_github_io$RandomQuotes$init(1);
	var randomQuotes = _p10._0;
	var randomQuotesCmds = _p10._1;
	var _p11 = _elam03$elam03_github_io$Cityscape$init;
	var cityscape = _p11._0;
	var cityscapeCmds = _p11._1;
	var assetPath = 'assets/1gam_projects/';
	var blogFileLocation = 'assets/blogs/blog_content.json';
	var _p12 = _elam03$elam03_github_io$BlogList$init(blogFileLocation);
	var blogList = _p12._0;
	var blogListCmds = _p12._1;
	var summaryFileLocation = 'assets/summary_data.json';
	var _p13 = _elam03$elam03_github_io$SummaryList$init(summaryFileLocation);
	var summaryList = _p13._0;
	var summaryListCmds = _p13._1;
	var projectListFileLocation = 'assets/1gam_projects/project_list.json';
	var _p14 = A2(_elam03$elam03_github_io$ProjectList$init, projectListFileLocation, assetPath);
	var projectList = _p14._0;
	var projectListCmds = _p14._1;
	var model_ = {cityscape: cityscape, projectList: projectList, summaryList: summaryList, blogList: blogList, randomQuotes: randomQuotes, debug: '', page: _elam03$elam03_github_io$Main$Projects};
	var cmds_ = _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$CityscapeMsgs, cityscapeCmds),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$ProjectListMsgs, projectListCmds),
				_1: {
					ctor: '::',
					_0: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$SummaryListMsgs, summaryListCmds),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$BlogListMsgs, blogListCmds),
						_1: {
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _elam03$elam03_github_io$Main$RandomQuotesMsgs, randomQuotesCmds),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
	return {ctor: '_Tuple2', _0: model_, _1: cmds_};
};
var _elam03$elam03_github_io$Main$Skills = {ctor: 'Skills'};
var _elam03$elam03_github_io$Main$Home = {ctor: 'Home'};
var _elam03$elam03_github_io$Main$viewNavBar = function (model) {
	var logo = {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$img,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$src('assets/avatars/avatar0.jpg'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$alt('avatar'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('logo'),
						_1: {ctor: '[]'}
					}
				}
			},
			{ctor: '[]'}),
		_1: {ctor: '[]'}
	};
	var toMenuItem = function (_p15) {
		var _p16 = _p15;
		var _p17 = _p16._1;
		var attributes = _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'navbar-item', _1: true},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'active',
						_1: _elm_lang$core$Native_Utils.eq(model.page, _p17)
					},
					_1: {ctor: '[]'}
				}
			});
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: attributes,
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href(_p16._0),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							_elam03$elam03_github_io$Main$GotoNavBar(_p17)),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(_p16._2),
				_1: {ctor: '[]'}
			});
	};
	var tabsInfo = {
		ctor: '::',
		_0: {ctor: '_Tuple3', _0: '#home', _1: _elam03$elam03_github_io$Main$Home, _2: 'Home'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple3', _0: '#skills', _1: _elam03$elam03_github_io$Main$Skills, _2: 'Skills'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple3', _0: '#projects', _1: _elam03$elam03_github_io$Main$Projects, _2: 'Projects'},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple3',
						_0: '#blog/1',
						_1: _elam03$elam03_github_io$Main$Blog(1),
						_2: 'Blog'
					},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple3', _0: '#quotebanner', _1: _elam03$elam03_github_io$Main$QuoteBanner, _2: 'QuoteBanner'},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
	var tabs = A2(_elm_lang$core$List$map, toMenuItem, tabsInfo);
	return A2(
		_elm_lang$html$Html$nav,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('navbar'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$Basics_ops['++'], logo, tabs));
};
var _elam03$elam03_github_io$Main$view = function (model) {
	var navbar = _elam03$elam03_github_io$Main$viewNavBar(model);
	var toDiv = function (_p18) {
		var _p19 = _p18;
		var divs = A2(
			_elm_lang$core$List$map,
			function (content) {
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('content-block'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: content,
						_1: {ctor: '[]'}
					});
			},
			_p19._1);
		var attributes = _elm_lang$html$Html_Attributes$classList(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'hidden',
					_1: !_elm_lang$core$Native_Utils.eq(_p19._0, model.page)
				},
				_1: {ctor: '[]'}
			});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: attributes,
				_1: {ctor: '[]'}
			},
			divs);
	};
	var skillsContent = A2(
		_elm_lang$html$Html$map,
		_elam03$elam03_github_io$Main$SummaryListMsgs,
		A2(
			_elam03$elam03_github_io$SummaryList$viewFilter,
			{
				ctor: '::',
				_0: 'Skills',
				_1: {
					ctor: '::',
					_0: 'Languages',
					_1: {
						ctor: '::',
						_0: 'Experiences',
						_1: {ctor: '[]'}
					}
				}
			},
			model.summaryList));
	var homeContent = A2(
		_elm_lang$html$Html$map,
		_elam03$elam03_github_io$Main$SummaryListMsgs,
		A2(
			_elam03$elam03_github_io$SummaryList$viewFilter,
			{
				ctor: '::',
				_0: 'Motivations',
				_1: {
					ctor: '::',
					_0: 'Interests',
					_1: {
						ctor: '::',
						_0: 'Quotes',
						_1: {
							ctor: '::',
							_0: 'Inspirational People',
							_1: {ctor: '[]'}
						}
					}
				}
			},
			model.summaryList));
	var randomQuotesContent = A2(
		_elm_lang$html$Html$map,
		_elam03$elam03_github_io$Main$RandomQuotesMsgs,
		_elam03$elam03_github_io$RandomQuotes$view(model.randomQuotes));
	var projectListContent = A2(
		_elm_lang$html$Html$map,
		_elam03$elam03_github_io$Main$ProjectListMsgs,
		_elam03$elam03_github_io$ProjectList$view(model.projectList));
	var summaryListContent = A2(
		_elm_lang$html$Html$map,
		_elam03$elam03_github_io$Main$SummaryListMsgs,
		_elam03$elam03_github_io$SummaryList$view(model.summaryList));
	var blogListContent = A2(
		_elm_lang$html$Html$map,
		_elam03$elam03_github_io$Main$BlogListMsgs,
		_elam03$elam03_github_io$BlogList$view(model.blogList));
	var cityscapeContent = A2(
		_elm_lang$html$Html$map,
		_elam03$elam03_github_io$Main$CityscapeMsgs,
		_elam03$elam03_github_io$Cityscape$view(model.cityscape));
	var tabsInfo = {
		ctor: '::',
		_0: {
			ctor: '_Tuple2',
			_0: _elam03$elam03_github_io$Main$Home,
			_1: {
				ctor: '::',
				_0: cityscapeContent,
				_1: {
					ctor: '::',
					_0: homeContent,
					_1: {ctor: '[]'}
				}
			}
		},
		_1: {
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: _elam03$elam03_github_io$Main$Skills,
				_1: {
					ctor: '::',
					_0: cityscapeContent,
					_1: {
						ctor: '::',
						_0: skillsContent,
						_1: {ctor: '[]'}
					}
				}
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: _elam03$elam03_github_io$Main$Blog(1),
					_1: {
						ctor: '::',
						_0: cityscapeContent,
						_1: {
							ctor: '::',
							_0: blogListContent,
							_1: {ctor: '[]'}
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: _elam03$elam03_github_io$Main$Projects,
						_1: {
							ctor: '::',
							_0: cityscapeContent,
							_1: {
								ctor: '::',
								_0: projectListContent,
								_1: {ctor: '[]'}
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: _elam03$elam03_github_io$Main$QuoteBanner,
							_1: {
								ctor: '::',
								_0: cityscapeContent,
								_1: {
									ctor: '::',
									_0: randomQuotesContent,
									_1: {ctor: '[]'}
								}
							}
						},
						_1: {ctor: '[]'}
					}
				}
			}
		}
	};
	var divs = A2(_elm_lang$core$List$map, toDiv, tabsInfo);
	var allDivs = A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: navbar,
			_1: {ctor: '[]'}
		},
		divs);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		allDivs);
};
var _elam03$elam03_github_io$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_elam03$elam03_github_io$Main$UrlChange,
	{init: _elam03$elam03_github_io$Main$init, view: _elam03$elam03_github_io$Main$view, update: _elam03$elam03_github_io$Main$update, subscriptions: _elam03$elam03_github_io$Main$subscriptions})();
var _elam03$elam03_github_io$Main$pageParser = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_evancz$url_parser$UrlParser$map,
			_elam03$elam03_github_io$Main$Home,
			_evancz$url_parser$UrlParser$s('home')),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_elam03$elam03_github_io$Main$Skills,
				_evancz$url_parser$UrlParser$s('skills')),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$url_parser$UrlParser$map,
					_elam03$elam03_github_io$Main$Projects,
					_evancz$url_parser$UrlParser$s('projects')),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$url_parser$UrlParser$map,
						_elam03$elam03_github_io$Main$Blog,
						A2(
							_evancz$url_parser$UrlParser_ops['</>'],
							_evancz$url_parser$UrlParser$s('blog'),
							_evancz$url_parser$UrlParser$int)),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$url_parser$UrlParser$map,
							_elam03$elam03_github_io$Main$QuoteBanner,
							_evancz$url_parser$UrlParser$s('quotebanner')),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});

var Elm = {};
Elm['Main'] = Elm['Main'] || {};
if (typeof _elam03$elam03_github_io$Main$main !== 'undefined') {
    _elam03$elam03_github_io$Main$main(Elm['Main'], 'Main', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

