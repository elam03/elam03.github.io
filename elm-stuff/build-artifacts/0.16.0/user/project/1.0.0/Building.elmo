Elm.Building = Elm.Building || {};
Elm.Building.make = function (_elm) {
   "use strict";
   _elm.Building = _elm.Building || {};
   if (_elm.Building.values) return _elm.Building.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var darkGrey = A4($Color.rgba,50,50,50,0.6);
   var glassWindowToForm = function (window) {
      return A2($Graphics$Collage.move,
      {ctor: "_Tuple2"
      ,_0: window.x + window.w / 2
      ,_1: window.y + window.h / 2},
      A2($Graphics$Collage.filled,
      darkGrey,
      A2($Graphics$Collage.rect,window.w,window.h)));
   };
   var clearGrey = A4($Color.rgba,111,111,111,0.6);
   var displayBuilding = function (b) {
      var windows = A2($List.map,
      glassWindowToForm,
      A2($List.map,
      function (a) {
         return _U.update(a,{x: a.x + b.x,y: a.y + b.y});
      },
      b.windows));
      var allForms = A2($Basics._op["++"],
      _U.list([A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: b.x + b.w / 2,_1: b.y + b.h / 2},
      A2($Graphics$Collage.filled,
      clearGrey,
      A2($Graphics$Collage.rect,b.w,b.h)))]),
      windows);
      return $Graphics$Collage.group(allForms);
   };
   var Building = F6(function (a,b,c,d,e,f) {
      return {x: a,y: b,w: c,h: d,layer: e,windows: f};
   });
   var newGlassWindow = F4(function (x$,y$,w$,h$) {
      return {x: x$,y: y$,w: w$,h: h$};
   });
   var GlassWindow = F4(function (a,b,c,d) {
      return {x: a,y: b,w: c,h: d};
   });
   var buildingWidth = 40;
   var glassWindowSpacing = {w: 6,h: 15};
   var glassWindowSize = {w: 10,h: 30};
   var generateGlassWindows = F7(function (x,
   y,
   w,
   h,
   xSpacing,
   ySpacing,
   windows) {
      generateGlassWindows: while (true)
      if (_U.cmp(x + glassWindowSize.w + xSpacing,w) > 0)
      return windows;
      else if (_U.cmp(y + glassWindowSize.h + ySpacing,h) > 0) {
               var _v0 = x + glassWindowSize.w + xSpacing,
               _v1 = ySpacing,
               _v2 = w,
               _v3 = h,
               _v4 = xSpacing,
               _v5 = ySpacing,
               _v6 = windows;
               x = _v0;
               y = _v1;
               w = _v2;
               h = _v3;
               xSpacing = _v4;
               ySpacing = _v5;
               windows = _v6;
               continue generateGlassWindows;
            } else {
               var _v7 = x,
               _v8 = y + glassWindowSize.h + ySpacing,
               _v9 = w,
               _v10 = h,
               _v11 = xSpacing,
               _v12 = ySpacing,
               _v13 = A2($Basics._op["++"],
               windows,
               _U.list([A4(newGlassWindow,
               x,
               y,
               glassWindowSize.w,
               glassWindowSize.h)]));
               x = _v7;
               y = _v8;
               w = _v9;
               h = _v10;
               xSpacing = _v11;
               ySpacing = _v12;
               windows = _v13;
               continue generateGlassWindows;
            }
   });
   var Size = F2(function (a,b) {    return {w: a,h: b};});
   var Static = {ctor: "Static"};
   var isStatic = function (b) {    return _U.eq(b.layer,Static);};
   var Back = {ctor: "Back"};
   var isBack = function (b) {    return _U.eq(b.layer,Back);};
   var Middle = {ctor: "Middle"};
   var isMiddle = function (b) {    return _U.eq(b.layer,Middle);};
   var Front = {ctor: "Front"};
   var isFront = function (b) {    return _U.eq(b.layer,Front);};
   var nullBuilding = {x: 0
                      ,y: 0
                      ,w: buildingWidth
                      ,h: 0
                      ,layer: Front
                      ,windows: _U.list([])};
   var newBuilding = F3(function (x$,h$,l$) {
      var w$ = buildingWidth;
      return _U.update(nullBuilding,
      {x: x$
      ,y: 0
      ,w: w$
      ,h: h$
      ,layer: l$
      ,windows: A7(generateGlassWindows,
      glassWindowSpacing.w,
      glassWindowSpacing.h,
      w$,
      h$,
      glassWindowSpacing.w,
      glassWindowSpacing.h,
      _U.list([]))});
   });
   return _elm.Building.values = {_op: _op
                                 ,Front: Front
                                 ,Middle: Middle
                                 ,Back: Back
                                 ,Static: Static
                                 ,Size: Size
                                 ,glassWindowSize: glassWindowSize
                                 ,glassWindowSpacing: glassWindowSpacing
                                 ,buildingWidth: buildingWidth
                                 ,isBack: isBack
                                 ,isMiddle: isMiddle
                                 ,isFront: isFront
                                 ,isStatic: isStatic
                                 ,GlassWindow: GlassWindow
                                 ,newGlassWindow: newGlassWindow
                                 ,generateGlassWindows: generateGlassWindows
                                 ,Building: Building
                                 ,newBuilding: newBuilding
                                 ,nullBuilding: nullBuilding
                                 ,clearGrey: clearGrey
                                 ,darkGrey: darkGrey
                                 ,glassWindowToForm: glassWindowToForm
                                 ,displayBuilding: displayBuilding};
};