Elm.ProjectList = Elm.ProjectList || {};
Elm.ProjectList.make = function (_elm) {
   "use strict";
   _elm.ProjectList = _elm.ProjectList || {};
   if (_elm.ProjectList.values) return _elm.ProjectList.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var _op = {};
   var viewProject = F2(function (address,project) {
      var $break = _U.list([A2($Html.br,_U.list([]),_U.list([]))]);
      var previewsContent = A2($List.map,
      function (path) {
         return A2($Html.img,
         _U.list([$Html$Attributes.src(path)
                 ,$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                  ,_0: "width"
                                                  ,_1: "32px"}]))]),
         _U.list([]));
      },
      A2($Maybe.withDefault,_U.list([]),project.previews));
      var downloadUrlContent = function () {
         var _p0 = project.downloadUrl;
         if (_p0.ctor === "Just") {
               return _U.list([A2($Html.a,
               _U.list([$Html$Attributes.href(_p0._0)]),
               _U.list([$Html.text("Download Link")]))]);
            } else {
               return _U.list([]);
            }
      }();
      var sourceUrlContent = function () {
         var _p1 = project.sourceUrl;
         if (_p1.ctor === "Just") {
               return _U.list([A2($Html.a,
               _U.list([$Html$Attributes.href(_p1._0)]),
               _U.list([$Html.text("Source Link")]))]);
            } else {
               return _U.list([]);
            }
      }();
      var descriptionContent = function () {
         var _p2 = project.description;
         if (_p2.ctor === "Just") {
               return _U.list([A2($Html.p,
               _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                        ,_0: "text-align"
                                                        ,_1: "left"}]))]),
               _U.list([$Html.text(_p2._0)]))]);
            } else {
               return _U.list([]);
            }
      }();
      var keywordsContent = A2($List.map,
      function (keyword) {
         return A2($Html.p,
         _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                  ,_0: "font-weight"
                                                  ,_1: "bold"}]))]),
         _U.list([$Html.text(keyword)]));
      },
      A2($Maybe.withDefault,_U.list([]),project.keywords));
      var categoryContent = function () {
         var _p3 = project.category;
         if (_p3.ctor === "Just") {
               return _U.list([A2($Html.p,
               _U.list([]),
               _U.list([$Html.text(_p3._0)]))]);
            } else {
               return _U.list([]);
            }
      }();
      var titleContent = _U.list([A2($Html.h3,
      _U.list([]),
      _U.list([$Html.text(project.title)]))]);
      var content = A2($Basics._op["++"],
      titleContent,
      A2($Basics._op["++"],
      categoryContent,
      A2($Basics._op["++"],
      keywordsContent,
      A2($Basics._op["++"],
      $break,
      A2($Basics._op["++"],
      descriptionContent,
      A2($Basics._op["++"],
      $break,
      A2($Basics._op["++"],
      sourceUrlContent,
      A2($Basics._op["++"],
      $break,
      A2($Basics._op["++"],
      downloadUrlContent,
      A2($Basics._op["++"],$break,previewsContent))))))))));
      return A2($Html.th,
      _U.list([$Html$Attributes.$class("projectlist-item")]),
      content);
   });
   var view = F2(function (address,model) {
      var attributes = _U.list([$Html$Attributes.$class("projectlist-table")]);
      var numCols = 3;
      var projects = A2($Utils.composeTiledHtml,
      numCols,
      A2($List.map,
      function (p) {
         return A2(viewProject,address,p);
      },
      model.projects));
      return A2($Html.table,attributes,projects);
   });
   var Refresh = function (a) {
      return {ctor: "Refresh",_0: a};
   };
   var RequestRefresh = {ctor: "RequestRefresh"};
   var errorProject = {title: "error"
                      ,category: $Maybe.Just("error")
                      ,keywords: $Maybe.Just(_U.list(["error"]))
                      ,description: $Maybe.Just("error")
                      ,sourceUrl: $Maybe.Just("error")
                      ,downloadUrl: $Maybe.Just("error")
                      ,previews: $Maybe.Just(_U.list(["error","error"]))};
   var errorProjectList = {projects: _U.list([errorProject])};
   var Model = F3(function (a,b,c) {
      return {file: a,assetPath: b,projects: c};
   });
   var Project = F7(function (a,b,c,d,e,f,g) {
      return {title: a
             ,category: b
             ,keywords: c
             ,description: d
             ,sourceUrl: e
             ,downloadUrl: f
             ,previews: g};
   });
   var ProjectList = function (a) {    return {projects: a};};
   var decodeData = A2($Json$Decode.object1,
   ProjectList,
   A2($Json$Decode._op[":="],
   "projects",
   $Json$Decode.list(A8($Json$Decode.object7,
   Project,
   A2($Json$Decode._op[":="],"title",$Json$Decode.string),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],
   "category",
   $Json$Decode.string)),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],
   "keywords",
   $Json$Decode.list($Json$Decode.string))),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],
   "description",
   $Json$Decode.string)),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],
   "sourceUrl",
   $Json$Decode.string)),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],
   "downloadUrl",
   $Json$Decode.string)),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],
   "previews",
   $Json$Decode.list($Json$Decode.string)))))));
   var getProjectData = function (location) {
      return $Effects.task(A2($Task.map,
      Refresh,
      $Task.toMaybe(A2($Http.get,decodeData,location))));
   };
   var init = F2(function (projectList,assetPath) {
      return {ctor: "_Tuple2"
             ,_0: A3(Model,projectList,assetPath,_U.list([]))
             ,_1: getProjectData(projectList)};
   });
   var update = F2(function (action,model) {
      var _p4 = action;
      if (_p4.ctor === "RequestRefresh") {
            return {ctor: "_Tuple2"
                   ,_0: model
                   ,_1: getProjectData(model.file)};
         } else {
            var projectList = A2($Maybe.withDefault,
            errorProjectList,
            _p4._0);
            var addProjectAssetPath = function (project) {
               var previews$ = A2($List.map,
               function (p) {
                  return A2($Basics._op["++"],model.assetPath,p);
               },
               A2($Maybe.withDefault,_U.list([]),project.previews));
               return _U.update(project,{previews: $Maybe.Just(previews$)});
            };
            var addProjectDescription = function (project) {
               var description = A2($Maybe.withDefault,
               "",
               project.description);
               return _U.cmp($String.length(description),
               0) > 0 ? project : _U.update(project,
               {description: $Maybe.Just("No Description available!")});
            };
            var projects = A2($List.map,
            addProjectAssetPath,
            A2($List.map,addProjectDescription,projectList.projects));
            return $List.isEmpty(projects) ? {ctor: "_Tuple2"
                                             ,_0: A3(Model,model.file,"failed",projects)
                                             ,_1: $Effects.none} : {ctor: "_Tuple2"
                                                                   ,_0: A3(Model,model.file,"success",projects)
                                                                   ,_1: $Effects.none};
         }
   });
   _op["=>"] = F2(function (v0,v1) {
      return {ctor: "_Tuple2",_0: v0,_1: v1};
   });
   return _elm.ProjectList.values = {_op: _op
                                    ,ProjectList: ProjectList
                                    ,Project: Project
                                    ,Model: Model
                                    ,errorProjectList: errorProjectList
                                    ,errorProject: errorProject
                                    ,init: init
                                    ,RequestRefresh: RequestRefresh
                                    ,Refresh: Refresh
                                    ,update: update
                                    ,view: view
                                    ,viewProject: viewProject
                                    ,getProjectData: getProjectData
                                    ,decodeData: decodeData};
};