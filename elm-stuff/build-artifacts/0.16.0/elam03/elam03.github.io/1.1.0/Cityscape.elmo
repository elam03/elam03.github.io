Elm.Cityscape = Elm.Cityscape || {};
Elm.Cityscape.make = function (_elm) {
   "use strict";
   _elm.Cityscape = _elm.Cityscape || {};
   if (_elm.Cityscape.values) return _elm.Cityscape.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Building = Elm.Building.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var displayRandomValue = function (_p0) {
      var _p1 = _p0;
      var x = $Basics.toFloat(_p1._0);
      return A2($Graphics$Collage.traced,
      $Graphics$Collage.solid($Color.red),
      $Graphics$Collage.path(_U.list([{ctor: "_Tuple2",_0: x,_1: 0}
                                     ,{ctor: "_Tuple2",_0: x,_1: _p1._1 * 100}])));
   };
   var displayModelInfo = function (model) {
      if (model.showInfo) {
            var randomValues = A2($List.map,
            displayRandomValue,
            A3($List.map2,
            F2(function (v0,v1) {
               return {ctor: "_Tuple2",_0: v0,_1: v1};
            }),
            _U.range(1,$Array.length(model.randomValues)),
            $Array.toList(model.randomValues)));
            var movementType = model.movementType;
            var firstBuilding = A2($Maybe.withDefault,
            $Building.nullBuilding,
            $List.head(model.buildings));
            var _p2 = {ctor: "_Tuple2"
                      ,_0: $Basics.toFloat(model.windowWidth)
                      ,_1: $Basics.toFloat(model.windowHeight)};
            var ww = _p2._0;
            var wh = _p2._1;
            var keys = A2($List.map,
            function (key) {
               return $Char.fromCode(key);
            },
            model.keys);
            var dt = $Basics.round(model.dt);
            var t = $Basics.round(model.t);
            var d = {ctor: "_Tuple2",_0: model.dx,_1: model.dy};
            var m = {ctor: "_Tuple2",_0: model.x,_1: model.y};
            var allInfo = _U.list([$Graphics$Element.show(A2($Basics._op["++"],
                                  "(x,y): ",
                                  $Basics.toString(m)))
                                  ,$Graphics$Element.show(A2($Basics._op["++"],
                                  "(dx,dy): ",
                                  $Basics.toString(d)))
                                  ,$Graphics$Element.show(A2($Basics._op["++"],
                                  "t: ",
                                  $Basics.toString(t)))
                                  ,$Graphics$Element.show(A2($Basics._op["++"],
                                  "dt: ",
                                  $Basics.toString(dt)))
                                  ,$Graphics$Element.show(A2($Basics._op["++"],
                                  "keys: ",
                                  $Basics.toString(keys)))
                                  ,$Graphics$Element.show(A2($Basics._op["++"],
                                  "(ww, wh): ",
                                  $Basics.toString({ctor: "_Tuple2",_0: ww,_1: wh})))
                                  ,$Graphics$Element.show(A2($Basics._op["++"],
                                  "buildings: ",
                                  $Basics.toString($List.length(model.buildings))))
                                  ,$Graphics$Element.show(A2($Basics._op["++"],
                                  "first building: ",
                                  $Basics.toString($Basics.round(firstBuilding.x))))
                                  ,$Graphics$Element.show(A2($Basics._op["++"],
                                  "movementType: ",
                                  $Basics.toString(movementType)))]);
            var formsToDisplay = A2($Basics._op["++"],
            _U.list([$Graphics$Collage.toForm(A2($Graphics$Element.flow,
            $Graphics$Element.down,
            allInfo))]),
            randomValues);
            return A2($List.map,
            function (a) {
               return A2($Graphics$Collage.move,
               {ctor: "_Tuple2",_0: (0 - ww) / 2 + 80,_1: wh / 2 - 100},
               a);
            },
            formsToDisplay);
         } else return _U.list([]);
   };
   var displayMouseCursor = F2(function (_p3,model) {
      var _p4 = _p3;
      var a = model.t;
      var p = {ctor: "_Tuple2"
              ,_0: _p4._0 - $Basics.toFloat(model.windowWidth) / 2
              ,_1: _p4._1 + $Basics.toFloat(model.windowHeight) / 2};
      return _U.list([A2($Graphics$Collage.rotate,
      $Basics.degrees(a),
      A2($Graphics$Collage.move,
      p,
      A2($Graphics$Collage.filled,
      $Color.red,
      A2($Graphics$Collage.ngon,3,5))))]);
   });
   var grad = F2(function (y,h) {
      var split = 0.75;
      var center = y - h * (1.0 - split);
      return A3($Color.linear,
      {ctor: "_Tuple2",_0: 0,_1: center + h},
      {ctor: "_Tuple2",_0: 0,_1: center},
      _U.list([{ctor: "_Tuple2",_0: 0.0,_1: A3($Color.rgb,0,171,235)}
              ,{ctor: "_Tuple2",_0: split,_1: A3($Color.rgb,255,192,64)}
              ,{ctor: "_Tuple2",_0: split,_1: $Color.brown}
              ,{ctor: "_Tuple2",_0: 1.0,_1: A3($Color.rgb,38,192,0)}]));
   });
   var viewSunset = function (model) {
      var h = $Basics.toFloat(model.windowHeight);
      var w = $Basics.toFloat(model.windowWidth);
      return A2($Graphics$Collage.gradient,
      A2(grad,model.sunset.y,model.sunset.h),
      A2($Graphics$Collage.rect,w,h));
   };
   var view = F2(function (address,model) {
      var sunset = viewSunset(model);
      var allBuildings = A2($List.map,
      $Building.displayBuilding,
      model.buildings);
      var _p5 = {ctor: "_Tuple2",_0: model.x,_1: 0 - model.y};
      var mx = _p5._0;
      var my = _p5._1;
      var things = A2($Basics._op["++"],
      _U.list([sunset]),
      A2($Basics._op["++"],
      allBuildings,
      A2($Basics._op["++"],
      displayModelInfo(model),
      A2(displayMouseCursor,{ctor: "_Tuple2",_0: mx,_1: my},model))));
      var finalOutput = $Html.fromElement(A3($Graphics$Collage.collage,
      model.windowWidth,
      model.windowHeight,
      things));
      return A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                               ,_0: "width"
                                               ,_1: A2($Basics._op["++"],
                                               $Basics.toString(model.windowWidth),
                                               "px")}
                                              ,{ctor: "_Tuple2"
                                               ,_0: "height"
                                               ,_1: A2($Basics._op["++"],
                                               $Basics.toString(model.windowHeight),
                                               "px")}
                                              ,{ctor: "_Tuple2",_0: "border-style",_1: "solid"}]))]),
      _U.list([finalOutput]));
   });
   var timeUpdate = F2(function (dt,model) {
      return _U.update(model,{t: model.t + dt,dt: dt});
   });
   var mouseUpdate = F2(function (_p6,model) {
      var _p7 = _p6;
      var _p10 = _p7._1;
      var _p9 = _p7._0;
      var _p8 = {ctor: "_Tuple2",_0: model.x,_1: model.y};
      var px = _p8._0;
      var py = _p8._1;
      return _U.update(model,
      {x: $Basics.toFloat(_p9)
      ,y: $Basics.toFloat(_p10)
      ,dx: $Basics.toFloat(_p9) - px
      ,dy: $Basics.toFloat(_p10) - py});
   });
   var pickLayer = function (value) {
      return _U.cmp(value,
      66) > -1 ? $Building.Front : _U.cmp(value,
      33) > -1 ? $Building.Middle : $Building.Back;
   };
   var reduceNewBuildingCount = function (model) {
      return _U.update(model,
      {numBuildingsToAdd: model.numBuildingsToAdd - 1});
   };
   var addBuilding = F2(function (model,building) {
      return _U.update(model,
      {buildings: A2($Basics._op["++"],
      model.buildings,
      _U.list([building]))});
   });
   var toValue = F3(function (min,max,v) {
      return A2($Maybe.withDefault,0.5,v) * (max - min) + min;
   });
   var popRandomValues = F2(function (numOfValuesToPop,model) {
      return _U.update(model,
      {randomValues: A3($Array.slice,
      numOfValuesToPop,
      $Array.length(model.randomValues),
      model.randomValues)});
   });
   var getRandomValues = F2(function (model,numValues) {
      return A3($Array.slice,0,numValues,model.randomValues);
   });
   var addBuildingsUpdate = function (model) {
      if (_U.cmp(model.numBuildingsToAdd,0) > 0) {
            var modifiedModel = A2(popRandomValues,3,model);
            var y = model.sunset.y;
            var randomValues = A2(getRandomValues,model,3);
            var h = A3(toValue,25,100,A2($Array.get,1,randomValues));
            var l = pickLayer(A3(toValue,
            0,
            100,
            A2($Array.get,1,randomValues)));
            var wh = $Basics.toFloat(model.windowHeight / 2 | 0);
            var ww = $Basics.toFloat(model.windowWidth / 2 | 0);
            var x = A3(toValue,0 - ww,ww,A2($Array.get,0,randomValues));
            return reduceNewBuildingCount(A2(addBuilding,
            modifiedModel,
            A4($Building.newBuilding,x,y,h,l)));
         } else return model;
   };
   var getNumBuildings = function (model) {
      return $List.length(model.buildings);
   };
   var keysUpdateModel = F2(function (keys,model) {
      return _U.update(model,{keys: $Set.toList(keys)});
   });
   var isDown = F2(function (keys,keyCode) {
      return A2($Set.member,$Char.toCode(keyCode),keys);
   });
   var keysUpdateToggleInfo = F2(function (keys,model) {
      return A2(isDown,keys,_U.chr("I")) ? _U.update(model,
      {showInfo: $Basics.not(model.showInfo)}) : model;
   });
   var increment = function (condition) {
      var _p11 = condition;
      if (_p11 === true) {
            return 1;
         } else {
            return 0;
         }
   };
   var keysUpdateAddBuildings = F2(function (keys,model) {
      return _U.update(model,
      {numBuildingsToAdd: model.numBuildingsToAdd + increment(A2(isDown,
      keys,
      _U.chr("1")))});
   });
   var randomUpdate = function (model) {
      var generator = A2($Random.list,100,A2($Random.$float,0,1));
      var tuple = A2($Random.generate,generator,model.seed);
      var vs = $Array.fromList($Basics.fst(tuple));
      var newSeed = $Basics.snd(tuple);
      var modifiedModel = _U.update(model,
      {seed: newSeed,randomValues: vs});
      return modifiedModel;
   };
   var updateWindowDimensions = F2(function (_p12,model) {
      var _p13 = _p12;
      return _U.update(model,
      {windowWidth: _p13._0,windowHeight: _p13._1});
   });
   var wrapBuildings = F2(function (widthWrap,buildings) {
      var w = $Basics.toFloat(widthWrap);
      var checkRightEdge = function (b) {
         return _U.cmp(b.x,w / 2) > 0 ? _U.update(b,
         {x: b.x - b.w - w}) : b;
      };
      var checkLeftEdge = function (b) {
         return _U.cmp(b.x,0 - (w / 2 + b.w)) < 0 ? _U.update(b,
         {x: b.x + b.w + w}) : b;
      };
      return A2($List.map,
      checkLeftEdge,
      A2($List.map,checkRightEdge,buildings));
   });
   var resetMouseDelta = function (model) {
      return _U.update(model,{dx: 0,dy: 0});
   };
   var updateBuildings = F4(function (dx,
   dt,
   windowWidth,
   buildings) {
      var staticSpeed = 0;
      var frontSpeed = 25 * dx;
      var middleSpeed = frontSpeed * 2;
      var middleBuildings = A2($List.map,
      function (b) {
         return _U.update(b,{x: b.x + middleSpeed / dt});
      },
      A2($List.filter,$Building.isMiddle,buildings));
      var backSpeed = frontSpeed * 3;
      var backBuildings = A2($List.map,
      function (b) {
         return _U.update(b,{x: b.x + backSpeed / dt});
      },
      A2($List.filter,$Building.isBack,buildings));
      var frontBuildings = A2($List.map,
      function (b) {
         return _U.update(b,{x: b.x + frontSpeed / dt});
      },
      A2($List.filter,$Building.isFront,buildings));
      var allBuildings = A2($Basics._op["++"],
      backBuildings,
      A2($Basics._op["++"],middleBuildings,frontBuildings));
      var updatedBuildings = A2(wrapBuildings,
      windowWidth,
      allBuildings);
      return updatedBuildings;
   });
   var updateBuildingsInModel = function (model) {
      var _p14 = model.movementType;
      switch (_p14.ctor)
      {case "MouseMove": var updatedBuildings = A4(updateBuildings,
           model.dx,
           model.dt,
           model.windowWidth,
           model.buildings);
           return _U.update(model,{buildings: updatedBuildings});
         case "TimeMove": var updatedBuildings = A4(updateBuildings,
           1,
           model.dt,
           model.windowWidth,
           model.buildings);
           return _U.update(model,{buildings: updatedBuildings});
         case "StaticMove": return model;
         default: return model;}
   };
   var WindowSizeChange = function (a) {
      return {ctor: "WindowSizeChange",_0: a};
   };
   var MouseMoved = function (a) {
      return {ctor: "MouseMoved",_0: a};
   };
   var KeyDown = function (a) {
      return {ctor: "KeyDown",_0: a};
   };
   var TimeDelta = function (a) {
      return {ctor: "TimeDelta",_0: a};
   };
   var inputs = $Signal.mergeMany(_U.list([A2($Signal.map,
                                          MouseMoved,
                                          $Mouse.position)
                                          ,A2($Signal.map,KeyDown,$Keyboard.keysDown)
                                          ,A2($Signal.map,TimeDelta,$Time.fps(30))
                                          ,A2($Signal.map,WindowSizeChange,$Window.dimensions)]));
   var None = {ctor: "None"};
   var Model = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return function (k) {
                                    return function (l) {
                                       return function (m) {
                                          return function (n) {
                                             return function (o) {
                                                return function (p) {
                                                   return function (q) {
                                                      return function (r) {
                                                         return {x: a
                                                                ,y: b
                                                                ,dx: c
                                                                ,dy: d
                                                                ,kx: e
                                                                ,ky: f
                                                                ,keys: g
                                                                ,t: h
                                                                ,dt: i
                                                                ,seed: j
                                                                ,buildings: k
                                                                ,numBuildingsToAdd: l
                                                                ,randomValues: m
                                                                ,windowWidth: n
                                                                ,windowHeight: o
                                                                ,movementType: p
                                                                ,sunset: q
                                                                ,showInfo: r};
                                                      };
                                                   };
                                                };
                                             };
                                          };
                                       };
                                    };
                                 };
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var Sunset = F2(function (a,b) {    return {y: a,h: b};});
   var NullMove = {ctor: "NullMove"};
   var StaticMove = {ctor: "StaticMove"};
   var MouseMove = {ctor: "MouseMove"};
   var TimeMove = {ctor: "TimeMove"};
   var init = function (_p15) {
      var _p16 = _p15;
      var _p17 = _p16._1;
      var model = {x: 0
                  ,y: 0
                  ,dx: 0
                  ,dy: 0
                  ,kx: 0
                  ,ky: 0
                  ,keys: _U.list([])
                  ,t: 0
                  ,dt: 0
                  ,seed: $Random.initialSeed(42)
                  ,buildings: _U.list([])
                  ,numBuildingsToAdd: 10
                  ,randomValues: $Array.fromList(_U.list([]))
                  ,windowWidth: _p16._0
                  ,windowHeight: _p17
                  ,movementType: TimeMove
                  ,sunset: {y: 0 - $Basics.toFloat(_p17) / 3
                           ,h: $Basics.toFloat(_p17) / 4}
                  ,showInfo: false};
      return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
   };
   var toMovementType = function (code) {
      var _p18 = $Char.fromCode(code);
      switch (_p18.valueOf())
      {case "M": return MouseMove;
         case "T": return TimeMove;
         case "S": return StaticMove;
         default: return NullMove;}
   };
   var getMovementType = function (keys) {
      return A2($List.filter,
      function (a) {
         return !_U.eq(a,NullMove);
      },
      A2($List.map,toMovementType,$Set.toList(keys)));
   };
   var keysUpdateMovementType = F2(function (keys,model) {
      var processedKeys = getMovementType(keys);
      return $List.isEmpty(processedKeys) ? model : _U.update(model,
      {movementType: A2($Maybe.withDefault,
      NullMove,
      $List.head(processedKeys))});
   });
   var keysUpdate = F2(function (keys,model) {
      return A2(keysUpdateToggleInfo,
      keys,
      A2(keysUpdateMovementType,
      keys,
      A2(keysUpdateAddBuildings,
      keys,
      A2(keysUpdateModel,keys,model))));
   });
   var update = F2(function (action,model) {
      var _p19 = action;
      switch (_p19.ctor)
      {case "None": return {ctor: "_Tuple2"
                           ,_0: model
                           ,_1: $Effects.none};
         case "MouseMoved": return {ctor: "_Tuple2"
                                   ,_0: A2(mouseUpdate,
                                   {ctor: "_Tuple2",_0: _p19._0._0,_1: _p19._0._1},
                                   model)
                                   ,_1: $Effects.none};
         case "KeyDown": return {ctor: "_Tuple2"
                                ,_0: A2(keysUpdate,_p19._0,model)
                                ,_1: $Effects.none};
         case "WindowSizeChange": return {ctor: "_Tuple2"
                                         ,_0: model
                                         ,_1: $Effects.none};
         default: return {ctor: "_Tuple2"
                         ,_0: resetMouseDelta(updateBuildingsInModel(addBuildingsUpdate(randomUpdate(A2(timeUpdate,
                         _p19._0,
                         model)))))
                         ,_1: $Effects.none};}
   });
   return _elm.Cityscape.values = {_op: _op
                                  ,TimeMove: TimeMove
                                  ,MouseMove: MouseMove
                                  ,StaticMove: StaticMove
                                  ,NullMove: NullMove
                                  ,Sunset: Sunset
                                  ,Model: Model
                                  ,init: init
                                  ,None: None
                                  ,TimeDelta: TimeDelta
                                  ,KeyDown: KeyDown
                                  ,MouseMoved: MouseMoved
                                  ,WindowSizeChange: WindowSizeChange
                                  ,update: update
                                  ,updateBuildings: updateBuildings
                                  ,resetMouseDelta: resetMouseDelta
                                  ,updateBuildingsInModel: updateBuildingsInModel
                                  ,wrapBuildings: wrapBuildings
                                  ,updateWindowDimensions: updateWindowDimensions
                                  ,randomUpdate: randomUpdate
                                  ,increment: increment
                                  ,isDown: isDown
                                  ,toMovementType: toMovementType
                                  ,getMovementType: getMovementType
                                  ,keysUpdateMovementType: keysUpdateMovementType
                                  ,keysUpdateAddBuildings: keysUpdateAddBuildings
                                  ,keysUpdateModel: keysUpdateModel
                                  ,keysUpdateToggleInfo: keysUpdateToggleInfo
                                  ,keysUpdate: keysUpdate
                                  ,getNumBuildings: getNumBuildings
                                  ,getRandomValues: getRandomValues
                                  ,popRandomValues: popRandomValues
                                  ,toValue: toValue
                                  ,addBuilding: addBuilding
                                  ,reduceNewBuildingCount: reduceNewBuildingCount
                                  ,pickLayer: pickLayer
                                  ,addBuildingsUpdate: addBuildingsUpdate
                                  ,mouseUpdate: mouseUpdate
                                  ,timeUpdate: timeUpdate
                                  ,inputs: inputs
                                  ,grad: grad
                                  ,viewSunset: viewSunset
                                  ,view: view
                                  ,displayMouseCursor: displayMouseCursor
                                  ,displayModelInfo: displayModelInfo
                                  ,displayRandomValue: displayRandomValue};
};