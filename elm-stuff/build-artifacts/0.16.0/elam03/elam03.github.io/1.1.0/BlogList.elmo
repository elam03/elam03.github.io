Elm.BlogList = Elm.BlogList || {};
Elm.BlogList.make = function (_elm) {
   "use strict";
   _elm.BlogList = _elm.BlogList || {};
   if (_elm.BlogList.values) return _elm.BlogList.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Markdown = Elm.Markdown.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var _op = {};
   var Tick = function (a) {    return {ctor: "Tick",_0: a};};
   var inputs = $Signal.mergeMany(_U.list([A2($Signal.map,
   Tick,
   $Time.every($Time.minute))]));
   var FocusBlog = function (a) {
      return {ctor: "FocusBlog",_0: a};
   };
   var viewBlog = F2(function (address,blog) {
      var $break = _U.list([A2($Html.br,_U.list([]),_U.list([]))]);
      var debugContent = _U.list([A2($Html.p,
      _U.list([]),
      _U.list([$Html.text(A2($Basics._op["++"],
      "id: ",
      $Basics.toString(blog.id)))]))]);
      var url = _U.list([A2($Html.p,
      _U.list([]),
      _U.list([$Html.text(A2($Maybe.withDefault,"",blog.url))]))]);
      var content = A2($List.map,
      function (c) {
         return A2($Html.p,
         _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                                  ,_0: "text-align"
                                                  ,_1: "left"}]))]),
         _U.list([$Html.text(c)]));
      },
      A2($Maybe.withDefault,_U.list([]),blog.content));
      var titleContent = _U.list([A2($Html.h3,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                               ,_0: "text-align"
                                               ,_1: "center"}]))]),
      _U.list([$Html.text(blog.title)]))]);
      var allContent = A2($Basics._op["++"],
      titleContent,
      A2($Basics._op["++"],
      content,
      A2($Basics._op["++"],debugContent,url)));
      var attributes = _U.list([$Html$Attributes.$class("bloglist-item")
                               ,A2($Html$Events.onClick,address,FocusBlog(blog.id))]);
      return A2($Html.th,attributes,allContent);
   });
   var view = F2(function (address,model) {
      var viewCurrBlog = A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2"
                                               ,_0: "border-style"
                                               ,_1: "solid"}]))]),
      model.currBlog);
      var numCols = 2;
      var blogs = A2($Utils.composeTiledHtml,
      numCols,
      A2($List.map,
      function (b) {
         return A2(viewBlog,address,b);
      },
      model.blogs));
      return A2($Html.div,
      _U.list([]),
      _U.list([viewCurrBlog
              ,A2($Html.h3,
              _U.list([]),
              _U.list([$Html.text(A2($Basics._op["++"],
              "debug: ",
              A2($Basics._op["++"],
              model.debug,
              A2($Basics._op["++"],
              " currId: ",
              $Basics.toString(model.currId)))))]))
              ,A2($Html.table,
              _U.list([$Html$Attributes.$class("bloglist-table")]),
              blogs)]));
   });
   var LoadBlogMarkdown = function (a) {
      return {ctor: "LoadBlogMarkdown",_0: a};
   };
   var getContent = function (location) {
      return $Effects.task(A2($Task.map,
      LoadBlogMarkdown,
      $Task.toMaybe($Http.getString(location))));
   };
   var LoadBlogList = function (a) {
      return {ctor: "LoadBlogList",_0: a};
   };
   var errorBlog = {title: "error"
                   ,id: 0
                   ,keywords: $Maybe.Just(_U.list(["error"]))
                   ,content: $Maybe.Just(_U.list(["error","error"]))
                   ,url: $Maybe.Just("")};
   var errorBlogList = {blogs: _U.list([errorBlog])};
   var Model = F5(function (a,b,c,d,e) {
      return {blogListFile: a
             ,blogs: b
             ,currBlog: c
             ,debug: d
             ,currId: e};
   });
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "LoadBlogList": var blogs = function (_) {
              return _.blogs;
           }(A2($Maybe.withDefault,errorBlogList,_p0._0));
           var populateBlogId = function (b) {
              return $Basics.snd($List.unzip(A2($List.map,
              function (_p1) {
                 var _p2 = _p1;
                 var _p3 = _p2._0;
                 return {ctor: "_Tuple2"
                        ,_0: _p3
                        ,_1: _U.update(_p2._1,{id: _p3})};
              },
              A2($List.indexedMap,
              F2(function (v0,v1) {
                 return {ctor: "_Tuple2",_0: v0,_1: v1};
              }),
              b))));
           };
           var blogs$ = populateBlogId(blogs);
           return {ctor: "_Tuple2"
                  ,_0: _U.update(model,{blogs: blogs$})
                  ,_1: $Effects.none};
         case "LoadBlogMarkdown": var debug = model.debug;
           var currBlog = $Markdown.toHtml(A2($Maybe.withDefault,
           "Failed to load!",
           _p0._0));
           return {ctor: "_Tuple2"
                  ,_0: A5(Model,
                  model.blogListFile,
                  model.blogs,
                  _U.list([currBlog]),
                  debug,
                  model.currId)
                  ,_1: $Effects.none};
         case "FocusBlog":
         var debug = $Basics.toString($List.length(model.blogs));
           var blog = A2($Maybe.withDefault,
           errorBlog,
           A2($Array.get,_p0._0,$Array.fromList(model.blogs)));
           var blogMarkdownFile = A2($Maybe.withDefault,"",blog.url);
           return {ctor: "_Tuple2"
                  ,_0: A5(Model,
                  model.blogListFile,
                  model.blogs,
                  model.currBlog,
                  debug,
                  model.currId)
                  ,_1: getContent(blogMarkdownFile)};
         default: return {ctor: "_Tuple2",_0: model,_1: $Effects.none};}
   });
   var Blog = F5(function (a,b,c,d,e) {
      return {title: a,id: b,keywords: c,content: d,url: e};
   });
   var BlogList = function (a) {    return {blogs: a};};
   var decodeBlogList = A2($Json$Decode.object1,
   BlogList,
   A2($Json$Decode._op[":="],
   "blogs",
   $Json$Decode.list(A6($Json$Decode.object5,
   Blog,
   A2($Json$Decode._op[":="],"title",$Json$Decode.string),
   $Json$Decode.succeed(-1),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],
   "keywords",
   $Json$Decode.list($Json$Decode.string))),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],
   "content",
   $Json$Decode.list($Json$Decode.string))),
   $Json$Decode.maybe(A2($Json$Decode._op[":="],
   "url",
   $Json$Decode.string))))));
   var getBlogList = function (location) {
      return $Effects.task(A2($Task.map,
      LoadBlogList,
      $Task.toMaybe(A2($Http.get,decodeBlogList,location))));
   };
   var init = function (blogList) {
      return {ctor: "_Tuple2"
             ,_0: A5(Model,blogList,_U.list([]),_U.list([]),"debug!",0)
             ,_1: getBlogList(blogList)};
   };
   _op["=>"] = F2(function (v0,v1) {
      return {ctor: "_Tuple2",_0: v0,_1: v1};
   });
   return _elm.BlogList.values = {_op: _op
                                 ,BlogList: BlogList
                                 ,Blog: Blog
                                 ,Model: Model
                                 ,errorBlogList: errorBlogList
                                 ,errorBlog: errorBlog
                                 ,init: init
                                 ,LoadBlogList: LoadBlogList
                                 ,LoadBlogMarkdown: LoadBlogMarkdown
                                 ,FocusBlog: FocusBlog
                                 ,Tick: Tick
                                 ,update: update
                                 ,view: view
                                 ,viewBlog: viewBlog
                                 ,inputs: inputs
                                 ,getBlogList: getBlogList
                                 ,getContent: getContent
                                 ,decodeBlogList: decodeBlogList};
};